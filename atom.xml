<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HenryCheng</title>
  <icon>https://www.gravatar.com/avatar/a0796c5b18dc2c6201b5bddc81480b44</icon>
  <subtitle>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行  如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.clearloveway.com/"/>
  <updated>2019-07-05T14:24:01.647Z</updated>
  <id>https://www.clearloveway.com/</id>
  
  <author>
    <name>HenryCheng</name>
    <email>clearloveway@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 中 slice 的那些事</title>
    <link href="https://www.clearloveway.com/posts/79d167b9/"/>
    <id>https://www.clearloveway.com/posts/79d167b9/</id>
    <published>2017-11-07T16:00:00.000Z</published>
    <updated>2019-07-05T14:24:01.647Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 07 2019 17:26:47 GMT+0800 (GMT+08:00) --><p align="center"><img src="https://upload-images.jianshu.io/upload_images/571495-70c3e7915ad2de18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/220"></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>我们都知道在 Go 语言中，数组的长度是不可变的，那么为了更加灵活的处理数据，Go 提供了一种功能强悍的类型切片（slice），slice 可以理解为 “动态数组”。但是 slice 并不是真正意义上的动态数组，而是一个引用类型。slice 总是指向一个底层 array，slice 的声明也可以像 array 一样，只是不需要长度。slice 的声明和数组类似，如下<a id="more"></a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iSlice []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>这里的声明和数组一样，只是少了长度，注意两者的比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个保存 int 的 slice</span></span><br><span class="line"><span class="keyword">var</span> iSlice []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个长度为 10 的 int 数组</span></span><br><span class="line"><span class="keyword">var</span> iArray [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>还有一种声明的方法是使用 make() 函数，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>用 make() 函数创建的时候有三个参数，<code>make(type, len[, cap])</code> ，依次是类型、长度、容量。</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-4fdb7e1b2f7b7707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>如图所示，上图表示创建了 slice1 ，长度是 5，默认的值都是 0，容量是 10，这样声明就开辟了一块容量是 10 的连续的一块内存。当然如果我们不指定容量也是可以的，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>这样就会根据实际情况动态分配内存，而不是最开始指定一块固定大小的内存。需要注意的是我们一般使用 make() 函数来创建 slice，因为我们可以指定 slice 的容量，这样在最开始创建的时候就分配好空间，避免数据多次改变导致多次重新改变 cap 分配空间带来不必要的开销。</p><h2 id="slice-的特性"><a href="#slice-的特性" class="headerlink" title="slice 的特性"></a>slice 的特性</h2><p>关于 slice 的一些基本特性，<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md" target="_blank" rel="noopener">《Go Web 编程》</a> 这本书里已经讲的很详细，有对基本知识不清楚的童鞋可以去补习一下，这里就不一一叙述了。我么来看一个例子，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"aSlice length = %d, cap = %d, self = %v\n"</span>, <span class="built_in">len</span>(aSlice), <span class="built_in">cap</span>(aSlice), aSlice)</span><br><span class="line">aSlice = <span class="built_in">append</span>(aSlice, <span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"aSlice length= %d, cap = %d, self = %v"</span>, <span class="built_in">len</span>(aSlice), <span class="built_in">cap</span>(aSlice), aSlice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们运行，控制台打印</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-c4d0c74009ecd930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>我们会看到 aSlice 进行 append 操作以后，它的容量增加了一倍，cap 并没有变成我们想象中的 6 ，而是变成了 10<br><img src="http://upload-images.jianshu.io/upload_images/571495-a011d8b2d2aa0b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770" alt="aSlice"><br>如果我们最开始 slice 的容量是 10，长度是 5 ，那么再加一个元素是不会改变切片的容量的。也就是说，当我们往 slice中增加元素超过原来的容量时，slice 会自增容量，当现有长度 &lt; 1024 时 cap 增长是翻倍的，当超过 1024，cap 的增长是 1.25 倍增长。我们来看一下 <a href="https://github.com/golang/go/blob/master/src/runtime/slice.go" target="_blank" rel="noopener">slice.go</a> 的源码会发现有这样一个函数，里面说明了 cap 的增长规则</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="keyword">int</span>)</span> <span class="title">slice</span></span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    ....省略....</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">newcap := old.<span class="built_in">cap</span></span><br><span class="line">doublecap := newcap + newcap</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> old.<span class="built_in">len</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">newcap = doublecap</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line"><span class="comment">// and prevent an infinite loop.</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">newcap += newcap / <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line"><span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line"><span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    ....省略....</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码，在对 slice 进行 append 等操作时，可能会造成 slice 的自动扩容。其扩容时的大小增长规则是：</p><ul><li>如果新的 slice 大小是当前大小2倍以上，则大小增长为新大小</li><li>否则循环以下操作：如果当前slice大小小于1024，按每次 2 倍增长，否则每次按当前大小 1/4 增长，直到增长的大小超过或等于新大小。</li><li>append 的实现只是简单的在内存中将旧 slice 复制给新 slice</li></ul><p>来看一个例子，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">bSlice := <span class="built_in">append</span>(aSlice, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d\n"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line">aSlice[<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会看到控制台输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-5edc429446adc268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>变化过程如下图所示</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-01444240896f17a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>上面说明，在 slice 的 cap 范围内增加元素， slice 只会发生 len 的变化不会发生 cap 的变化，同样也说明 slice 实际上是指向一个底层的数组，当多个 slice 指向同一个底层数组的时候，其中一个改变，其余的也会跟着改变，这里需要注意一下。我们同样从 <a href="https://github.com/golang/go/blob/master/src/runtime/slice.go" target="_blank" rel="noopener">slice.go</a> 的源码中 slice 的定义可以看出，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里关于底层的东西就不多叙述，有兴趣的可以看看 <a href="http://www.jianshu.com/u/12201cdd5d7a" target="_blank" rel="noopener">一缕殇流化隐半边冰霜</a> 冰霜的 <a href="http://www.jianshu.com/p/030aba2bff41" target="_blank" rel="noopener">深入解析 Go 中 Slice 底层实现</a> 这篇文章，对 slice 的底层实现的讲解。接下来我们把上面的代码改变一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">bSlice := <span class="built_in">append</span>(aSlice, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d\n"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line">aSlice[<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到下面的输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-60d34400ca09c1c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>上面代码可以用下图说明</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-d0758d9aef746c16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>也就是说，当 append 的数据超过原来的容量以后，就会重新分配一块新的内存，并把原来的数据 copy 过来，并且保留原来的空间，供原来的 slice（aSlice） 使用这样 aSlice 和 bSlice 就各自指向不同的地址，当 aSlice 改变时，bSlice 不会改变。<br>关于 cap 还有一点需要注意，我们来用一个例子说明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">Array_a := [<span class="number">10</span>]<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>&#125;</span><br><span class="line">Slice_a := Array_a[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">Slice_b := Slice_a[<span class="number">6</span>:<span class="number">7</span>]</span><br><span class="line">fmt.Printf(<span class="string">"Slice_a %v , cap = %d, len = %d\n"</span>, <span class="keyword">string</span>(Slice_a), <span class="built_in">cap</span>(Slice_a), <span class="built_in">len</span>(Slice_a))</span><br><span class="line">fmt.Printf(<span class="string">"Slice_b %v , cap = %d, len = %d\n"</span>, <span class="keyword">string</span>(Slice_b), <span class="built_in">cap</span>(Slice_b), <span class="built_in">len</span>(Slice_b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-94b2fac8482da167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>这里我们会发现 Slice_b 对 Slice_a 进行重新切片后，并没有报错，而是还有输出，这是因为 Slice_a 的 cap 是 8 ，并不是我们想象的 3，slice 指向的是一块连续的内存，所以 Slice_a 的容量其实是一直到 Array_a 的最后的。所以这里 Array_b 对 Array_a 进行切片后会得到值，<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md" target="_blank" rel="noopener">《Go Web 编程》</a> 上这张图形象的解释了对数组的切片结果，这里是需要注意的一个点。</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-2f02ecdf921639fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="关于-copy"><a href="#关于-copy" class="headerlink" title="关于 copy"></a>关于 copy</h2><p>我们来看下面代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">bSlice := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(bSlice, aSlice)</span><br><span class="line">fmt.Println(aSlice, bSlice)<span class="comment">//[1 2 3] [1 2 3 7 8 9]</span></span><br><span class="line">       <span class="comment">//如果是 copy( aSlice, bSlice) 则结果是 [4 5 6] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 copy() 函数有两个参数，一个是 to 一个是 from，就是将第二个 copy 到第一个上面，如果第一个长度小于第二个，那么就会 copy 与第一个等长度的值，如 copy( aSlice, bSlice) 的结果是 [4 5 6] ，反之则是短的覆盖长的前几位。当然我们也可以指定复制长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">bSlice := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(bSlice[<span class="number">2</span>:<span class="number">5</span>], aSlice)</span><br><span class="line">fmt.Println(aSlice, bSlice)<span class="comment">//[1 2 3] [4 5 1 2 3 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 slice 的 copy 的规则逻辑我们也可以在源码中看出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicecopy</span><span class="params">(to, fm slice, width <span class="keyword">uintptr</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> fm.<span class="built_in">len</span> == <span class="number">0</span> || to.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := fm.<span class="built_in">len</span></span><br><span class="line"><span class="keyword">if</span> to.<span class="built_in">len</span> &lt; n &#123;</span><br><span class="line">n = to.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> width == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(slicecopy)</span><br><span class="line">racewriterangepc(to.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">racereadrangepc(fm.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">msanwrite(to.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">msanread(fm.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">size := <span class="keyword">uintptr</span>(n) * width</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">1</span> &#123; <span class="comment">// common case worth about 2x to do here</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> is this still worth it with new memmove impl?</span></span><br><span class="line">*(*<span class="keyword">byte</span>)(to.array) = *(*<span class="keyword">byte</span>)(fm.array) <span class="comment">// known to be a byte pointer</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">memmove(to.array, fm.array, size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看源码接着往下看会发现这样一个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicestringcopy</span><span class="params">(to []<span class="keyword">byte</span>, fm <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(fm) == <span class="number">0</span> || <span class="built_in">len</span>(to) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(fm)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(to) &lt; n &#123;</span><br><span class="line">n = <span class="built_in">len</span>(to)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(slicestringcopy)</span><br><span class="line">racewriterangepc(unsafe.Pointer(&amp;to[<span class="number">0</span>]), <span class="keyword">uintptr</span>(n), callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">msanwrite(unsafe.Pointer(&amp;to[<span class="number">0</span>]), <span class="keyword">uintptr</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memmove(unsafe.Pointer(&amp;to[<span class="number">0</span>]), stringStructOf(&amp;fm).str, <span class="keyword">uintptr</span>(n))</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现这个函数的两个参数分别是 []byte 和 string ，这里其实是 Go 实现了一个将 string 复制到 []byte 上的方法，这个方法有什么用，我们来看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">c := []<span class="keyword">byte</span>(s) <span class="comment">// 将字符串 s 转换为 []byte 类型</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">'c'</span></span><br><span class="line">s2 := <span class="keyword">string</span>(c) <span class="comment">// 再转换回 string 类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, s2)</span><br><span class="line">fmt.Printf(<span class="string">"s-%x, c-%x, s2-%x"</span>, &amp;s, &amp;c, &amp;s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-b47540184be2e4c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>在 Go 中字符串是不可以改变的，我们可以用上面的方法来改变字符串，这里可以看到是实现了 string 和 []byte 的互相转换，达到了修改 string 的目的。我们去看看 <a href="https://github.com/golang/go/blob/master/src/runtime/string.go" target="_blank" rel="noopener">string.go</a> 的源码会发现，有下面的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringtoslicebyte</span><span class="params">(buf *tmpBuf, s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> buf != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(s) &lt;= <span class="built_in">len</span>(buf) &#123;</span><br><span class="line">*buf = tmpBuf&#123;&#125;</span><br><span class="line">b = buf[:<span class="built_in">len</span>(s)]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b = rawbyteslice(<span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(b, s)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面有个 copy(b, s) ，这里就是将 string 复制到 []byte 上，在 slice.go 已经实现过了的。从源码中我们也可以看出每次 b 都是重新分配的，然后将 s 复制 给 b，从我们上面程控制台输出也可以看到每次地址都有变化，所以说 string 和 []byte 的相互转换是有内存开销的，不过对于现在的机器来说，这点开销也不算什么。</p><p>最后，这是我学习 Go 的 slice 的一些理解与总结，由于能力有限，如果有理解不到位的地方，可以随时留言与我交流。</p><div class="note info"><p>Reference:<br>1、<strong><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">build-web-application-with-golang</a></strong><br>2、<strong><a href="https://github.com/golang/go" target="_blank" rel="noopener">go</a></strong></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 07 2019 17:26:47 GMT+0800 (GMT+08:00) --&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/571495-70c3e7915ad2de18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/220&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;我们都知道在 Go 语言中，数组的长度是不可变的，那么为了更加灵活的处理数据，Go 提供了一种功能强悍的类型切片（slice），slice 可以理解为 “动态数组”。但是 slice 并不是真正意义上的动态数组，而是一个引用类型。slice 总是指向一个底层 array，slice 的声明也可以像 array 一样，只是不需要长度。slice 的声明和数组类似，如下&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.clearloveway.com/categories/Go/"/>
    
    
      <category term="Go" scheme="https://www.clearloveway.com/tags/Go/"/>
    
      <category term="slice" scheme="https://www.clearloveway.com/tags/slice/"/>
    
      <category term="切片" scheme="https://www.clearloveway.com/tags/%E5%88%87%E7%89%87/"/>
    
  </entry>
  
</feed>
