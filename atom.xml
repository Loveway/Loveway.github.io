<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HenryCheng</title>
  <icon>https://www.gravatar.com/avatar/a0796c5b18dc2c6201b5bddc81480b44</icon>
  <subtitle>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行  如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.clearloveway.com/"/>
  <updated>2019-07-05T08:41:57.302Z</updated>
  <id>https://www.clearloveway.com/</id>
  
  <author>
    <name>HenryCheng</name>
    <email>clearloveway@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SnapKit 中文文档翻译</title>
    <link href="https://www.clearloveway.com/posts/e6245de/"/>
    <id>https://www.clearloveway.com/posts/e6245de/</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.302Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --><p><img src="http://upload-images.jianshu.io/upload_images/571495-8ad534ec6d5cad5c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SnapKit"><br><a id="more"></a></p><div class="note info"><p><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit 地址</a><br><a href="https://github.com/Loveway/SnapKit-Chinse-Guide" target="_blank" rel="noopener">翻译文档 github地址</a></p></div><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><ul><li>iOS 8.0+ / Mac OS X 10.11+ / tvOS 9.0+</li><li>Xcode 8.0+</li><li>Swift 3.0+</li></ul><h1 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h1><ul><li><a href="https://github.com/SnapKit/SnapKit/blob/master/Documentation/SnapKit%203.0%20Migration%20Guide.md" target="_blank" rel="noopener">SnapKit 3.0 Migration Guide</a></li></ul><h1 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h1><ul><li>如果你需要帮助，使用 <a href="http://stackoverflow.com/questions/tagged/snapkit" target="_blank" rel="noopener">Stack Overflow</a> 。（标签 <code>snapkit</code>）</li><li>如果你想问一些简单的问题，使用 <a href="http://stackoverflow.com/questions/tagged/snapkit" target="_blank" rel="noopener">Stack Overflow</a> 。</li><li>如果你发现一个 bug ，请使用 issue 。</li><li>如果你有一个特别的需求， 请使用 issue 。</li><li>如果你想贡献一份自己的力量，你可以提交一个 pull 请求。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><p><a href="http://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a> 是第三方的管理库。你可以使用下面的命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install cocoapods</span><br></pre></td></tr></table></figure><div class="note info"><p>SnapKit 3.0.0+ 需要 CocoaPods 版本在 1.1.0 以上</p></div><p>为了使用 CocoaPods 能把 SnapKit 完整的安装到你的项目中，需要把下面内容加入到你的 <code>Podfile</code> 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source 'https:<span class="comment">//github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform :ios, '<span class="number">10.0</span>'</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target '&lt;<span class="type">Your</span> <span class="type">Target</span> <span class="type">Name</span>&gt;' <span class="keyword">do</span></span><br><span class="line">   pod '<span class="type">SnapKit'</span>, '~&gt; <span class="number">3.0</span>'</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后，运行下面的命令：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure><h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> 是一个会编译每个依赖框架，然后提供二进制文件的去中心化依赖管理器。</p><p>你可以使用 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 用以下命令安装 Carthage ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install carthage</span><br></pre></td></tr></table></figure><p>为了使用 Carthage 能把 SnapKit 完整的安装到你的项目中，需要把下面内容加入到你的 <code>Cartfile</code> 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github <span class="string">"SnapKit/SnapKit"</span> ~&gt; <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>运行 <code>carthage update</code> 编译你的 framework ，然后把 <code>SnapKit.framework</code>拖进你的项目中。</p><h2 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h2><p>如果你不喜欢上述的依赖管理，你可以手动地把 SnapKit 集成到你的项目中。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>SnapKit 设计的就是为了更简单的使用。假设我们想布局一个 box ，让它到父视图边缘距离是 20pts</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="type">UIView</span>()</span><br><span class="line">superview.addSubview(box)</span><br><span class="line"></span><br><span class="line">box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">    make.top.equalTo(superview).offset(<span class="number">20</span>)</span><br><span class="line">    make.<span class="keyword">left</span>.equalTo(superview).offset(<span class="number">20</span>)</span><br><span class="line">    make.bottom.equalTo(superview).offset(-<span class="number">20</span>) </span><br><span class="line">    make.<span class="keyword">right</span>.equalTo(superview).offset(-<span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者更短：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="type">UIView</span>()</span><br><span class="line">superview.addSubview(box)</span><br><span class="line"></span><br><span class="line">box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    make.edges.equalTo(superview).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中， SnapKit 不仅仅做了大大的缩短和增加了约束的可读性，还处理了以下这几个关键步骤：</p><ul><li>确定了最佳的父视图来添加约束。</li><li>追踪约束，以便以后能简单的移除。</li><li>在适当的视图上确保 <code>setTranslatesAutoresizingMaskIntoConstraints(false)</code> 的调用。</li></ul><h2 id="并不是所有的都只能用-equal"><a href="#并不是所有的都只能用-equal" class="headerlink" title="并不是所有的都只能用 equal"></a>并不是所有的都只能用 equal</h2><div class="note info"><p><code>.equalTo</code> 等同于 <strong>NSLayoutRelation.Equal</strong><br><code>.lessThanOrEqualTo</code> 等同于 <strong>NSLayoutRelation.LessThanOrEqual</strong><br><code>.greaterThanOrEqualTo</code> 等同于 <strong>NSLayoutRelation.GreaterThanOrEqual</strong></p></div><p>以上是接受一个参数的约束，下面的这些中任意一个也都可以：</p><h3 id="ViewAttribute"><a href="#ViewAttribute" class="headerlink" title="ViewAttribute"></a>ViewAttribute</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.centerX.lessThanOrEqualTo(view2.snp.<span class="keyword">left</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>ViewAttribute</th><th>NSLayoutAttribute</th></tr></thead><tbody><tr><td>view.snp.left</td><td>NSLayoutAttribute.left</td></tr><tr><td>view.snp.right</td><td>NSLayoutAttribute.right</td></tr><tr><td>view.snp.top</td><td>NSLayoutAttribute.top</td></tr><tr><td>view.snp.bottom</td><td>NSLayoutAttribute.bottom</td></tr><tr><td>view.snp.leading</td><td>NSLayoutAttribute.leading</td></tr><tr><td>view.snp.trailing</td><td>NSLayoutAttribute.trailing</td></tr><tr><td>view.snp.width</td><td>NSLayoutAttribute.width</td></tr><tr><td>view.snp.height</td><td>NSLayoutAttribute.height</td></tr><tr><td>view.snp.centerX</td><td>NSLayoutAttribute.centerX</td></tr><tr><td>view.snp.centerY</td><td>NSLayoutAttribute.centerY</td></tr><tr><td>view.snp.lastBaseline</td><td>NSLayoutAttribute.lastBaseline</td></tr></tbody></table><h3 id="UIView-NSView"><a href="#UIView-NSView" class="headerlink" title="UIView/NSView"></a>UIView/NSView</h3><p>如果你想让 view.left 大于或等于 label.left ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// these two constraints are exactly the same 这两个约束是完全一样的</span></span><br><span class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label)</span><br><span class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label.snp.<span class="keyword">left</span>)</span><br></pre></td></tr></table></figure><h3 id="Strict-Checks"><a href="#Strict-Checks" class="headerlink" title="Strict Checks"></a>Strict Checks</h3><p>Auto Layout 允许你把宽高设置成一个常量。如果你想设置一个 view 宽度的最大值和最小值，你可以像下面这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// width &gt;= 200 &amp;&amp; width &lt;= 400</span></span><br><span class="line">make.width.greaterThanOrEqualTo(<span class="number">200</span>)</span><br><span class="line">make.width.lessThanOrEqualTo(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>但是，像 left，right，centerY 等等这样的对齐属性， Auto Layout 是不允许你把它们设置成常量的。但是如果你把这些属性设置成了常量，SnapKit 会把这些转换成相对于父视图的约束：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates view.left &lt;= view.superview.left + 10</span></span><br><span class="line">make.<span class="keyword">left</span>.lessThanOrEqualTo(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>你也可以使用其他的方法构建你的约束，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make.top.equalTo(<span class="number">42</span>)</span><br><span class="line">make.height.equalTo(<span class="number">20</span>)</span><br><span class="line">make.size.equalTo(<span class="type">CGSize</span>(width: <span class="number">50</span>, height: <span class="number">100</span>))</span><br><span class="line">make.edges.equalTo(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">make.<span class="keyword">left</span>.equalTo(view).offset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><div class="note info"><p><code>.priority</code>允许你来指定明确的优先级</p></div><p>优先级可以写在约束链的末尾，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.top.equalTo(label.snp.top).priority(<span class="number">600</span>)</span><br></pre></td></tr></table></figure><h2 id="一些组合"><a href="#一些组合" class="headerlink" title="一些组合"></a>一些组合</h2><p>SnapKit 还提供了一些便利的方法来同时创建多个约束。</p><h3 id="edges"><a href="#edges" class="headerlink" title="edges"></a>edges</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make top, left, bottom, right equal view2</span></span><br><span class="line">make.edges.equalTo(view2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make top = superview.top + 5, left = superview.left + 10,</span></span><br><span class="line"><span class="comment">// bottom = superview.bottom - 15, right = superview.right - 20</span></span><br><span class="line">make.edges.equalTo(superview).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make width and height greater than or equal to titleLabel</span></span><br><span class="line">make.size.greaterThanOrEqualTo(titleLabel)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make width = superview.width + 100, height = superview.height - 50</span></span><br><span class="line">make.size.equalTo(superview).offset(<span class="type">CGSize</span>(width: <span class="number">100</span>, height: -<span class="number">50</span>))</span><br></pre></td></tr></table></figure><h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make centerX and centerY = button1</span></span><br><span class="line">make.center.equalTo(button1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make centerX = superview.centerX - 5, centerY = superview.centerY + 10</span></span><br><span class="line">make.center.equalTo(superview).offset(<span class="type">CGPoint</span>(x: -<span class="number">5</span>, y: <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>你也可以创建视图的属性链以增加可读性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All edges but the top should equal those of the superview</span></span><br><span class="line">make.<span class="keyword">left</span>.<span class="keyword">right</span>.bottom.equalTo(superview)</span><br><span class="line">make.top.equalTo(otherView)</span><br></pre></td></tr></table></figure><h2 id="更多的选择"><a href="#更多的选择" class="headerlink" title="更多的选择"></a>更多的选择</h2><p>有时候为了动画或者删除、替换约束，你需要修改现有的约束。SnapKit 提供了一些不同的方法来更新约束。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>你可以通过约束的 make 表达式将局部变量或者类属性的约束结果分配给一个指定的约束。你也可以通过将它们存在数组中来引用多个约束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topConstraint: <span class="type">Constraint</span>? = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// when making constraints</span></span><br><span class="line">view1.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">  <span class="keyword">self</span>.topConstraint = make.top.equalTo(superview).offset(padding.top).constraint </span><br><span class="line">  make.<span class="keyword">left</span>.equalTo(superview).offset(padding.<span class="keyword">left</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// then later you can call</span></span><br><span class="line"><span class="keyword">self</span>.topConstraint.uninstall()</span><br><span class="line"></span><br><span class="line"><span class="comment">// or if you want to update the constraint</span></span><br><span class="line"><span class="keyword">self</span>.topConstraint.updateOffset(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="snp-updateConstraints"><a href="#snp-updateConstraints" class="headerlink" title="snp.updateConstraints"></a>snp.updateConstraints</h3><p>如果你只是想更新约束的值，你可以使用 <code>snp.updateConstraints</code> 方法来替代 <code>snp.makeConstraints</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is Apple's recommended place for adding/updating constraints</span></span><br><span class="line"><span class="comment">// this method can get called multiple times in response to setNeedsUpdateConstraints</span></span><br><span class="line"><span class="comment">// which can be called by UIKit internally or in your code if you need to trigger an update to your constraints</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">updateConstraints</span><span class="params">()</span></span> &#123; </span><br><span class="line">    <span class="keyword">self</span>.growingButton.snp.updateConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">        make.center.equalTo(<span class="keyword">self</span>)</span><br><span class="line">        make.width.equalTo(<span class="keyword">self</span>.buttonSize.width).priority(<span class="number">250</span>)  </span><br><span class="line">        make.height.equalTo(<span class="keyword">self</span>.buttonSize.height).priority(<span class="number">250</span>)</span><br><span class="line">        make.width.lessThanOrEqualTo(<span class="keyword">self</span>) make.height.lessThanOrEqualTo(<span class="keyword">self</span>) </span><br><span class="line">     &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// according to Apple super should be called at end of method </span></span><br><span class="line">     <span class="keyword">super</span>.updateConstraints()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="snp-remakeConstraints"><a href="#snp-remakeConstraints" class="headerlink" title="snp.remakeConstraints"></a>snp.remakeConstraints</h3><p><code>snp.remakeConstraints</code> 和 <code>snp.makeConstraints</code> 类似。不同的是，使用<code>snp.remakeConstraints</code> 需要先删除 SnapKit 安装的所有约束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeButtonPosition</span><span class="params">()</span></span> &#123; </span><br><span class="line">  <span class="keyword">self</span>.button.snp.remakeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">    make.size.equalTo(<span class="keyword">self</span>.buttonSize) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> topLeft &#123; </span><br><span class="line">      make.top.<span class="keyword">left</span>.equalTo(<span class="number">10</span>) </span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      make.bottom.equalTo(<span class="keyword">self</span>.view).offset(-<span class="number">10</span>) </span><br><span class="line">      make.<span class="keyword">right</span>.equalTo(<span class="keyword">self</span>.view).offset(-<span class="number">10</span>) </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/571495-8ad534ec6d5cad5c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;SnapKit&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="SnapKit" scheme="https://www.clearloveway.com/tags/SnapKit/"/>
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="文档" scheme="https://www.clearloveway.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>重读 Swift 之二：Operator Declaration（运算符重载）</title>
    <link href="https://www.clearloveway.com/posts/67356339/"/>
    <id>https://www.clearloveway.com/posts/67356339/</id>
    <published>2016-09-29T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.304Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --><h2 id="为什么要重载运算符"><a href="#为什么要重载运算符" class="headerlink" title="为什么要重载运算符"></a>为什么要重载运算符</h2><p>我们都知道所谓的运算符平常的也就是 <code>+ - * /</code> 之类的，比如我们随便写个 <code>1 + 2</code> 打印肯定输出的是 <code>3</code> ，那么我们为什么还要重载运算符呢？下面我们就举个例子，如下我定义个结构体<a id="more"></a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> z: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们定义两个变量 V1，V2</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">V1</span> = <span class="type">Vector</span>(x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="type">V2</span> = <span class="type">Vector</span>(x: <span class="number">4</span>, y: <span class="number">5</span>, z: <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>然后我们来写<code>V1 + V2</code>，报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-ed690fe1f87cda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" error "><br>报错 <code>+</code> 不能用于 <code>Vector</code>，这是因为 <code>Vector</code> 是我们自定义的一个结构体，所以编译器不知道我们要用 <code>+</code> 对这个结构体做什么操作。因此，在这里我们就需要用到运算符的重载。</p><h2 id="如何重载运算符"><a href="#如何重载运算符" class="headerlink" title="如何重载运算符"></a>如何重载运算符</h2><h3 id="含有两个参数的运算符的重载"><a href="#含有两个参数的运算符的重载" class="headerlink" title="含有两个参数的运算符的重载"></a>含有两个参数的运算符的重载</h3><p>因为运算符是一个函数，比如对于数组的 <code>reduce</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</span><br></pre></td></tr></table></figure><p>结果是 10 ，这里的 <code>+</code> 就代表了一个函数，所以我们重新写的时候可以如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y + <span class="keyword">right</span>.y, z: <span class="keyword">left</span>.z + <span class="keyword">right</span>.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就实现了 <code>+</code> 的重载，上面函数中 left 和 right 两个参数都是 Vector 类型的，一个表示运算符左边的参数一个表示运算符右边的参数（这两个参数是有先后顺序的，由于加法满足加法交换律所以这里体现不出来，有兴趣的可以试一下 <code>-</code> 的重载，这时候就要注意顺序了），然后返回值得类型也是 Vector 类型，再来实现<code>V1 + V2</code>的时候，就发现得到了一个新的 Vector 类型的值</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-7743fd3f2d5a3a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="V1 + V2"></p><p>这里我们就已经完成了 <code>+</code> 这个运算符的重载。当然有兴趣的童鞋还可以试着自己实现 <code>-</code> 或者 <code>*</code> 的重载，这里就不一一举例了。<br>关于双目运算符的重载，和单目运算符类似，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>  += <span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> Vector, <span class="keyword">right</span>: Vector)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">left</span> = <span class="keyword">left</span> + <span class="keyword">right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="http://upload-images.jianshu.io/upload_images/571495-407bf897c0229ca7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="V1"></p><h3 id="含有一个参数的运算符的重载"><a href="#含有一个参数的运算符的重载" class="headerlink" title="含有一个参数的运算符的重载"></a>含有一个参数的运算符的重载</h3><p>照着上面单目运算符的方式我们自己来写个 <code>-</code> 重载例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> - <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: -vector.x, y: -vector.y, z: -vector.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我们的逻辑这里取反逻辑上应该是正确的，可是编译会发现报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-5e066ede422ddd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>这里我们就要注意了，和有两个参数的运算符不同的是，只有一个参数的运算符位置是不固定的，这里的 <code>-</code> 可以在前可以在后，所以我们在这里还需要注意运算符的位置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> - <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: -vector.x, y: -vector.y, z: -vector.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加上一个 prefix 表示前置（后置是 postfix）。这样就可以明确运算符的位置</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-40e8c6d074f5ebea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="-V1"></p><h3 id="比较运算符的重载"><a href="#比较运算符的重载" class="headerlink" title="比较运算符的重载"></a>比较运算符的重载</h3><p>关于比较运算符的重载，顾名思义也是有两个参数的，返回值肯定是个 <code>Bool</code> 类型的，如下重载 <code>==</code> 运算符</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x == <span class="keyword">right</span>.x &amp;&amp; <span class="keyword">left</span>.y == <span class="keyword">right</span>.y &amp;&amp; <span class="keyword">left</span>.z == <span class="keyword">right</span>.z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/571495-2d71c68a6b38af31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" V1 与 V2 的比较"><br>再来看看 <code>&gt;</code> 的重载，逻辑稍微多一点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> &gt; <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.x != <span class="keyword">right</span>.x &#123; <span class="keyword">return</span> <span class="keyword">left</span>.x &gt; <span class="keyword">right</span>.x &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.y != <span class="keyword">right</span>.y &#123; <span class="keyword">return</span> <span class="keyword">left</span>.y &gt; <span class="keyword">right</span>.y &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.z != <span class="keyword">right</span>.z &#123; <span class="keyword">return</span> <span class="keyword">left</span>.z &gt; <span class="keyword">right</span>.z &#125;</span><br><span class="line">    <span class="comment">//如果上面判断都失败了说明 left == right，所以返回值应该是 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再去比较 V1 和 V2 就会出现你逻辑中的效果。常规的运算符就说到这里，下面我们来看一下自定义运算符的重载。</p><h2 id="自定义运算符的重载"><a href="#自定义运算符的重载" class="headerlink" title="自定义运算符的重载"></a>自定义运算符的重载</h2><p>上面我们所说的都是 Swift 中已经存在了的运算符，那么我们能不能自己定义运算符呢？答案是肯定的，在文档中我们可以看到这么一句话</p><div class="note info"><p>Custom operators can begin with one of the ASCII characters <code>/, =, -, +, !, *, %, &lt;, &gt;, &amp;, |, ^, ?</code> , or ~, or one of the Unicode characters defined in the grammar below (which include characters from the <em>Mathematical Operators</em>, <em>Miscellaneous Symbols</em>, and <em>Dingbats</em> Unicode blocks, among others).<br>After the first character, combining Unicode characters are also allowed.</p></div><p>意思就是</p><div class="note info"><p>自定义运算符可以由以下其中之一的 ASCII 字符<code>/、=、 -、+、!、*、%、&lt;、&gt;、&amp;、|、^、?</code>以及 <code>~</code> ，或者后面语法中规定的任一个 Unicode 字符（其中包含了<em>数学运算符<em>、</em>零散符号(Miscellaneous Symbols)</em> 以及印刷符号 Dingbats 之类的 Unicode 块）开始。<br>在第一个字符之后，允许使用组合型 Unicode 字符。</p></div><h3 id="自定义单目运算符"><a href="#自定义单目运算符" class="headerlink" title="自定义单目运算符"></a>自定义单目运算符</h3><p>所以我们在自定义运算符的时候要注意一下。下面我们就来简单的自定义一个单目运算符 <code>+++</code>，这个运算符的作用呢就是让 Vector 中的每个变量都加 1 ，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是编译的时候会报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-508132cfcf9a52a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>这是因为我们没有明确的定义这个 <code>+++</code>，所以编译器不识别。所以我们应该申明一下这个运算符，正确的代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面我们用 <code>prefix operator +++</code> 声明前置运算符 +++ ，这样后面就可以用了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">V3</span> = <span class="type">Vector</span>(x: <span class="number">1</span>, y: <span class="number">1</span>, z: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">V3</span>+++</span><br></pre></td></tr></table></figure><p>如上输出结果就是 Vector(x: 2, y: 2, z: 2)，到此，单目运算符的自定义就完成了。</p><h3 id="自定义双目运算符"><a href="#自定义双目运算符" class="headerlink" title="自定义双目运算符"></a>自定义双目运算符</h3><p>双目运算符的定义和单目运算符的定义类似，但是双目运算符自定义的时候的关键字是 <code>infix</code>，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** </span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们就自定义了一个求平方的双目运算符 <code>**</code>，然后我们试试 <code>2 ** 2</code>就可以看到结果是 <code>4.0</code>。<br>上面好像没有什么问题了，下面我想算一个平方的平方，拨入 2 的 2次方的 3 次方，照着逻辑应该这样写</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span></span><br></pre></td></tr></table></figure><p>但是编译我们会发现报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-b2e1e315590d0634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>错误是说我们上面的运算是个非结合性的运算，所谓的结合性（associativity）就是运算的先后顺序，在 Swift 2 中我们都知道还有个优先级（precedence），默认的是 100 ，它的范围是 0~200 ，这个是用来设置运算符优先级的，比如在swift 2.2 中我们完全定义一个求平方运算符就是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** &#123; <span class="keyword">associativity</span> <span class="keyword">left</span> <span class="keyword">precedence</span> <span class="number">120</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span>  <span class="comment">//结果是64.0</span></span><br></pre></td></tr></table></figure><p>在 Swift 3 中有些变化，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">precedencegroup <span class="type">ComparativePrecedence</span> &#123;</span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">right</span></span><br><span class="line">    higherThan: <span class="type">LogicalConjunctionPrecedence</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** : <span class="type">ComparativePrecedence</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上我们输入 <code>2 ** 2 ** 3</code>，就会发现结果是 256.0，这是因为我们把 associativity 设置成为了 right，所以运算从右边开始，先算 <code>2 ** 3 = 8.0</code>，然后再是 <code>2 ** 8.0 = 256.0</code>，如果我们把 associativity 设置成为了 left，就会发现结果是 64.0。关于更多的 associativity 和 higherThan 或者 lowerThan 之类的可以在下方参考连接中参考，这里就不一一说明了。<br>差不多运算符重载就到这里了，如果还有什么遗漏，欢迎大家指正！</p><div class="note info"><p>参考：<br>1、<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md" target="_blank" rel="noopener">swift-evolution</a><br>2、<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/operator-declaration" target="_blank" rel="noopener">Operator Declaration</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;为什么要重载运算符&quot;&gt;&lt;a href=&quot;#为什么要重载运算符&quot; class=&quot;headerlink&quot; title=&quot;为什么要重载运算符&quot;&gt;&lt;/a&gt;为什么要重载运算符&lt;/h2&gt;&lt;p&gt;我们都知道所谓的运算符平常的也就是 &lt;code&gt;+ - * /&lt;/code&gt; 之类的，比如我们随便写个 &lt;code&gt;1 + 2&lt;/code&gt; 打印肯定输出的是 &lt;code&gt;3&lt;/code&gt; ，那么我们为什么还要重载运算符呢？下面我们就举个例子，如下我定义个结构体&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="Operator Declaration" scheme="https://www.clearloveway.com/tags/Operator-Declaration/"/>
    
      <category term="运算符重载" scheme="https://www.clearloveway.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>重读 Swift 之一：Optional（可选型）</title>
    <link href="https://www.clearloveway.com/posts/6c5d39da/"/>
    <id>https://www.clearloveway.com/posts/6c5d39da/</id>
    <published>2016-08-04T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --><p>之前学习 Swift 的时候都是比较破碎，零零散散，以至于有些地方学习的不够透彻。所以趁最近有时间，就开始重新学习 Swift ，从最基本的开始学习，希望能深入理解，见微知著！<br>关于 Swift 我们都是到是类型安全型的，相较于 OC ，安全似乎更能体现出来。关于这一方面， Swift 的可选型（optional）就不得不说了，可选型可以说是 Swift 最为突出的特性之一。可能有的同学在看 Swift 的过程中会遇到可选型（比如 <code>String?</code> ），有时也会见到 <code>String!</code> 这样的，搞不明白其中的意思，所以今天就来一步步理解可选型。<a id="more"></a></p><h2 id="什么是-Optional"><a href="#什么是-Optional" class="headerlink" title="什么是 Optional"></a>什么是 Optional</h2><p>Optional 是 Swift 新加入的类型，所以学过 OC 的童鞋就知道在 OC 中是没有这个概念的。可选型的意思简单理解是：有值得时候就有值，无值的时候就是 nil 。Swift 中的 nil 和其他语言中的 nil 还有些不一样，nil 自己本身就是一种类型，没有就是 nil ，是和其他类型严格区分开的。<br>可选型的定义很简单：类型 + ? 。比如 <code>String?</code>、<code>Int?</code>、<code>Float?</code> 等，这里需要注意的是 <code>String?</code> 和 <code>String</code> 是完全不同的两个类型，前者是 <code>String</code> 类型的额可选型，后者是 <code>String</code> 类型，注意区分。举个例子，在 OC 中我们可以这样写</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@"loveway"</span>;</span><br><span class="line">name = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>上面的这种写法在 OC 中是没有问题的，相比于上面，在 swift 中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"loveway"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>如果我们像上面代码中这样写就会报错，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-1af13cff33c0abd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>说的是 nil 是不可以分配给 String 类型的，这也说明在 swift 中 nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>可选型，顾名思义就是可以选择，比如 <code>String?</code> 的意思就是可以在 <code>String</code> 和 <code>nil</code> 之间选择，可以是 <code>String</code> 也可以是 <code>nil</code> 。如果一个变量定义成 <code>String</code>，那么这个变量就会是 <code>String</code> 类型，而不可能是<code>nil</code>。<br>还有一点需要注意的是声明可选型必须是显示的声明也就是必须是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>这样，而不能是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>这样，因为 Swift 在做类型判断的时候无法判断 name 到底是 String 类型的可选型还是其他类型的可选型，因此会导致编译错误。</p><blockquote><p>Tips: 当然枚举类型的写法还可以如</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="type">Optional</span>.<span class="type">Some</span>(<span class="string">"Loveway"</span>)</span><br></pre></td></tr></table></figure><p>这样，只不过我们一般都用<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p></p><p>这样的简写。</p><h2 id="Optional的解包"><a href="#Optional的解包" class="headerlink" title="Optional的解包"></a>Optional的解包</h2><p>可选型是不能够被直接使用的（因为 Swift 是类型安全的，可选型的值又可能会是 nil，如果不做处理可能导致程序 crash），如果我们想使用可选型的值，那么在这之前我们需要做的一项工作就是：解包（unwarp）！</p><h3 id="强制解包"><a href="#强制解包" class="headerlink" title="强制解包"></a>强制解包</h3><p>所谓的强制解包意思就是我知道这个类型是可选型，但是在我的程序执行到这里的时候我可以保证它是有值得，所以我要在这里使用它。具体表现形式就是在可选型后面加个 <code>!</code>，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="string">"My name is "</span> + name!</span><br></pre></td></tr></table></figure><p>但是这样的解包是不安全，因为你不知道什么时候你的这个可选型就会变成 nil，如果我们代码非常多的话，一不小心为 nil了，可能会导致程序崩溃。这个时候我们会想到一种方法：判空！如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123; </span><br><span class="line">   <span class="string">"My name is "</span> + name!</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写似乎是没有什么问题了，但是需要注意的是，你在判断非 nil 的作用域内使用 name 的时候还必须把 <code>!</code> 带上，这样代码比较多的时候还是比较麻烦。于是我们可以使用下面这种方式，</p><h3 id="使用-if-let-解包"><a href="#使用-if-let-解包" class="headerlink" title="使用 if let 解包"></a>使用 <code>if let</code> 解包</h3><p>使用 <code>if let</code> 解包如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line">   <span class="string">"My name is "</span> + name</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解包方式可以保证 name 是解包过的，不会再是 nil 这种情况，其实逻辑是和上面做非空判断一样的。当然你把 <code>let</code> 换成 <code>var</code> 也是可以的，效果是一样的，只不过我们一般要用的是解包后的值，而不会去改变它，所以平常使用中一般都是用 <code>if let</code> 。<br>同时 <code>if let</code> 可以同时一次性解包多个可选型，用 <code>,</code> 隔开，使语句简洁，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age &#123;</span><br><span class="line">   <span class="string">"My name is "</span> + name</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，既然这里使用的是 <code>if</code> ，那么同样我们可以如下这样用，来进行进一步的判断筛选</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age <span class="keyword">where</span> age == <span class="number">18</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"My name is <span class="subst">\(name)</span>, age is <span class="subst">\(String(age)</span>)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上也是可以的。</p><h2 id="可选链式调用（Optional-Chaining）"><a href="#可选链式调用（Optional-Chaining）" class="headerlink" title="可选链式调用（Optional Chaining）"></a>可选链式调用（Optional Chaining）</h2><p>可选链式调用（Optional Chaining）是一种可以在当前值可能为 nil 的可选值上请求和调用属性、方法及下标的方法。如果可选值有值，那么调用就会成功，如果可选值是 nil ，那么调用将返回 nil。多个调用可以连接在一起形成一个调用链，如果其中任何一个节点为 nil ，整个调用链都会失败，即返回 nil 。</p><p>下面我们就来举个例子具体说明可选链，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line">    <span class="built_in">print</span>(name.uppercaseString)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来解包 name ，如果有值就打印出 name 的大写，如果没有就输出 <code>name is nil</code> ，其实上面这段代码完全等同于</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name?.uppercaseString</span><br></pre></td></tr></table></figure><p>上面这句代码的意思就是如果可选型变量 name 有值，那么就对 name 进行解包，并得到 name 的uppercaseString 值，如果没有，那么这句代码就会返回一个 nil 。这样就符合 Swift 的类型安全，完全是没有问题的。但是如果你写成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name!.uppercaseString</span><br></pre></td></tr></table></figure><p>也是可以的，不过不安全，因为如果 name 没有值，你进行强制解包，就会报错。<br>所以我们以后可能会用到类似于 <code>person?.name?.uppercaseString</code> 这样的一层层解包的，这种就是可选链。</p><h2 id="Nil-Coalescing-Operator（空合运算符）"><a href="#Nil-Coalescing-Operator（空合运算符）" class="headerlink" title="Nil Coalescing Operator（空合运算符）"></a>Nil Coalescing Operator（空合运算符）</h2><p>如上，如果我们想把解包后的值存起来的话，可以这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName = name == <span class="literal">nil</span> ? <span class="string">"no name"</span> : name!</span><br></pre></td></tr></table></figure><p>上面代码的意思就是如果 name 为 nil ，newName 就是 “no name”，否则 newName 就是 name!（name的解包）。其实 Swift 为我们提供了更简洁的语法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName2 = name ?? <span class="string">"no name"</span></span><br></pre></td></tr></table></figure><p>上面代码的意思就是 name 如果有值 newName2 的值就是 name! ,否则就是 no name 。这里需要注意的是 <code>??</code>是空合运算符，这样写的可阅读性强，比较简洁。<br>当然关于 <code>??</code> 远不止这些，有兴趣的同学可以看 <a href="http://www.jianshu.com/p/3ede1ec31351" target="_blank" rel="noopener">聊聊swift语言中的“??”</a> 这篇文章。</p><h2 id="隐式可选型"><a href="#隐式可选型" class="headerlink" title="隐式可选型"></a>隐式可选型</h2><p>上面我们都知道了，创建一个显示可选型是: 类型 + <code>?</code>。这里创建隐式可选型的就是： 类型 + <code>!</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>! = <span class="string">"loveway"</span></span><br></pre></td></tr></table></figure><p>这里可能有的童鞋会疑惑，已经有了显示的可选型，为什么还需要有隐式的可选型。这里其实隐式的可选型也是有一定作用的。比如你有一个变量，声明为隐式的可选型（<code>!</code>），它的作用就是，当你这个类没有被初始化的时候他是没有值的，但是当你这个类初始化以后，你可以确保他是有值的，所以这里声明为隐式的可选型，而不是显示的。同样需要注意的是隐式的可选型也是可选型，如果你需要用它的值，你也是要进行判断的。如果不进行判断而直接使用，可能会造成不可预料的后果！<br>差不多可选型就到这里了，如果还有什么遗漏，欢迎大家指正！</p><div class="note info"><p>参考：<br><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/17_Optional_Chaining.html" target="_blank" rel="noopener">可选链式调用（Optional Chaining）</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;之前学习 Swift 的时候都是比较破碎，零零散散，以至于有些地方学习的不够透彻。所以趁最近有时间，就开始重新学习 Swift ，从最基本的开始学习，希望能深入理解，见微知著！&lt;br&gt;关于 Swift 我们都是到是类型安全型的，相较于 OC ，安全似乎更能体现出来。关于这一方面， Swift 的可选型（optional）就不得不说了，可选型可以说是 Swift 最为突出的特性之一。可能有的同学在看 Swift 的过程中会遇到可选型（比如 &lt;code&gt;String?&lt;/code&gt; ），有时也会见到 &lt;code&gt;String!&lt;/code&gt; 这样的，搞不明白其中的意思，所以今天就来一步步理解可选型。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="Optional" scheme="https://www.clearloveway.com/tags/Optional/"/>
    
      <category term="可选型" scheme="https://www.clearloveway.com/tags/%E5%8F%AF%E9%80%89%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Swift Tips：常用的知识点总结（持续更新...）</title>
    <link href="https://www.clearloveway.com/posts/b318b796/"/>
    <id>https://www.clearloveway.com/posts/b318b796/</id>
    <published>2016-06-21T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --><p>前不久 swift 2.2 发布，感觉差不多快趋于稳定了，就在工作之余把 swift 拿出来重新看了一下，总结一些常用的知识点。话说好记性不如烂笔头，放在这忘记的时候还可以拿出来瞅瞅，免得遗忘的时候到处查找，这里与大家分享一下<a id="more"></a>。</p><h2 id="if-let-和-guard"><a href="#if-let-和-guard" class="headerlink" title="if let  和  guard"></a>if let 和 guard</h2><p><code>if let</code> 和 <code>guard</code> 只是语法糖，不使用也没关系，但是使用了以后使代码更简洁，逻辑更加清晰，举个例子，<br>我们平时写个参数是可选型的（ <code>Optional</code> ）函数的时候，往往需要在函数中作进一步的判断，比如我简单的判断输入的一个数是不是正数（ <code>&gt; 0</code>），正常的写法应该是这样的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们 <code>judgeTheNumber()</code> 这个函数的参数是 <code>Int?</code> ，所以我们得判断是不是 <code>nil</code> ，然后再判断是不是 <code>&gt; 0</code> ，比较正产的写法是这样的这样，但是代码好像比较多，有没有更简洁的呢？</p><h3 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a><code>if let</code></h3><p>上面的代码我们使用 <code>if let</code> 的写法如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> number = number <span class="keyword">where</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"nil or zero or negative number"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的效果和上面的是一样的，通过<code>if let number = number where number &gt; 0</code>这么一句是不是，代码更简洁，可读性更高了！</p><h3 id="guard"><a href="#guard" class="headerlink" title="guard"></a><code>guard</code></h3><p><code>guard</code> 是 swift 2.0 的新特性，在 Xcode 7.0 推出来的，与 <code>if</code> 语句不同的是，<code>guard</code> 只有在条件不满足时才会执行，你可以把 <code>guard</code> 近似的看成 <code>Assert</code> ，上面的代码用 <code>guard</code> 就如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> number = number <span class="keyword">where</span> number &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line"><span class="comment">//        当number满足上述条件时执行下面代码，否则执行上面的return</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至于 <code>if let</code> 和 <code>guard</code> 语法中出现的 <code>where</code> ，只是附加一些条件。相当于逻辑运算 <code>&amp;&amp;</code> 和 <code>||</code>。当然上面的例子还有很多的写法，如果不熟悉，可以多写几次试试。</p><h2 id="available-和-available"><a href="#available-和-available" class="headerlink" title="@available 和 #available"></a>@available 和 #available</h2><h3 id="available"><a href="#available" class="headerlink" title="#available"></a><code>#available</code></h3><p>在以前开发的时候，不同版本的 API 兼容着实让人头疼，所以会看到各种 <code>#define</code> 然后就是在代码中各种，<code>if (iOS 8)</code> 等等之类的，如果有的地方不注意，比如你调用一个方法是 iOS 8 才有的，然后你的版本最低支持 iOS 7 ，毫无疑问在 iOS 7 上调用的时候会崩溃。而 Swift 2.0 新引入的 <code>#available</code> 机制，就解决了这一问题。如果你在低版本上使用高版本的方法时，编译器检查的时候发现你没处理的话就会直接报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-1760b3fdedb8d6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="`Deployment Target` 为 `iOS 7.0`时使用`UIAlertController`"><br>上面提示 UIAlertController 只有在 iOS 8 以后才可以使用，这时点击左侧的报错红点就会有提示，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-ecd83c50a8890b9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击左侧红点以后的提示"><br>这时我们就可以看到有个提示是 <code>Add if #available version check</code> 就是用 <code>#available</code> 来做版本检查，同时原代码上就会加上一个 <code>if else</code> 的判断点击 <code>Fix-it</code> 后代码就变成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">8.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>.<span class="keyword">init</span>(title: <span class="string">"温馨提示"</span>, message: <span class="string">"这是iOS8以后才有的方法"</span>, preferredStyle: <span class="type">UIAlertControllerStyle</span>.<span class="type">Alert</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再编译就不会报错了。<br><code>#available</code> 这里也算是对开发方式的一个改进，也更加体现出 swift 一直强调的安全。这里 <code>#available(iOS 8.0, *)</code> 中，意思就是 iOS 8 以上，其中 <code>*</code> 表示全平台，无特殊说明的话都是 <code>*</code> ，同时后面还可以加参数，比如 <code>#available(iOS 8.0, OSX 10.10, *)</code> ，表示就是 iOS 8 以及 OSX 10.10 以上。</p><h3 id="available-1"><a href="#available-1" class="headerlink" title="@available"></a>@available</h3><p><code>@available</code> 放在函数（<code>func</code>），类（<code>class</code>）或者协议（<code>protocol</code>）前面。表明这些类型适用的平台和操作系统。比如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">newMethord</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//   This func can perform after iOS 9.0</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以像下面这样调用这个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> #available(iOS <span class="number">9.0</span>, *) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">newMethord()</span><br></pre></td></tr></table></figure><p>如果你不加上 <code>#available(iOS 9.0, *)</code> 那么当你支持的版本低于 iOS 9.0 的时候毫无疑问会报错的。</p><div class="note info"><p>参考链接<br>1、 <a href="https://www.hackingwithswift.com/new-syntax-swift-2-availability-checking" target="_blank" rel="noopener">Availability checking in Swift 2: backwards compatibility the smart way</a><br>2、<a href="http://stackoverflow.com/questions/32761511/difference-between-available-and-available-in-swift-2-0" target="_blank" rel="noopener"><a href="http://stackoverflow.com/questions/32761511/difference-between-available-and-available-in-swift-2-0" target="_blank" rel="noopener">Difference between @available and #available in swift 2.0</a></a></p></div><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><p>首先我们来看个例子，我想弹出一个 <code>alert</code> ，于是我写了个方法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMyAlertMethord</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> #available(iOS <span class="number">8.0</span>, *) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>.<span class="keyword">init</span>(title: <span class="string">"温馨提示"</span>, message: <span class="string">"这是iOS8以后才有的方法"</span>, preferredStyle: <span class="type">UIAlertControllerStyle</span>.<span class="type">Alert</span>)</span><br><span class="line">    alert.addAction(<span class="type">UIAlertAction</span>.<span class="keyword">init</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Destructive</span>, handler: &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Handle OK action "</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">self</span>.presentViewController(alert, animated: <span class="literal">true</span>, completion: &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"UIAlertController present"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我在 <code>viewDidLoad()</code> 调用 <code>showMyAlertMethord()</code> 这个方法，运行发现弹出来了，没有问题。现在我想延迟三秒执行，这里我简单的用 <code>performSelector()</code> 这个方法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(showMyAlertMethord(), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这时候报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-9917fcf79ee3094c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误提示"><br>一脸懵逼，噢，搞了半天发现原来是方法名写错了，这时候果断换上 <code>Selector(&quot;showAlert&quot;)</code> ，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(<span class="type">Selector</span>(<span class="string">"showMyAlertMethord"</span>), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>虽然有个警告，但是不管了，运行，出来了，完美解决！<br>于是就用这种方法写，于是有一天再用这个方法的时候，崩溃了！我的天，不是吧，之前都是好好的，一模一样的代码，查看源码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(<span class="type">Selector</span>(<span class="string">"showmyAlertethord"</span>), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>哦，找了半天，原来之前是 <code>Selector(&quot;showMyAlertMethord&quot;</code> ，现在手一哆嗦，写成了 <code>Selector(&quot;showmyAlertethord&quot;)</code> ，坑爹啊，写错一个字母。虽然解决了问题，不过这时候你就应该有所思考，这种写法是不对的，或者说是不安全的，再回头过来看看那个警告<br><img src="http://upload-images.jianshu.io/upload_images/571495-8d7c734be84c611a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告提示"><br>意思是让我们用 <code>#selector()</code> 来代替 <code>Selector()</code>，所以到最后正确的代码应该如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(#selector(<span class="keyword">self</span>.showMyAlertMethord), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这就是在 swift 2.2 中提倡使用的方法 <code>#selector()</code> ，你会发现如果你输错方法名编译器会直接报错，而不是运行期来检查是不是有这个方法，这样编译期（<code>compile-time</code>）来检查出来，而不是运行期（<code>run-time</code>），这样就更安全了！<br>所以，在调用方法的时候，还是使用 <code>#selector()</code> 吧，最好还是不要使用 <code>Selector()</code> 或者 <code>NSSelectorFromString()</code> ，因为这样会更安全！</p><div class="note info"><p>参考链接<br>1、<a href="http://stackoverflow.com/questions/24007650/selector-in-swift" target="_blank" rel="noopener">@selector() in Swift?</a><br>2、<a href="http://stackoverflow.com/questions/36007067/swift-selector-referencing-to-an-objective-c-method" target="_blank" rel="noopener">Swift #selector referencing to an Objective-C method</a></p></div><h2 id="inout"><a href="#inout" class="headerlink" title="inout"></a>inout</h2><p>升级了 Xcode 7.3 以后，简单的写一个例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tempStr = <span class="string">"My "</span></span><br><span class="line">        <span class="keyword">let</span> result = stringPlus(tempStr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"result is <span class="subst">\(result)</span>"</span>)</span><br><span class="line">        <span class="built_in">print</span>(tempStr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stringPlus</span><span class="params">(<span class="keyword">var</span> str: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        str = str + <span class="string">"Loveway !"</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**result <span class="keyword">is</span> <span class="type">My</span> <span class="type">Loveway</span> !**</span><br><span class="line">**<span class="type">My</span> **</span><br></pre></td></tr></table></figure><p>这是简单的字符串拼接的一个例子，调用、运行并没有什么问题，但是你会发现有一个警告，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-78011956e3028e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告提示"><br>没错，就是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'<span class="keyword">var</span>' parameters are deprecated and will be removed <span class="keyword">in</span> <span class="type">Swift</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>提示 <code>var</code> 类型的参数已经废弃了，并且将会在 swift 3 中移除！这是因为苹果认为 <code>var</code> 类型的参数会有限制，<code>var</code>变量参数只是在函数体内有用，超出作用域就是失效了，于是就使用了 <code>inout</code> 来代替 <code>var</code>，修改代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tempStr = <span class="string">"My "</span></span><br><span class="line">        <span class="keyword">let</span> result = stringPlus(&amp;tempStr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"result is <span class="subst">\(result)</span>"</span>)</span><br><span class="line">        <span class="built_in">print</span>(tempStr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stringPlus</span><span class="params">(<span class="keyword">inout</span> str: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        str = str + <span class="string">"Loveway !"</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**result is My Loveway !**</span><br><span class="line">**My Loveway !**</span><br></pre></td></tr></table></figure><p>嗯，好像没有警告了，完美解决！等等，什么，两次输出的结果不一样？？？第一次 <code>tempStr</code> 的值是 <code>My</code>，改成 <code>inout</code> 后的值变成 <code>My Loveway !</code> 了，这是因为 <code>inout</code> 是可以在函数作用域内改变参数的，并且还可以返回（不管你的函数有没有返回值，只要是在函数作用域内改变了这个 <code>inout</code> 参数）。<br><code>inout</code> 语意解释为输入输出参数（<code>In-Out Parameters</code>），输入输出参数被传递时遵循如下规则：</p><ul><li>1、函数调用时，参数的值被拷贝。</li><li>2、函数体内部，拷贝后的值被修改。</li><li>3、函数返回后，拷贝后的值被赋值给原参数</li></ul><p>这种行为被称为拷入拷出 (<code>copy-in copy-out</code>) 或值结果调用 (<code>call by value result</code>)。例如，当一个计算型属性或者一个具有属性观察器的属性被用作函数的输入输出参数时，其 <code>getter</code> 会在函数调用时被调用，而其 <code>setter</code> 会在函数返回时被调用。<br>作为一种优化手段，当参数值存储在内存中的物理地址时，在函数体内部和外部均会使用同一内存位置。这种优化行为被称为引用调用 (<code>call by reference</code>)，它满足了拷入拷出模型的所有需求，而消除了复制带来的开销。不要依赖于拷入拷出与引用调用之间的行为差异。但是你不能将同一个值传递给多个输入输出参数，因为多个输入输出参数引发的拷贝与覆盖行为的顺序是不确定的，因此原始值的最终值也将无法确定。</p><p>现在我们就不难理解为什么 <code>tempStr</code> 的值发生了变化，这也是 swift 要废弃 var 参数的原因。<br>似乎现在警告也解决了，<code>inout</code> 也知道了，于是继续向下写，写一个数字转英文的例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> digitNames = [<span class="number">0</span>: <span class="string">"one"</span>, <span class="number">1</span>: <span class="string">"two"</span>, <span class="number">3</span>: <span class="string">"three"</span>, <span class="number">4</span>: <span class="string">"four"</span>, <span class="number">5</span>: <span class="string">"five"</span>, <span class="number">6</span>: <span class="string">"six"</span>, <span class="number">7</span>: <span class="string">"seven"</span>, <span class="number">8</span>: <span class="string">"eight"</span>, <span class="number">9</span>: <span class="string">"nine"</span>]</span><br><span class="line">        <span class="keyword">let</span> numbers: <span class="type">Array</span> = [<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line">        <span class="keyword">let</span> strArray = numbers.<span class="built_in">map</span>( &#123;</span><br><span class="line">            (<span class="keyword">var</span> number: <span class="type">Int</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">var</span> output = <span class="string">""</span></span><br><span class="line">            <span class="keyword">while</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">                output = digitNames[number % <span class="number">10</span>]! + output</span><br><span class="line">                number /= <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> output</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">print</span>(strArray)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**[&quot;twofour&quot;, &quot;twofive&quot;, &quot;twosix&quot;]**</span><br></pre></td></tr></table></figure><p>没有问题，但是警告又出来了</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-4bdfe3a643f96746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数字转英文的警告提示"><br>通过上面，于是我们改成了 <code>inout</code> ，结果报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-07da505c743ff9bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="改成`inout`后的报错"><br>似乎在这里 <code>inout</code> 并不能解决问题，这种情况下，有一种消除的警告的方法就是用一个临时变量接受这个输入的参数，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> digitNames = [<span class="number">0</span>: <span class="string">"one"</span>, <span class="number">1</span>: <span class="string">"two"</span>, <span class="number">3</span>: <span class="string">"three"</span>, <span class="number">4</span>: <span class="string">"four"</span>, <span class="number">5</span>: <span class="string">"five"</span>, <span class="number">6</span>: <span class="string">"six"</span>, <span class="number">7</span>: <span class="string">"seven"</span>, <span class="number">8</span>: <span class="string">"eight"</span>, <span class="number">9</span>: <span class="string">"nine"</span>]</span><br><span class="line"><span class="keyword">let</span> numbers: <span class="type">Array</span> = [<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line"><span class="keyword">let</span> strArray = numbers.<span class="built_in">map</span>( &#123;</span><br><span class="line">    (number: <span class="type">Int</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">var</span> number = number</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">        output = digitNames[number % <span class="number">10</span>]! + output</span><br><span class="line">        number /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(strArray)</span><br></pre></td></tr></table></figure><p>这样就解决了问题，这个也是苹果官方提供的一种解决思路。</p><div class="note info"><p>参考链接<br>1、<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md" target="_blank" rel="noopener">Removing <code>var</code> from Function Parameters</a><br>2、<a href="http://stackoverflow.com/questions/36164973/var-parameters-are-deprecated-and-will-be-removed-in-swift-3" target="_blank" rel="noopener"><code>&#39;var&#39;</code> parameters are deprecated and will be removed in Swift 3</a><br>3、<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/external-parameter-name" target="_blank" rel="noopener">Swift： Declarations</a></p></div><h2 id="noescape"><a href="#noescape" class="headerlink" title="@noescape"></a>@noescape</h2><p>关于闭包（<code>Closures</code>）这里就不多说了，不清楚的童鞋可以去 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html" target="_blank" rel="noopener">这里</a> 了解一下。<br>我们都知道闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift 中的闭包与 C 和 Objective-C 中的代码块（blocks）以及其他一些编程语言中的匿名函数比较相似。那么非逃逸闭包（<code>@noescape</code>）到底是个什么意思呢，举个栗子</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-5fe970053070ee11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="举个栗子"><br>如下代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        funcWithEscapeClosure(clouserTest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"222"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">       someFunc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clouserTest</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"333"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们会看到控制台的输出信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**333**</span><br><span class="line">**111**</span><br><span class="line">**222**</span><br></pre></td></tr></table></figure><p>从上到下看，按照函数的执行顺序，这个我们都能理解，是没错的。这个时候我们知道 <code>clouserTest ()</code> 是在 <code>funcWithEscapeClosure()</code>被调用后执行的，那么这个就是非逃逸闭包，对于非逃逸闭包，我们可以在参数名之前加一个 <code>@noescape</code>，用来标注这个函数是不能逃逸出函数体的，这样做的好处就是能让编译器明确的知道这个函数的生命周期，以做进一步的优化。比如上面的函数我们可以改成这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(@noescape someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        clouserTest()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译运行肯定是没有问题的。<br>有逃逸闭包肯定就有非逃逸闭包，非逃逸闭包的定义是：当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。这种情况大都是在异步操作的时候用到，还是上面按个例子，我们修改一下，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        funcWithEscapeClosure(clouserTest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"222"</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, (<span class="type">Int64</span>)(<span class="number">2</span> * <span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue()) &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">           someFunc()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clouserTest</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"333"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看看输出结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**111**</span><br><span class="line">**222**</span><br><span class="line">**333**</span><br></pre></td></tr></table></figure><p>结果表明 <code>someFunc()</code> 也就是 <code>clouserTest()</code> 是在最后执行的，这里的 <code>clouserTest()</code> 就从 <code>funcWithEscapeClosure()</code> 这个函数中逃逸出了，这个时候如果在参数前面加一个 <code>@noescape</code> 会报错，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-bfdb4d9df7fdb30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误提示"><br>如上，提示闭包使用的非逃逸（<code>@noescape</code>）参数可能需要允许它逃逸，这是因为 <code>funcWithEscapeClosure()</code> 这个函数执行完毕之后才会执行 <code>someFunc()</code> ，也就是说这种情况就是 <code>someFunc()</code> 就是逃逸出了函数，这里加 <code>@noescape</code> 肯定是不对的。<br>还有一点就是编译器知晓非逃逸闭包的上下文环境，所以非逃逸闭包中可以不写 self。比如你的类有一个 <code>name</code> 的变量，在非逃逸闭包中你就可以直接用 <code>name = &quot;loveway&quot;</code> ，而无需 <code>self.name = &quot;loveway&quot;</code> 这样。</p><h2 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a>mutating</h2><p><code>mutating</code> 从字面意思来看就是变化、改变，我们知道在 Objective-C 中只有类（<code>class</code>）中才可以定义方法，然而在 Swift 中，我们可以在类（<code>class</code>）、结构体（<code>struct</code>）、枚举（<code>enum</code>）中定义方法，这也是 Objective-C 和 Swift 的一个区别。下面以一个结构体举例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">var</span> man = <span class="type">Man</span>(height: <span class="number">170.0</span>, weight: <span class="number">62.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        man.gainHeightAndWeight(<span class="number">1.0</span>, gainWeight: <span class="number">2.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">       <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Now height is(<span class="subst">\(height + gainHeight)</span>), weight is (<span class="subst">\(weight + gainWeight)</span>)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br><span class="line">**Now height is(171.0), weight is (64.0)**</span><br><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br></pre></td></tr></table></figure><p>我们可以看到控制台输出的结果是没有问题的，<code>man</code> 的值没有变化。不过这个时候会有一个警告，如图<br><img src="http://upload-images.jianshu.io/upload_images/571495-7afaad4009977408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告截图"><br>意思是说这个 <code>man</code> 是不可变的，建议使用 <code>let</code> 来替代 <code>var</code> ，不去管它。现在来修改一下代码，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line"><span class="comment">//            print("Now height is(\(height + gainHeight)), weight is (\(weight + gainWeight))")</span></span><br><span class="line">            height += gainHeight</span><br><span class="line">            weight += gainWeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译就会报如下错误<br><img src="http://upload-images.jianshu.io/upload_images/571495-1d0285ca8cc845eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译报错"><br>这是因为结构体和枚举是值类型。默认情况下，值类型的属性不能在它的实例方法中被修改。<br>但是，如果你确实需要在某个特定的方法中修改结构体或者枚举的属性，你可以为这个方法选择可变(<code>mutating</code>)行为，然后就可以从其方法内部改变它的属性；并且这个方法做的任何改变都会在方法执行结束时写回到原始结构中。方法还可以给它隐含的 <code>self</code> 属性赋予一个全新的实例，这个新实例在方法结束时会替换现存实例。要使用可变方法，将关键字 <code>mutating</code> 放到方法的 <code>func</code> 关键字之前就可以了，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">var</span> man = <span class="type">Man</span>(height: <span class="number">170.0</span>, weight: <span class="number">62.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        man.gainHeightAndWeight(<span class="number">1.0</span>, gainWeight: <span class="number">2.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">       <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line"><span class="comment">//            print("Now height is(\(height + gainHeight)), weight is (\(weight + gainWeight))")</span></span><br><span class="line">            height += gainHeight</span><br><span class="line">            weight += gainWeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br><span class="line">**Man(height: 171.0, weight: 64.0)**</span><br></pre></td></tr></table></figure><p>这个时候 <code>man</code> 的值就改变了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Jul 07 2019 17:24:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;前不久 swift 2.2 发布，感觉差不多快趋于稳定了，就在工作之余把 swift 拿出来重新看了一下，总结一些常用的知识点。话说好记性不如烂笔头，放在这忘记的时候还可以拿出来瞅瞅，免得遗忘的时候到处查找，这里与大家分享一下&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="Swift Tips" scheme="https://www.clearloveway.com/tags/Swift-Tips/"/>
    
      <category term="知识点" scheme="https://www.clearloveway.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
</feed>
