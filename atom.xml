<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HenryCheng</title>
  <icon>https://www.gravatar.com/avatar/a0796c5b18dc2c6201b5bddc81480b44</icon>
  <subtitle>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行  如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.clearloveway.com/"/>
  <updated>2019-07-05T08:41:57.274Z</updated>
  <id>https://www.clearloveway.com/</id>
  
  <author>
    <name>HenryCheng</name>
    <email>clearloveway@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈关于 iOS 的架构以及应用</title>
    <link href="https://www.clearloveway.com/posts/28190a28"/>
    <id>https://www.clearloveway.com/posts/28190a28</id>
    <published>2019-04-25T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.274Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;一直以来想写一篇文章，但是没找到合适的主题，前段时间一直在看 <a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a> 的一些东西，本来有意向想写关于 Flutter 的一些总结，但是看的有些零零散散，并且没有实际应用过，所以也就搁置了。正好最近一段时间除主业务之余，一直在做我们 <a href="https://www.igancao.com/" target="_blank" rel="noopener">甘草医生</a> 用户端的重构，刚好有一些对于 iOS 架构方面的看法与感悟，在这里与大家分享。<a id="more"></a><br>万事开头难！其实在开始重构之前，我是很纠结的，一直很难开始。我也曾翻阅过很多资料，想找到一个合适的符合我们自己目前业务的架构，最后做了种种的比对与测试，选择了 <code>MVVM + 组件化 + AOP</code> 的模式来重构。可能有人会疑问，你为什么选择这样的架构模式？使用这些模式有什么好处？这些抽象的模式概念具体应该怎么在实际项目中运用？OK，那我们就带着这些疑问一步步往下看。</p><h2 id="一、关于架构模式"><a href="#一、关于架构模式" class="headerlink" title="一、关于架构模式"></a>一、关于架构模式</h2><p>&emsp;&emsp;我们先来了解一下在 iOS 中常用的一些架构模式</p><h3 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. <a href="https://zh.wikipedia.org/wiki/MVC" target="_blank" rel="noopener">MVC</a></h3><p>&emsp;&emsp;关于 MVC（Model-View-Controller）这个设计模式我相信稍有些编程经验的人都了解至少听说过，作为应用最为广泛的架构模式，大家应该都是耳熟能详了，但是不同的人对 MVC 的理解是不同的。在 iOS 中，Cocoa Touch 框架使用的就是 MVC ，如下</p><p align="center"><img src="https://github.com/loveway/LearningBlog/blob/master/Notes/Objective-C/image/ar_mvc.png?raw=true"></p><p>这是苹果典型的 MVC 模式，用户通过 View 将交互（点击、滑动等）通知给 Controller，Controller 收到通知后更新 Model，Model 状态改变以后再通知 Controller 来改变他们负责的 View。由于在 iOS 中我们常用的 UIViewController 本身就自带一个 View，所以在 iOS 开发中 Controller 层和 View 层总是紧密的耦合在一起，如果一个页面业务逻辑量大的话，一个视图控制器经常会很多行的代码，导致视图控制器非常的臃肿。<br>可见，MVC 模式虽然能带来简单的业务分层，但是想必各位使用 MVC 模式的 iOSer 们经常会被以下几个问题困扰</p><ol><li>厚重的 ViewController<br>在日常的处理中，我们一般将我们的一些网络请求、数据存储、视图逻辑等一些处理全部扔在我们的 ViewController 里，在业务量大的情况下，一个 ViewController 里面就会有几千行代码</li><li>较差的可测试性<br>对一个有几千甚至上万行的 ViewController 进行单元测试是一个非常难以接受的事情，可以说，谁接到这个任务都是难以接受的</li><li>较差的可读性<br>我相信大家都有接手一个项目然后改 bug 的经历，当你看到一个有 10000 行的代码的 ViewController 的时候，你肯定吐槽过</li></ol><h3 id="2-MVVM"><a href="#2-MVVM" class="headerlink" title="2. MVVM"></a>2. <a href="https://zh.wikipedia.org/wiki/MVVM" target="_blank" rel="noopener">MVVM</a></h3><p>&emsp;&emsp;MVVM （Model-View-ViewModel），其实也是基于 MVC 的。上面我们说的 MVC 臃肿的问题，在 MVVM 的架构模式中得到了解决，我们一些常用的网络请求、数据存储等都交给它处理，这样就可以分离出 ViewController 里面的一些代码使其“减肥”。</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_mvvm.gif?raw=true"></p><p>如图，就是 MVC 到 MVVM 的演变过程，在 MVVM 中 V 包含 View 和 ViewController，可以看出来 MVVM 其实就是把 MVC 中的 C 分离出来一个 ViewModel 用来做一些数据加工的事情。在上面 MVC 模式中讲了，一个 ViewController 经常会有很多东西要处理，数据加工、网络请求等，现在都可以交给 ViewModel 去做了。这样，Controller 就可以实现“减肥”，而更加专注于自己的数据调配的工作，绑定 ViewModel 和 View 的关系</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_mvvm2.png?raw=true"></p><p>可以看出 MVVM 的模式解决了 MVC 模式中的一些问题，使得 ViewController 代码量减少、使得可读性变高、代码单元测试变得简单。但是 MVVM 也有其一些缺陷，比如由于 ViewModel 和 View 的绑定，那么出现了 bug 第一时间定位不到 bug 的位置，有可能是 View 层的 bug 传到了 Model 层。还有一点就是对于较大的工程的项目，数据的绑定和转换需要较大的成本。关于其缺点以及可行的解决方式，在 <a href="https://casatwy.com/" target="_blank" rel="noopener">Casa Taloyum</a> 的 <a href="https://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="noopener">iOS应用架构谈 网络层设计方案</a> 已经说明的比较详细，有兴趣的童鞋可以去看一下，几篇关于架构方面的文章都很值得一读。</p><h3 id="3-其他的一些架构模式"><a href="#3-其他的一些架构模式" class="headerlink" title="3. 其他的一些架构模式"></a>3. 其他的一些架构模式</h3><p>&emsp;&emsp;还有一些其他的架构模式，比如 MVP（Model-View-Presenter）、VIPER（View-Interactor-Presenter-Entity-Routing）、MVCS（Model-View-Controller-Store）等，其实都是基于 MVC 思想派生出来的一些架构模式，基本都是为了给 Controller 减负而生的，所以还是那句话，万变不离 MVC ！</p><h2 id="二、架构模式的选用"><a href="#二、架构模式的选用" class="headerlink" title="二、架构模式的选用"></a>二、架构模式的选用</h2><p>&emsp;&emsp;了解到每个架构模式的优缺点之后，这里，我决定用 MVVM 的架构模式来重构我们的 APP。那么说到 MVVM ，我们就肯定是要提到 RAC ，也就是 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="noopener">ReactiveCocoa</a>，它是一个响应式编程的框架，可以使每层交互起来更加方便清晰。当然， RAC 肯定不是实现数据绑定的唯一方案，在 iOS 中比如 KVO、Notification、Delegate、Block等都可以实现，只不过是 RAC 的实现更加优雅一些，所以我们经常会采用 RAC 来实现数据的绑定。关于 RAC ，下面一张图很清晰的解释了它的思想，也就是 <a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%BC%8F%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">FRP</a>（Function Reactive Programming）函数响应式编程</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_frp.png?raw=true"></p><p>上图可以看到 c 根据 a 和 b 的值变化的过程。举个例子，我们一般在登录的时候，会限制输入手机号的长度，那么按着以往的做法，就是实现 UITextField 的代理，监听输入文字的变化，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、导入代理</span></span><br><span class="line">&lt;<span class="built_in">UITextFieldDelegate</span>&gt;</span><br><span class="line"><span class="comment">//2、设置代理</span></span><br><span class="line"><span class="keyword">self</span>.phoneTextField.delegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="comment">//3、实现代理</span></span><br><span class="line">- (<span class="keyword">void</span>)textFieldDidChange:(<span class="built_in">UITextField</span> *)textField &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (textField == <span class="keyword">self</span>.phoneTextField) &#123;</span><br><span class="line">            <span class="keyword">if</span> (textField.text.length &gt; <span class="number">11</span>) &#123;</span><br><span class="line">                textField.text = [textField.text substringToIndex:<span class="number">11</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果使用 RAC ，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[[<span class="keyword">self</span>.phoneTextField.rac_textSignal map:^<span class="keyword">id</span> _Nullable(<span class="built_in">NSString</span> * _Nullable value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length &gt; <span class="number">11</span> ? [value substringToIndex:<span class="number">11</span>] : value;</span><br><span class="line">&#125;] subscribeNext:^(<span class="built_in">NSString</span> *x) &#123;</span><br><span class="line">    @strongify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">self</span>.phoneTextField.text = x;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>可以看出代码变得更加清晰了，我们只需要实现对 <code>phoneTextField</code> 信号的监听，就可以实现了。我们再来看一个例子，比如在我们用户端的登录界面，如下图</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_login.gif?raw=true"></p><p>按着正常的逻辑就是用户输入 11 位手机号码后再输入密码才能使其登录，这个时候我们的登录按钮才能点击，要想实现这个逻辑，正常的做法应该如下，</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、导入代理</span></span><br><span class="line">&lt;<span class="built_in">UITextFieldDelegate</span>&gt;</span><br><span class="line"><span class="comment">//2、设置代理</span></span><br><span class="line"><span class="keyword">self</span>.phoneTextField.delegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.passwordTextField.delegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="comment">//3、实现代理</span></span><br><span class="line">- (<span class="keyword">void</span>)textFieldDidChange:(<span class="built_in">UITextField</span> *)textField &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.phoneTextField.text.length == <span class="number">11</span> &amp;&amp; [<span class="keyword">self</span>.passwordTextField isNotBlank]) &#123;</span><br><span class="line">             <span class="keyword">self</span>.loginButton.enabled = <span class="literal">YES</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">self</span>.loginButton.enabled = <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而使用 RAC 则如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[[[RACSignal combineLatest:@[<span class="keyword">self</span>.phoneTextField.rac_textSignal,</span><br><span class="line">                             <span class="keyword">self</span>.passwordTextField.rac_textSignal]] map:^<span class="keyword">id</span> _Nullable(RACTuple * _Nullable value) &#123;</span><br><span class="line">    </span><br><span class="line">    RACTupleUnpack(<span class="built_in">NSString</span> *phone, <span class="built_in">NSString</span> *password) = value;</span><br><span class="line">    <span class="keyword">return</span> @([password isNotBlank] &amp;&amp; phone.length == <span class="number">11</span>);</span><br><span class="line">    </span><br><span class="line">&#125;] subscribeNext:^(<span class="built_in">NSNumber</span> *x) &#123;</span><br><span class="line">    @strongify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">if</span> (x.boolValue) &#123;</span><br><span class="line">        <span class="keyword">self</span>.loginButton.enabled = <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.loginButton.enabled = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>我们将 <code>self.phoneTextField.rac_textSignal</code> 和 <code>self.passwordTextField.rac_textSignal</code> 这两个信号合并成一个信号并且监听，实现一定的逻辑，简单明了。当然， RAC 的好处远远不止这些，这里只是冰山一角，有兴趣的可以去自己用一用这个库，体验更多的功能，这里也就不多赘述了。</p><h2 id="三、关于组件化"><a href="#三、关于组件化" class="headerlink" title="三、关于组件化"></a>三、关于组件化</h2><p>&emsp;&emsp;组件化这个概念相信大家都听说过，使用组件化的好处就是使我们项目更好的解耦，降低各个分层之间的耦合度，使项目始终保持着 <code>高聚合，低耦合</code> 的特点。举个简单的例子，在 iOS 中页面之间的跳转，两个开发人员负责开发两个页面，小 A 负责开发的 AViewController 已经开发完毕，然后需要点击按钮跳到小 B 负责的 BViewController，并且需要传一个值，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、导入BViewController</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"BViewController"</span></span></span><br><span class="line"><span class="comment">//2、跳转</span></span><br><span class="line">BViewController *bViewController = [[BViewController alloc]init];</span><br><span class="line">bViewController.uid = <span class="string">@"123"</span>;</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:bViewController animated:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><p>这时候小 A 已经准备去写其他业务了，但是一问才发现小 B 并没有开始写 BViewController，还需要一段时间才能写，那么小 A 就郁闷了，要么就等着小 B 写完我再去做其他的，要么就先注释我这段代码，等到小 B 写完我再解注释。造成这种情况的原因就是因为两个页面之间紧紧地耦合在一起了，在开发人员少或者独立开发的情况下我们经常使用这种方式进行页面间的跳转和传值，页面基本都是一个人负责，所以感觉不到问题，试想一下在几十人开发的工作组中，划分很细的情况下，你自己的脱节是不是给别人带去了不必要的麻烦。我相信这是所有人都不想发生的，那么我们就需要对页面进行组件化解耦，这里我所使用的组件化方案是 <code>target-action</code> 方式，使用的是 <a href="https://casatwy.com/" target="_blank" rel="noopener">Casa Taloyum</a> 的 <a href="https://github.com/casatwy/CTMediator" target="_blank" rel="noopener">CTMediator</a>，其主要的思想就是通过一个中间者来提供服务，通过 <code>runtime</code>来调用组件服务，比如以前的依赖关系如下</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_unmodularization.png?raw=true"></p><p>那么使用 CTMediator 实现组件化以后，各组件之间的依赖关系变成下图</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_ modularization.png?raw=true"></p><p>这样各模块之间就实现了解耦，模块之间的通信就全部通过中间层来进行。我们回过头来再看之前的小 A 和小 B，如果使用这种方式，那么小 A 的跳转代码应该如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、导入Mediator</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"CTMediator+BViewControllerActions.h"</span></span></span><br><span class="line"><span class="comment">//2、跳转</span></span><br><span class="line"><span class="built_in">UIViewController</span> *viewController = [[<span class="built_in">CTMediator</span> sharedInstance] gc_bViewController:@&#123;<span class="string">@"uid"</span>: <span class="string">@"123"</span>&#125;];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:viewController animated:<span class="literal">YES</span> complete:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>这样小 A 就不用管小 B 是不是写完没，也不需要导入小 B 的页面，就可以跳转到小 B 的页面，实现了页面间的解耦。能达到这一目的的功臣就是我们的中间者，我们来看看它做了什么，我们还是以我们登录页面为例，我们从登陆跳转到注册页面的代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、导入Mediator</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"CTMediator+RegistViewControllerActions.h"</span></span></span><br><span class="line"><span class="comment">//2、跳转</span></span><br><span class="line"><span class="built_in">UIViewController</span> *viewController = [[<span class="built_in">CTMediator</span> sharedInstance] gc_registViewController];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:viewController animated:<span class="literal">YES</span> complete:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>其中 <code>CTMediator+RegistViewControllerActions.h</code> 中的代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CTMediator+RegistViewControllerActions.m</span></span><br><span class="line"><span class="comment">//  GCUser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 2019/4/15.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 HenryCheng. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"CTMediator+RegistViewControllerActions.h"</span></span></span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> gc_targetRegistVC = <span class="string">@"RegistViewController"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> gc_actionRegistVC = <span class="string">@"registViewController"</span>;</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CTMediator</span> (<span class="title">RegistViewControllerActions</span>)</span></span><br><span class="line">- (<span class="built_in">UIViewController</span> *)gc_registViewController &#123;</span><br><span class="line">        <span class="built_in">UIViewController</span> *viewController = [<span class="keyword">self</span> performTarget:gc_targetRegistVC</span><br><span class="line">                                                        action:gc_actionRegistVC</span><br><span class="line">                                                        params:@&#123;<span class="string">@"title"</span>: <span class="string">@"注册"</span>&#125;</span><br><span class="line">                                             shouldCacheTarget:<span class="literal">NO</span></span><br><span class="line">                                            ];</span><br><span class="line">        <span class="keyword">if</span> ([viewController isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">return</span> viewController;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>其中重要的就是 <code>performTarget:action:params:shouldCacheTarget:</code> 这个方法，内部的实现方式如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)performTarget:(<span class="built_in">NSString</span> *)targetName action:(<span class="built_in">NSString</span> *)actionName params:(<span class="built_in">NSDictionary</span> *)params shouldCacheTarget:(<span class="built_in">BOOL</span>)shouldCacheTarget &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *swiftModuleName = params[kCTMediatorParamsKeySwiftTargetModuleName];</span><br><span class="line">        <span class="comment">// generate target</span></span><br><span class="line">        <span class="built_in">NSString</span> *targetClassString = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (swiftModuleName.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            targetClassString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.Target_%@"</span>, swiftModuleName, targetName];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetClassString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Target_%@"</span>, targetName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSObject</span> *target = <span class="keyword">self</span>.cachedTarget[targetClassString];</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="literal">nil</span>) &#123;</span><br><span class="line">            Class targetClass = <span class="built_in">NSClassFromString</span>(targetClassString);</span><br><span class="line">            target = [[targetClass alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// generate action</span></span><br><span class="line">        <span class="built_in">NSString</span> *actionString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Action_%@:"</span>, actionName];</span><br><span class="line">        SEL action = <span class="built_in">NSSelectorFromString</span>(actionString);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里是处理无响应请求的地方之一，这个demo做得比较简单，如果没有可以响应的target，就直接return了。实际开发过程中是可以事先给一个固定的target专门用于在这个时候顶上，然后处理这种请求的</span></span><br><span class="line">            [<span class="keyword">self</span> NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (shouldCacheTarget) &#123;</span><br><span class="line">            <span class="keyword">self</span>.cachedTarget[targetClassString] = target;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> ([target respondsToSelector:action]) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="keyword">self</span> safePerformAction:action target:target params:params];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里是处理无响应请求的地方，如果无响应，则尝试调用对应target的notFound方法统一处理</span></span><br><span class="line">            SEL action = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"notFound:"</span>);</span><br><span class="line">            <span class="keyword">if</span> ([target respondsToSelector:action]) &#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="keyword">self</span> safePerformAction:action target:target params:params];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里也是处理无响应请求的地方，在notFound都没有的时候，这个demo是直接return了。实际开发过程中，可以用前面提到的固定的target顶上的。</span></span><br><span class="line">                [<span class="keyword">self</span> NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];</span><br><span class="line">                [<span class="keyword">self</span>.cachedTarget removeObjectForKey:targetClassString];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果有响应则调用 <code>safePerformAction:target: params:</code> 这个方法，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)safePerformAction:(SEL)action target:(<span class="built_in">NSObject</span> *)target params:(<span class="built_in">NSDictionary</span> *)params &#123;</span><br><span class="line">        <span class="built_in">NSMethodSignature</span>* methodSig = [target methodSignatureForSelector:action];</span><br><span class="line">        <span class="keyword">if</span>(methodSig == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* retType = [methodSig methodReturnType];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="keyword">void</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">            [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">            [invocation setSelector:action];</span><br><span class="line">            [invocation setTarget:target];</span><br><span class="line">            [invocation invoke];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">NSInteger</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">            [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">            [invocation setSelector:action];</span><br><span class="line">            [invocation setTarget:target];</span><br><span class="line">            [invocation invoke];</span><br><span class="line">            <span class="built_in">NSInteger</span> result = <span class="number">0</span>;</span><br><span class="line">            [invocation getReturnValue:&amp;result];</span><br><span class="line">            <span class="keyword">return</span> @(result);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">BOOL</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">            [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">            [invocation setSelector:action];</span><br><span class="line">            [invocation setTarget:target];</span><br><span class="line">            [invocation invoke];</span><br><span class="line">            <span class="built_in">BOOL</span> result = <span class="number">0</span>;</span><br><span class="line">            [invocation getReturnValue:&amp;result];</span><br><span class="line">            <span class="keyword">return</span> @(result);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">CGFloat</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">            [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">            [invocation setSelector:action];</span><br><span class="line">            [invocation setTarget:target];</span><br><span class="line">            [invocation invoke];</span><br><span class="line">            <span class="built_in">CGFloat</span> result = <span class="number">0</span>;</span><br><span class="line">            [invocation getReturnValue:&amp;result];</span><br><span class="line">            <span class="keyword">return</span> @(result);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (strcmp(retType, <span class="keyword">@encode</span>(<span class="built_in">NSUInteger</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">            [invocation setArgument:&amp;params atIndex:<span class="number">2</span>];</span><br><span class="line">            [invocation setSelector:action];</span><br><span class="line">            [invocation setTarget:target];</span><br><span class="line">            [invocation invoke];</span><br><span class="line">            <span class="built_in">NSUInteger</span> result = <span class="number">0</span>;</span><br><span class="line">            [invocation getReturnValue:&amp;result];</span><br><span class="line">            <span class="keyword">return</span> @(result);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#pragma clang diagnostic push</span></span><br><span class="line">    <span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">        <span class="keyword">return</span> [target performSelector:action withObject:params];</span><br><span class="line">    <span class="meta">#pragma clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过这两个方法我们就可以看到整个 CTMediator 实现的思路了，为什么 AViewController 不引用 BViewController 还能向其进行跳转传值，原来都是由于 <code>runtime</code> 在中间起作用。<br>&emsp;&emsp;当然，虽然中间者这个方案能很好地实现各页面之间的解耦，但是也有它的缺点。我们可以看到我们在 <code>CTMediator+RegistViewControllerActions.h</code> 中定义的 <code>gc_targetRegistVC</code> 和 <code>gc_actionRegistVC</code> 这两个常量，分别对应 ‘target’ 和 ‘action’，这里面需要注意的是一定要细心，如果这儿写错，会引发未知的错误，但是编译器并不会提示，对应的 <code>Target_...</code>一定要和这里的 <code>target</code> 一致，否则就会引发错误。这种方案的实施对开发人员的细心程度是有很大要求的，因为如果有错误，在编译中无法发现的。<br>组件化的方案的实施还有很多其他的方案，比如 <code>url-block</code>、<code>protocol-class</code>方式，有兴趣的可以看看蘑菇街的 <a href="https://github.com/meili/MGJRouter" target="_blank" rel="noopener">MGJRouter</a>，还有就是阿里的 <a href="https://github.com/alibaba/BeeHive" target="_blank" rel="noopener">BeeHive</a> ，它是基于 Spring 的 Service 理念，使用 <code>Protocol</code> 的方式进行模块间的解耦。</p><h2 id="四、关于-AOP"><a href="#四、关于-AOP" class="headerlink" title="四、关于 AOP"></a>四、关于 AOP</h2><p>&emsp;&emsp;先看一个案例，小 C 最近愁眉苦脸，你发现了他状态不对劲，于是就发生了下面的对话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">你：“小 C，你这是怎么啦，是不是工作上有什么不顺心的？”</span><br><span class="line"></span><br><span class="line">小 C：“是啊，最近接到一个需求，让我很头疼！”</span><br><span class="line"></span><br><span class="line">你：“接到需求不是很正常，做就是了啊！”</span><br><span class="line"></span><br><span class="line">小 C：“你不知道，这个需求是统计每个页面的浏览情况，就是用户到了这个页面我就要统计一下，</span><br><span class="line">运营产品他们要看 PV，于是我就在基类里面的 `viewDidLoad` 方法加了一下，这样很简单就解决了”</span><br><span class="line"></span><br><span class="line">小 C：“可是他们又说还要我做每个页面按钮的点击统计，你说这 APP 几百个页面，这么多按钮，我怎么加啊，</span><br><span class="line">就算我加了，我的代码也会因为这些与业务无关的代码而变得混乱，万一哪天不统计再让我删了，那我不是要命了啊！愁死我了！”</span><br><span class="line"></span><br><span class="line">你：“那你这使用 AOP 就可以了啊”</span><br><span class="line"></span><br><span class="line">小 C ：“A...OP？？？”</span><br></pre></td></tr></table></figure><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">AOP</a>（Aspect-oriented programming），面向切面编程，是计算机科学中的一种程序设计思想，旨在将横切关注点与业务主体进行进一步分离，以提高程序代码的模块化程度。在 iOS 中有一个应用非常多的轻量级的 AOP 库 <a href="https://github.com/steipete/Aspects" target="_blank" rel="noopener">Aspects</a> ，它允许你能在任何一个类和实例的方法中插入新的代码。看到这里，你可能就已经知道小 C 的问题该如何解决了，下面是使用 Aspects 实现页面统计的代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GCViewControllerIntercepter.m</span></span><br><span class="line"><span class="comment">//  GCUser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 2019/4/25.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 HenryCheng. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"GCViewControllerIntercepter.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Aspects/Aspects.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GCViewControllerIntercepter</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    [<span class="keyword">super</span> load];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (GCViewControllerIntercepter *)sharedInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> GCViewControllerIntercepter *_sharedClient = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _sharedClient = [[GCViewControllerIntercepter alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _sharedClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">    </span><br><span class="line">        [<span class="built_in">UIViewController</span> aspect_hookSelector:<span class="keyword">@selector</span>(viewDidLoad)</span><br><span class="line">                           withOptions:AspectPositionAfter</span><br><span class="line">                            usingBlock:^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo, <span class="built_in">UITouch</span> *touch, <span class="built_in">UIEvent</span> *event) &#123;</span><br><span class="line">                                </span><br><span class="line">                                <span class="keyword">if</span> ([aspectInfo.instance isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                                    </span><br><span class="line"><span class="comment">//                                    页面统计的代码</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; error:<span class="literal">NULL</span>];</span><br><span class="line">        </span><br><span class="line">        [<span class="built_in">UIControl</span> aspect_hookSelector:<span class="keyword">@selector</span>(beginTrackingWithTouch:withEvent:)</span><br><span class="line">                           withOptions:AspectPositionAfter</span><br><span class="line">                            usingBlock:^(<span class="keyword">id</span>&lt;AspectInfo&gt; aspectInfo, <span class="built_in">UITouch</span> *touch, <span class="built_in">UIEvent</span> *event) &#123;</span><br><span class="line">                                </span><br><span class="line">                                <span class="keyword">if</span> ([aspectInfo.instance isKindOfClass:[<span class="built_in">UIButton</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line"><span class="comment">//                                    按钮统计的代码</span></span><br><span class="line">                                    </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; error:<span class="literal">NULL</span>];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到，通过新建 <code>GCViewControllerIntercepter</code> 这个类就实现了页面的统计和按钮点击统计功能，你只需要实现就行，连导入都不用，如果哪天你不需要这些统计的代码了，你直接从项目中移除这个类就可以了。是不是很简单！这就是 AOP 的一个使用实例，通过 <code>+ (void)load</code> 这个方法（<code>+ load</code> 作为 Objective-C 中的一个方法，与其它方法有很大的不同。它只是一个在整个文件被加载到运行时，在 main 函数调用之前被 ObjC 运行时调用的钩子方法），实现了 <code>GCViewControllerIntercepter</code> 这个类被调用，然后通过 Aspects 实现对 UIViewController 和 UIControl 的 hook。这样在每个页面被加载、每个按钮被点击之前这边就可以捕捉到。<br>&emsp;&emsp;还有就是有人提到过去基类，也就是抛弃厚重的 base ，直接使用 AOP ，这样的话比如我想写个新 demo 就不用引入各种父类了，直接 hook 拿来用就好了。这种方法个人觉得没有到大工程的时候还是用继承来实现比较好。如果工程量比较大便于各个开发人员调试，可以使用这种方法。<br>&emsp;&emsp;当然 AOP 的作用也不仅如此，这里就说这么一个我们常用的 hook 的例子，有兴趣可以下去好好了解下。</p><blockquote><p>1、<code>AspectOptions</code> 有四个值，分别是 <code>AspectPositionAfter</code>、<code>AspectPositionInstead</code>、<code>AspectPositionBefore</code>和 <code>AspectOptionAutomaticRemoval</code>，这样你可以决定你 hook 的位置</p><p>2、对于 <code>+ (void)load</code> 还有 <code>+ (void)initialize</code> 这两个方法不是太了解的童鞋可以看看大左 <a href="https://draveness.me/" target="_blank" rel="noopener">Draveness</a> 的 <a href="https://draveness.me/load" target="_blank" rel="noopener">你真的了解 load 方法么？</a> 和 <a href="https://draveness.me/initialize" target="_blank" rel="noopener">懒惰的 initialize 方法</a> 这两篇文章，了解这两个方法相信对你会很有帮助</p></blockquote><h2 id="五、实际项目中的应用"><a href="#五、实际项目中的应用" class="headerlink" title="五、实际项目中的应用"></a>五、实际项目中的应用</h2><p>&emsp;&emsp;了解了上面的内容，接下来我们看看在实际项目中的应用</p><h3 id="1、项目的目录结构"><a href="#1、项目的目录结构" class="headerlink" title="1、项目的目录结构"></a>1、项目的目录结构</h3><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_catalog1.png?raw=true"></p><p>&emsp;&emsp;重构的项目结构如上图，相信大家一看名称就大概知道每个文件夹是做什么的，由于 <code>Model</code>、<code>View</code>、<code>ViewController</code> 和 <code>ViewModel</code> 这几个类联系比较紧密，所以建议这几个类的项目结构保持一致，如下图</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_catalog2.png?raw=true"></p><p>这样目录一目了然，比如你想找一个登录相关的东西，那么你就知道可以在各大目录下的 <code>Login</code> 模块里面去寻找。而且建议目录不要过深，一般三层就够了，过深的话查找起来比较麻烦。</p><h3 id="2、Category-的使用"><a href="#2、Category-的使用" class="headerlink" title="2、Category 的使用"></a>2、Category 的使用</h3><p>&emsp;&emsp;可能大家已经看到了，我的项目目录里面有一项是 <code>AppDelegate+Config</code> 这一项，这其实就是 <code>AppDelegate</code> 的一个 <code>Category</code> 。在 iOS 开发中 <code>Category</code> 随处可见，如何应用那就是看自己的需求情况了，这里我用 <code>AppDelegate+Config</code> 这个类来处理 <code>AppDelegate</code> 里面的一些配置，减少 <code>AppDelegate</code> 的代码，让项目更加清晰，使用了以后我们可以看到 <code>AppDelegate</code> 目录的代码片段</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"AppDelegate.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AppDelegate+Config.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"GCPushManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> configTabbar];</span><br><span class="line">    [<span class="keyword">self</span> registWeChat];</span><br><span class="line">    [<span class="keyword">self</span> configNetWork];</span><br><span class="line">    [<span class="keyword">self</span> configJPushWithLaunchOptions:launchOptions];</span><br><span class="line">    [<span class="keyword">self</span> configKeyboard];</span><br><span class="line">    [<span class="keyword">self</span> configBaiduMobStat];</span><br><span class="line">    [<span class="keyword">self</span> configShareSDKWithLaunchOptions:launchOptions];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// between iOS 4.2 - iOS 9.0</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation &#123;</span><br><span class="line">    [<span class="keyword">self</span> handleOpenURL:url];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after iOS 9.0</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)app openURL:(<span class="built_in">NSURL</span> *)url options:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">UIApplicationOpenURLOptionsKey</span>, <span class="keyword">id</span>&gt; *)options &#123;</span><br><span class="line">    [<span class="keyword">self</span> handleOpenURL:url];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样代码看起来很清晰，相信大家都有过一打开 <code>AppDelegate</code> 这个类看到一大堆代码，东找西找很不规范的经历。由于是项目重构初期，<code>AppDelegate</code> 和 <code>AppDelegate+Config</code> 使用的比较多，暂时先放在这里，后期再将其移动到合适的位置。</p><h3 id="3、CocoaPods-的使用"><a href="#3、CocoaPods-的使用" class="headerlink" title="3、CocoaPods 的使用"></a>3、<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a> 的使用</h3><p>&emsp;&emsp;相信这个东西大家都用过，为什么要强调一下 CocoaPods 的使用，因为在我整理之前项目时发现，有的地方（比如微信支付、支付宝支付）就是直接将 lib 直接拖进工程，有的还需要各种配置，这样如果升级或者移除的时候就很麻烦。使用 CocoaPods 管理的话那么升级或者移除就很方便，所以建议还是能使用 CocoaPods 安装的就直接使用其安装，最好不要直接在项目中添加第三方。<br>&emsp;&emsp;还有一种情况就是有时候第三方满足不了我们的需求，需要修改一下，所以有些就不集成在 CocoaPods 里面了（万一一不小心 update 以后修改的内容被覆盖）。这里我想说的是，对于这种情况你仍然可以使用 CocoaPods，那么怎么解决需要修改代码的问题？没错，就是 Category ！</p><div class="note info no-icon"><p>Tips:<br>n&gt;如果是团队多人协作开发，每个成员安装有不同版本 cocoapods gem，以至于在 pod install 的时候会安装不同版本的 cocoapods。为了解决这个问题，使团队成员拥有相同版本的 cocoapods，我们可以用 <a href="https://guides.cocoapods.org/using/a-gemfile.html" target="_blank" rel="noopener">Gemfile</a>，具体步骤是</p><p>1、<code>gem install bundler</code></p><p>2、<code>cd Your Project</code></p><p>3、<code>bundle init</code></p><p>4、<code>vim Gemfile</code> and add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> # frozen_string_literal: true</span><br><span class="line"> </span><br><span class="line"> #source &apos;https://rubygems.org</span><br><span class="line"> source &apos;https://gems.ruby-china.com&apos;</span><br><span class="line"> </span><br><span class="line"> git_source(:github) &#123;|repo_name| &quot;https://github.com/#&#123;repo_name&#125;&quot; &#125;</span><br><span class="line"> </span><br><span class="line"># gem &quot;rails&quot;</span><br><span class="line"> gem &apos;cocoapods&apos;, &apos;1.7.0&apos;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、<code>bundle exec pod install --verbose --no-repo-update</code> or <code>bundle exec pod update --verbose --no-repo-update</code></p></div><h3 id="4、MVVM-的运用"><a href="#4、MVVM-的运用" class="headerlink" title="4、MVVM 的运用"></a>4、MVVM 的运用</h3><p>&emsp;&emsp;具体项目的实现我们还是以登录为例，在 ViewModel 中</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">        [<span class="keyword">super</span> initialize];</span><br><span class="line">        RAC(<span class="keyword">self</span>, isLoginEnable) = [[RACSignal combineLatest:@[</span><br><span class="line">                                                               RACObserve(<span class="keyword">self</span>, phone),</span><br><span class="line">                                                               RACObserve(<span class="keyword">self</span>, password)</span><br><span class="line">                                                               ]] map:^<span class="keyword">id</span> _Nullable(RACTuple * _Nullable value) &#123;</span><br><span class="line">                                        RACTupleUnpack(<span class="built_in">NSString</span> *phone, <span class="built_in">NSString</span> *password) = value;</span><br><span class="line">                                        <span class="keyword">return</span> @([phone isNotBlank] &amp;&amp; [password isNotBlank] &amp;&amp; phone.length == <span class="number">11</span>); &#125;];</span><br><span class="line">        </span><br><span class="line">        RAC(<span class="keyword">self</span>.loginRequest, params) = [[RACSignal combineLatest:@[</span><br><span class="line">                                                        RACObserve(<span class="keyword">self</span>, phone),</span><br><span class="line">                                                        RACObserve(<span class="keyword">self</span>, password)</span><br><span class="line">                                                        ]] map:^<span class="keyword">id</span> _Nullable(RACTuple * _Nullable value) &#123;</span><br><span class="line">                               </span><br><span class="line">                                 RACTupleUnpack(<span class="built_in">NSString</span> *phone, <span class="built_in">NSString</span> *password) = value;</span><br><span class="line">                                     <span class="keyword">return</span> @&#123;<span class="string">@"phone"</span>: GC_NO_BLANK(phone),</span><br><span class="line">                                              <span class="string">@"pwd"</span>: GC_NO_BLANK(password)</span><br><span class="line">                                              &#125;; &#125;];</span><br><span class="line">&#125;</span><br><span class="line">- (RACCommand *)loginCommand &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_loginCommand) &#123;</span><br><span class="line">            @weakify(<span class="keyword">self</span>);</span><br><span class="line">            _loginCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal * _Nonnull(<span class="keyword">id</span>  _Nullable input) &#123;</span><br><span class="line">                @strongify(<span class="keyword">self</span>);</span><br><span class="line">                <span class="keyword">return</span> [<span class="keyword">self</span>.loginRequest requestSignal] ;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _loginCommand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们做了网络的请求以及一些数据的绑定，在 ViewController 中</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)gc_bindViewModel &#123;</span><br><span class="line">        [<span class="keyword">super</span> gc_bindViewModel];</span><br><span class="line">        </span><br><span class="line">        RAC(<span class="keyword">self</span>.viewModel, phone) = <span class="keyword">self</span>.loginView.phoneTextField.rac_textSignal;</span><br><span class="line">        RAC(<span class="keyword">self</span>.viewModel, password) = <span class="keyword">self</span>.loginView.passwordTextField.rac_textSignal;</span><br><span class="line">        RAC(<span class="keyword">self</span>.loginView.loginButton, enabled) = RACObserve(<span class="keyword">self</span>.viewModel, isLoginEnable);</span><br><span class="line">        </span><br><span class="line">        @weakify(<span class="keyword">self</span>);</span><br><span class="line">        </span><br><span class="line">        [[[<span class="keyword">self</span>.loginView.loginButton rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] throttle:<span class="number">0.25</span>] subscribeNext:^(__kindof <span class="built_in">UIControl</span> * _Nullable x) &#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            [<span class="keyword">self</span>.viewModel.loginCommand execute:<span class="literal">nil</span>];</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [[<span class="keyword">self</span>.viewModel.loginCommand.executing skip:<span class="number">1</span>] subscribeNext:^(<span class="built_in">NSNumber</span> * _Nullable x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.boolValue) &#123;</span><br><span class="line">                [GCHUDManager show];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [GCHUDManager dismiss];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="comment">// 登录命令监听</span></span><br><span class="line">        [<span class="keyword">self</span>.viewModel.loginCommand.executionSignals.switchToLatest subscribeNext:^(<span class="built_in">NSDictionary</span> *x) &#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            UserModel *userModel = [UserModel modelWithDictionary:x];</span><br><span class="line">            [[GCCacheManager sharedManager] updateDataWithDictionary:x key:GCUserInfoStoreKey()];</span><br><span class="line">            [GCPushManager gc_setAlias:x[<span class="string">@"phone"</span>]];</span><br><span class="line">            <span class="keyword">if</span> (userModel.is_agree.intValue == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//            未同意甘草协议</span></span><br><span class="line">    </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userModel.is_agree.intValue == <span class="number">1</span> &amp;&amp; userModel.pwd_status.intValue == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//            同意协议但是没改过密码</span></span><br><span class="line">    </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//            登录</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; error:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到 ViewController 将 View 和 ViewModel 进行了绑定，并且当登录按钮点击的时候监测登录信号的变化，根据其信号执行的开始和结束来控制 HUD 的显示和消失，然后再根据信号的返回结果来处理相关的登录配置和跳转（极光推送的登录、根据状态执行跳转逻辑等）。这里网络的请求都是在 ViewModel 中进行的，ViewController 只负责处理ViewModel、View 和 Model 之间的关系。</p><h3 id="5、DRY"><a href="#5、DRY" class="headerlink" title="5、DRY"></a>5、<a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E6%AC%A1%E4%B8%94%E4%BB%85%E4%B8%80%E6%AC%A1" target="_blank" rel="noopener">DRY</a></h3><p>&emsp;&emsp;DRY（Don’t repeat yourself），能封装起来的类一定要封装起来，到时候使用也简单，千万不要为了一时之快而各种 <code>ctrl + c</code> 和 <code>ctrl + v</code>，这样会使你的代码混乱不堪，这其实也是项目臃肿的一个原因。在重构的过程中就封装了很多的类，管理起来很方便</p><p align="center"><img src="https://github.com/loveway/LearnBlog/blob/master/Notes/Objective-C/image/ar_catalog3.png?raw=true"></p><h2 id="六、一些感想"><a href="#六、一些感想" class="headerlink" title="六、一些感想"></a>六、一些感想</h2><p>&emsp;&emsp;其实最开始的时候一直都有重构的想法，但是迟迟没有动手。其中一个原因就是不知道该如何动手，不知道该使用什么工具，该使用哪种方案。等到真正开始的时候发现其实没有想象中的那么难，所以当你有想法的时候你就去做，在做的过程中你可以慢慢体会。<br>在重构之前，我又重新读了一下代码规范，也就是 <a href="https://github.com/objc-zen/objc-zen-book-cn" target="_blank" rel="noopener">禅与 Objective-C 编程艺术</a> 这本书，并在重构的过程中严格执行，比如 <code>loginButton</code> 就绝不会写成 <code>loginBtn</code>，相信我，按着规范来，你会体会到其中的意义的。<br>&emsp;&emsp;在做一个 APP 之前，在我们新建工程的时候，就应该已经确定你的架构模式，并且在以后的业务处理中，严格的按着这种设计模式执行下去。如果在前面需求量不多的时候你还能按着最初的设计模式执行下去，在业务突然增多的时候，为了偷懒省事，直接各种代码混乱的糅合在一起，各种 <code>ctrl + c</code>和<code>ctrl + v</code>，导致架构的混乱引起蝴蝶效应，那么这个架构在后期如果再想重新规范起来将会是个费时费力的过程。所以，在最初设计的时候我们就应该确定架构方案，以及严格的执行下去。<br>&emsp;&emsp;还有就是平时的一些技术积累以及知识存储。知其然知其所以然，研究技术背后的底层原理，会对你有很大的帮助。比如说我要说来说说 ViewController 的生命周期，可能大家都会随口说出 <code>viewDidLoad</code>、<code>viewWillAppear</code> 等，我要问说说 View 的生命周期，可能就会有少数人茫然了。这些都是很基本的东西，可能你平时用不到，但是还是需要你去了解他，注意细节。很多人可能会经常有这样的困惑，比如我想写一个图片浏览器，但是我不知道该如何写？写完了性能如何？别人是怎么写的？这个就是需要平时的积累了，比如关于 <code>UIText</code> 相关的的你就得想到 <a href="https://github.com/ibireme/YYText" target="_blank" rel="noopener">YYText</a>，数据存储方面的你不仅要知道老的 <a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">fmdb</a> ，微信开源的 <a href="https://github.com/Tencent/wcdb" target="_blank" rel="noopener">wcdb</a> 有没有去了解下呢？比如我就平时没事喜欢在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 上看一些 star 比较高的开源库，看看别人是怎么实现的，想想在我的项目中怎么使用。举个例子，最近阿里开源的 <a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B" target="_blank" rel="noopener">协程</a> 框架 <a href="https://github.com/alibaba/coobjc/blob/master/README_cn.md" target="_blank" rel="noopener">coobjc</a> ，就在项目中使用，用来判断用户是否登录</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)judgeLoginBlock:(<span class="keyword">void</span>(^)(GCLoginStatus status))block &#123;</span><br><span class="line"></span><br><span class="line">    co_launch(^&#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dic = await([<span class="keyword">self</span> co_loginRequest]);</span><br><span class="line">        <span class="keyword">if</span> (co_getError()) &#123;</span><br><span class="line">            block(GCLoginStatusError);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dic) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([dic[<span class="string">@"status"</span>] intValue] == <span class="number">1</span>) &#123;</span><br><span class="line">                block(GCLoginStatusLogin);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([dic[<span class="string">@"status"</span>] intValue] == <span class="number">-99</span>) &#123;</span><br><span class="line">                block(GCLoginStatusUnLogin);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                block(GCLoginStatusError);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            block(GCLoginStatusError);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一眼看去逻辑就很简单明了，比 Block 嵌套 Block 这种方式优雅的多。<br>&emsp;&emsp;现在只是重构的开始，现在已经完成的登录的重构就 <code>LoginViewController</code> 而言，与之前相比就已经有很大的改变了（之前将近 800 行代码，重构后只有 200 行），可能总体上各个模块代码加起来都差不多，但是为 ViewController 减负后更加清晰明了了。后面重构完成后会出一个代码量、包大小、性能等的对比，到时候再与大家分享！</p><div class="note info"><p>Reference:</p><p>1、<a href="https://draveness.me/mvx" target="_blank" rel="noopener">浅谈 MVC、MVP 和 MVVM 架构模式</a></p><p>2、<a href="https://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html" target="_blank" rel="noopener">iOS应用架构谈 view 层的组织和调用方案</a></p><p>3、<a href="https://www.jianshu.com/p/dc9dca24d5de" target="_blank" rel="noopener">iOS 如何实现Aspect Oriented Programming</a></p><p>4、<a href="https://github.com/casatwy/CTMediator" target="_blank" rel="noopener">CTMediator</a></p><p>5、<a href="https://github.com/alibaba/BeeHive" target="_blank" rel="noopener">BeeHive</a></p><p>6、<a href="https://github.com/objc-zen/objc-zen-book-cn" target="_blank" rel="noopener">objc-zen-book</a></p><p>7、<a href="https://github.com/alibaba/coobjc/blob/master/README_cn.md" target="_blank" rel="noopener">coobjc</a></p><p>8、<a href="https://guides.cocoapods.org/using/a-gemfile.html" target="_blank" rel="noopener">Using a Gemfile</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一直以来想写一篇文章，但是没找到合适的主题，前段时间一直在看 &lt;a href=&quot;https://flutter.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter&lt;/a&gt; 的一些东西，本来有意向想写关于 Flutter 的一些总结，但是看的有些零零散散，并且没有实际应用过，所以也就搁置了。正好最近一段时间除主业务之余，一直在做我们 &lt;a href=&quot;https://www.igancao.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;甘草医生&lt;/a&gt; 用户端的重构，刚好有一些对于 iOS 架构方面的看法与感悟，在这里与大家分享。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/tags/Objective-C/"/>
    
      <category term="架构" scheme="https://www.clearloveway.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="MVVM" scheme="https://www.clearloveway.com/tags/MVVM/"/>
    
      <category term="AOP" scheme="https://www.clearloveway.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Go 中 slice 的那些事</title>
    <link href="https://www.clearloveway.com/posts/79d167b9"/>
    <id>https://www.clearloveway.com/posts/79d167b9</id>
    <published>2017-11-07T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.268Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-70c3e7915ad2de18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/220"></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>我们都知道在 Go 语言中，数组的长度是不可变的，那么为了更加灵活的处理数据，Go 提供了一种功能强悍的类型切片（slice），slice 可以理解为 “动态数组”。但是 slice 并不是真正意义上的动态数组，而是一个引用类型。slice 总是指向一个底层 array，slice 的声明也可以像 array 一样，只是不需要长度。slice 的声明和数组类似，如下<a id="more"></a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iSlice []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>这里的声明和数组一样，只是少了长度，注意两者的比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个保存 int 的 slice</span></span><br><span class="line"><span class="keyword">var</span> iSlice []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个长度为 10 的 int 数组</span></span><br><span class="line"><span class="keyword">var</span> iArray [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>还有一种声明的方法是使用 make() 函数，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>用 make() 函数创建的时候有三个参数，<code>make(type, len[, cap])</code> ，依次是类型、长度、容量。</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-4fdb7e1b2f7b7707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>如图所示，上图表示创建了 slice1 ，长度是 5，默认的值都是 0，容量是 10，这样声明就开辟了一块容量是 10 的连续的一块内存。当然如果我们不指定容量也是可以的，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>这样就会根据实际情况动态分配内存，而不是最开始指定一块固定大小的内存。需要注意的是我们一般使用 make() 函数来创建 slice，因为我们可以指定 slice 的容量，这样在最开始创建的时候就分配好空间，避免数据多次改变导致多次重新改变 cap 分配空间带来不必要的开销。</p><h2 id="slice-的特性"><a href="#slice-的特性" class="headerlink" title="slice 的特性"></a>slice 的特性</h2><p>关于 slice 的一些基本特性，<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md" target="_blank" rel="noopener">《Go Web 编程》</a> 这本书里已经讲的很详细，有对基本知识不清楚的童鞋可以去补习一下，这里就不一一叙述了。我么来看一个例子，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"aSlice length = %d, cap = %d, self = %v\n"</span>, <span class="built_in">len</span>(aSlice), <span class="built_in">cap</span>(aSlice), aSlice)</span><br><span class="line">aSlice = <span class="built_in">append</span>(aSlice, <span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"aSlice length= %d, cap = %d, self = %v"</span>, <span class="built_in">len</span>(aSlice), <span class="built_in">cap</span>(aSlice), aSlice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们运行，控制台打印</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-c4d0c74009ecd930.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>我们会看到 aSlice 进行 append 操作以后，它的容量增加了一倍，cap 并没有变成我们想象中的 6 ，而是变成了 10<br><img src="http://upload-images.jianshu.io/upload_images/571495-a011d8b2d2aa0b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770" alt="aSlice"><br>如果我们最开始 slice 的容量是 10，长度是 5 ，那么再加一个元素是不会改变切片的容量的。也就是说，当我们往 slice中增加元素超过原来的容量时，slice 会自增容量，当现有长度 &lt; 1024 时 cap 增长是翻倍的，当超过 1024，cap 的增长是 1.25 倍增长。我们来看一下 <a href="https://github.com/golang/go/blob/master/src/runtime/slice.go" target="_blank" rel="noopener">slice.go</a> 的源码会发现有这样一个函数，里面说明了 cap 的增长规则</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="keyword">int</span>)</span> <span class="title">slice</span></span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    ....省略....</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">newcap := old.<span class="built_in">cap</span></span><br><span class="line">doublecap := newcap + newcap</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> old.<span class="built_in">len</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">newcap = doublecap</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line"><span class="comment">// and prevent an infinite loop.</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">newcap += newcap / <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line"><span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line"><span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    ....省略....</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码，在对 slice 进行 append 等操作时，可能会造成 slice 的自动扩容。其扩容时的大小增长规则是：</p><ul><li>如果新的 slice 大小是当前大小2倍以上，则大小增长为新大小</li><li>否则循环以下操作：如果当前slice大小小于1024，按每次 2 倍增长，否则每次按当前大小 1/4 增长，直到增长的大小超过或等于新大小。</li><li>append 的实现只是简单的在内存中将旧 slice 复制给新 slice</li></ul><p>来看一个例子，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">bSlice := <span class="built_in">append</span>(aSlice, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d\n"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line">aSlice[<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会看到控制台输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-5edc429446adc268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>变化过程如下图所示</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-01444240896f17a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>上面说明，在 slice 的 cap 范围内增加元素， slice 只会发生 len 的变化不会发生 cap 的变化，同样也说明 slice 实际上是指向一个底层的数组，当多个 slice 指向同一个底层数组的时候，其中一个改变，其余的也会跟着改变，这里需要注意一下。我们同样从 <a href="https://github.com/golang/go/blob/master/src/runtime/slice.go" target="_blank" rel="noopener">slice.go</a> 的源码中 slice 的定义可以看出，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里关于底层的东西就不多叙述，有兴趣的可以看看 <a href="http://www.jianshu.com/u/12201cdd5d7a" target="_blank" rel="noopener">一缕殇流化隐半边冰霜</a> 冰霜的 <a href="http://www.jianshu.com/p/030aba2bff41" target="_blank" rel="noopener">深入解析 Go 中 Slice 底层实现</a> 这篇文章，对 slice 的底层实现的讲解。接下来我们把上面的代码改变一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">bSlice := <span class="built_in">append</span>(aSlice, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d\n"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line">aSlice[<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line">fmt.Printf(<span class="string">"a %v , cap = %d, len = %d\n"</span>, aSlice, <span class="built_in">cap</span>(aSlice), <span class="built_in">len</span>(aSlice))</span><br><span class="line">fmt.Printf(<span class="string">"b %v , cap = %d, len = %d"</span>, bSlice, <span class="built_in">cap</span>(bSlice), <span class="built_in">len</span>(bSlice))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到下面的输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-60d34400ca09c1c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>上面代码可以用下图说明</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-d0758d9aef746c16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770"></p><p>也就是说，当 append 的数据超过原来的容量以后，就会重新分配一块新的内存，并把原来的数据 copy 过来，并且保留原来的空间，供原来的 slice（aSlice） 使用这样 aSlice 和 bSlice 就各自指向不同的地址，当 aSlice 改变时，bSlice 不会改变。<br>关于 cap 还有一点需要注意，我们来用一个例子说明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">Array_a := [<span class="number">10</span>]<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>&#125;</span><br><span class="line">Slice_a := Array_a[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">Slice_b := Slice_a[<span class="number">6</span>:<span class="number">7</span>]</span><br><span class="line">fmt.Printf(<span class="string">"Slice_a %v , cap = %d, len = %d\n"</span>, <span class="keyword">string</span>(Slice_a), <span class="built_in">cap</span>(Slice_a), <span class="built_in">len</span>(Slice_a))</span><br><span class="line">fmt.Printf(<span class="string">"Slice_b %v , cap = %d, len = %d\n"</span>, <span class="keyword">string</span>(Slice_b), <span class="built_in">cap</span>(Slice_b), <span class="built_in">len</span>(Slice_b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-94b2fac8482da167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>这里我们会发现 Slice_b 对 Slice_a 进行重新切片后，并没有报错，而是还有输出，这是因为 Slice_a 的 cap 是 8 ，并不是我们想象的 3，slice 指向的是一块连续的内存，所以 Slice_a 的容量其实是一直到 Array_a 的最后的。所以这里 Array_b 对 Array_a 进行切片后会得到值，<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/02.2.md" target="_blank" rel="noopener">《Go Web 编程》</a> 上这张图形象的解释了对数组的切片结果，这里是需要注意的一个点。</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-2f02ecdf921639fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="关于-copy"><a href="#关于-copy" class="headerlink" title="关于 copy"></a>关于 copy</h2><p>我们来看下面代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">bSlice := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(bSlice, aSlice)</span><br><span class="line">fmt.Println(aSlice, bSlice)<span class="comment">//[1 2 3] [1 2 3 7 8 9]</span></span><br><span class="line">       <span class="comment">//如果是 copy( aSlice, bSlice) 则结果是 [4 5 6] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 copy() 函数有两个参数，一个是 to 一个是 from，就是将第二个 copy 到第一个上面，如果第一个长度小于第二个，那么就会 copy 与第一个等长度的值，如 copy( aSlice, bSlice) 的结果是 [4 5 6] ，反之则是短的覆盖长的前几位。当然我们也可以指定复制长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">aSlice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">bSlice := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(bSlice[<span class="number">2</span>:<span class="number">5</span>], aSlice)</span><br><span class="line">fmt.Println(aSlice, bSlice)<span class="comment">//[1 2 3] [4 5 1 2 3 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 slice 的 copy 的规则逻辑我们也可以在源码中看出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicecopy</span><span class="params">(to, fm slice, width <span class="keyword">uintptr</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> fm.<span class="built_in">len</span> == <span class="number">0</span> || to.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := fm.<span class="built_in">len</span></span><br><span class="line"><span class="keyword">if</span> to.<span class="built_in">len</span> &lt; n &#123;</span><br><span class="line">n = to.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> width == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(slicecopy)</span><br><span class="line">racewriterangepc(to.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">racereadrangepc(fm.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)), callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">msanwrite(to.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">msanread(fm.array, <span class="keyword">uintptr</span>(n*<span class="keyword">int</span>(width)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">size := <span class="keyword">uintptr</span>(n) * width</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">1</span> &#123; <span class="comment">// common case worth about 2x to do here</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> is this still worth it with new memmove impl?</span></span><br><span class="line">*(*<span class="keyword">byte</span>)(to.array) = *(*<span class="keyword">byte</span>)(fm.array) <span class="comment">// known to be a byte pointer</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">memmove(to.array, fm.array, size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看源码接着往下看会发现这样一个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slicestringcopy</span><span class="params">(to []<span class="keyword">byte</span>, fm <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(fm) == <span class="number">0</span> || <span class="built_in">len</span>(to) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(fm)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(to) &lt; n &#123;</span><br><span class="line">n = <span class="built_in">len</span>(to)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">pc := funcPC(slicestringcopy)</span><br><span class="line">racewriterangepc(unsafe.Pointer(&amp;to[<span class="number">0</span>]), <span class="keyword">uintptr</span>(n), callerpc, pc)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">msanwrite(unsafe.Pointer(&amp;to[<span class="number">0</span>]), <span class="keyword">uintptr</span>(n))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memmove(unsafe.Pointer(&amp;to[<span class="number">0</span>]), stringStructOf(&amp;fm).str, <span class="keyword">uintptr</span>(n))</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现这个函数的两个参数分别是 []byte 和 string ，这里其实是 Go 实现了一个将 string 复制到 []byte 上的方法，这个方法有什么用，我们来看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">c := []<span class="keyword">byte</span>(s) <span class="comment">// 将字符串 s 转换为 []byte 类型</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">'c'</span></span><br><span class="line">s2 := <span class="keyword">string</span>(c) <span class="comment">// 再转换回 string 类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, s2)</span><br><span class="line">fmt.Printf(<span class="string">"s-%x, c-%x, s2-%x"</span>, &amp;s, &amp;c, &amp;s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><p align="center"><img src="http://upload-images.jianshu.io/upload_images/571495-b47540184be2e4c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>在 Go 中字符串是不可以改变的，我们可以用上面的方法来改变字符串，这里可以看到是实现了 string 和 []byte 的互相转换，达到了修改 string 的目的。我们去看看 <a href="https://github.com/golang/go/blob/master/src/runtime/string.go" target="_blank" rel="noopener">string.go</a> 的源码会发现，有下面的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringtoslicebyte</span><span class="params">(buf *tmpBuf, s <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">if</span> buf != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(s) &lt;= <span class="built_in">len</span>(buf) &#123;</span><br><span class="line">*buf = tmpBuf&#123;&#125;</span><br><span class="line">b = buf[:<span class="built_in">len</span>(s)]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b = rawbyteslice(<span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(b, s)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面有个 copy(b, s) ，这里就是将 string 复制到 []byte 上，在 slice.go 已经实现过了的。从源码中我们也可以看出每次 b 都是重新分配的，然后将 s 复制 给 b，从我们上面程控制台输出也可以看到每次地址都有变化，所以说 string 和 []byte 的相互转换是有内存开销的，不过对于现在的机器来说，这点开销也不算什么。</p><p>最后，这是我学习 Go 的 slice 的一些理解与总结，由于能力有限，如果有理解不到位的地方，可以随时留言与我交流。</p><div class="note info"><p>Reference:<br>1、<strong><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">build-web-application-with-golang</a></strong><br>2、<strong><a href="https://github.com/golang/go" target="_blank" rel="noopener">go</a></strong></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/571495-70c3e7915ad2de18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/220&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;我们都知道在 Go 语言中，数组的长度是不可变的，那么为了更加灵活的处理数据，Go 提供了一种功能强悍的类型切片（slice），slice 可以理解为 “动态数组”。但是 slice 并不是真正意义上的动态数组，而是一个引用类型。slice 总是指向一个底层 array，slice 的声明也可以像 array 一样，只是不需要长度。slice 的声明和数组类似，如下&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="https://www.clearloveway.com/categories/Go/"/>
    
    
      <category term="Go" scheme="https://www.clearloveway.com/tags/Go/"/>
    
      <category term="slice" scheme="https://www.clearloveway.com/tags/slice/"/>
    
      <category term="切片" scheme="https://www.clearloveway.com/tags/%E5%88%87%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>SnapKit 中文文档翻译</title>
    <link href="https://www.clearloveway.com/posts/e6245de"/>
    <id>https://www.clearloveway.com/posts/e6245de</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.302Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p><img src="http://upload-images.jianshu.io/upload_images/571495-8ad534ec6d5cad5c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SnapKit"><br><a id="more"></a></p><div class="note info"><p><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit 地址</a><br><a href="https://github.com/Loveway/SnapKit-Chinse-Guide" target="_blank" rel="noopener">翻译文档 github地址</a></p></div><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><ul><li>iOS 8.0+ / Mac OS X 10.11+ / tvOS 9.0+</li><li>Xcode 8.0+</li><li>Swift 3.0+</li></ul><h1 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h1><ul><li><a href="https://github.com/SnapKit/SnapKit/blob/master/Documentation/SnapKit%203.0%20Migration%20Guide.md" target="_blank" rel="noopener">SnapKit 3.0 Migration Guide</a></li></ul><h1 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h1><ul><li>如果你需要帮助，使用 <a href="http://stackoverflow.com/questions/tagged/snapkit" target="_blank" rel="noopener">Stack Overflow</a> 。（标签 <code>snapkit</code>）</li><li>如果你想问一些简单的问题，使用 <a href="http://stackoverflow.com/questions/tagged/snapkit" target="_blank" rel="noopener">Stack Overflow</a> 。</li><li>如果你发现一个 bug ，请使用 issue 。</li><li>如果你有一个特别的需求， 请使用 issue 。</li><li>如果你想贡献一份自己的力量，你可以提交一个 pull 请求。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h2><p><a href="http://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a> 是第三方的管理库。你可以使用下面的命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install cocoapods</span><br></pre></td></tr></table></figure><div class="note info"><p>SnapKit 3.0.0+ 需要 CocoaPods 版本在 1.1.0 以上</p></div><p>为了使用 CocoaPods 能把 SnapKit 完整的安装到你的项目中，需要把下面内容加入到你的 <code>Podfile</code> 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source 'https:<span class="comment">//github.com/CocoaPods/Specs.git'</span></span><br><span class="line">platform :ios, '<span class="number">10.0</span>'</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">target '&lt;<span class="type">Your</span> <span class="type">Target</span> <span class="type">Name</span>&gt;' <span class="keyword">do</span></span><br><span class="line">   pod '<span class="type">SnapKit'</span>, '~&gt; <span class="number">3.0</span>'</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后，运行下面的命令：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure><h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><p><a href="https://github.com/Carthage/Carthage" target="_blank" rel="noopener">Carthage</a> 是一个会编译每个依赖框架，然后提供二进制文件的去中心化依赖管理器。</p><p>你可以使用 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 用以下命令安装 Carthage ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install carthage</span><br></pre></td></tr></table></figure><p>为了使用 Carthage 能把 SnapKit 完整的安装到你的项目中，需要把下面内容加入到你的 <code>Cartfile</code> 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github <span class="string">"SnapKit/SnapKit"</span> ~&gt; <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>运行 <code>carthage update</code> 编译你的 framework ，然后把 <code>SnapKit.framework</code>拖进你的项目中。</p><h2 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h2><p>如果你不喜欢上述的依赖管理，你可以手动地把 SnapKit 集成到你的项目中。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>SnapKit 设计的就是为了更简单的使用。假设我们想布局一个 box ，让它到父视图边缘距离是 20pts</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="type">UIView</span>()</span><br><span class="line">superview.addSubview(box)</span><br><span class="line"></span><br><span class="line">box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">    make.top.equalTo(superview).offset(<span class="number">20</span>)</span><br><span class="line">    make.<span class="keyword">left</span>.equalTo(superview).offset(<span class="number">20</span>)</span><br><span class="line">    make.bottom.equalTo(superview).offset(-<span class="number">20</span>) </span><br><span class="line">    make.<span class="keyword">right</span>.equalTo(superview).offset(-<span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者更短：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="type">UIView</span>()</span><br><span class="line">superview.addSubview(box)</span><br><span class="line"></span><br><span class="line">box.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    make.edges.equalTo(superview).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中， SnapKit 不仅仅做了大大的缩短和增加了约束的可读性，还处理了以下这几个关键步骤：</p><ul><li>确定了最佳的父视图来添加约束。</li><li>追踪约束，以便以后能简单的移除。</li><li>在适当的视图上确保 <code>setTranslatesAutoresizingMaskIntoConstraints(false)</code> 的调用。</li></ul><h2 id="并不是所有的都只能用-equal"><a href="#并不是所有的都只能用-equal" class="headerlink" title="并不是所有的都只能用 equal"></a>并不是所有的都只能用 equal</h2><div class="note info"><p><code>.equalTo</code> 等同于 <strong>NSLayoutRelation.Equal</strong><br><code>.lessThanOrEqualTo</code> 等同于 <strong>NSLayoutRelation.LessThanOrEqual</strong><br><code>.greaterThanOrEqualTo</code> 等同于 <strong>NSLayoutRelation.GreaterThanOrEqual</strong></p></div><p>以上是接受一个参数的约束，下面的这些中任意一个也都可以：</p><h3 id="ViewAttribute"><a href="#ViewAttribute" class="headerlink" title="ViewAttribute"></a>ViewAttribute</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.centerX.lessThanOrEqualTo(view2.snp.<span class="keyword">left</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>ViewAttribute</th><th>NSLayoutAttribute</th></tr></thead><tbody><tr><td>view.snp.left</td><td>NSLayoutAttribute.left</td></tr><tr><td>view.snp.right</td><td>NSLayoutAttribute.right</td></tr><tr><td>view.snp.top</td><td>NSLayoutAttribute.top</td></tr><tr><td>view.snp.bottom</td><td>NSLayoutAttribute.bottom</td></tr><tr><td>view.snp.leading</td><td>NSLayoutAttribute.leading</td></tr><tr><td>view.snp.trailing</td><td>NSLayoutAttribute.trailing</td></tr><tr><td>view.snp.width</td><td>NSLayoutAttribute.width</td></tr><tr><td>view.snp.height</td><td>NSLayoutAttribute.height</td></tr><tr><td>view.snp.centerX</td><td>NSLayoutAttribute.centerX</td></tr><tr><td>view.snp.centerY</td><td>NSLayoutAttribute.centerY</td></tr><tr><td>view.snp.lastBaseline</td><td>NSLayoutAttribute.lastBaseline</td></tr></tbody></table><h3 id="UIView-NSView"><a href="#UIView-NSView" class="headerlink" title="UIView/NSView"></a>UIView/NSView</h3><p>如果你想让 view.left 大于或等于 label.left ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// these two constraints are exactly the same 这两个约束是完全一样的</span></span><br><span class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label)</span><br><span class="line">make.<span class="keyword">left</span>.greaterThanOrEqualTo(label.snp.<span class="keyword">left</span>)</span><br></pre></td></tr></table></figure><h3 id="Strict-Checks"><a href="#Strict-Checks" class="headerlink" title="Strict Checks"></a>Strict Checks</h3><p>Auto Layout 允许你把宽高设置成一个常量。如果你想设置一个 view 宽度的最大值和最小值，你可以像下面这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// width &gt;= 200 &amp;&amp; width &lt;= 400</span></span><br><span class="line">make.width.greaterThanOrEqualTo(<span class="number">200</span>)</span><br><span class="line">make.width.lessThanOrEqualTo(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>但是，像 left，right，centerY 等等这样的对齐属性， Auto Layout 是不允许你把它们设置成常量的。但是如果你把这些属性设置成了常量，SnapKit 会把这些转换成相对于父视图的约束：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates view.left &lt;= view.superview.left + 10</span></span><br><span class="line">make.<span class="keyword">left</span>.lessThanOrEqualTo(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>你也可以使用其他的方法构建你的约束，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make.top.equalTo(<span class="number">42</span>)</span><br><span class="line">make.height.equalTo(<span class="number">20</span>)</span><br><span class="line">make.size.equalTo(<span class="type">CGSize</span>(width: <span class="number">50</span>, height: <span class="number">100</span>))</span><br><span class="line">make.edges.equalTo(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">make.<span class="keyword">left</span>.equalTo(view).offset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><div class="note info"><p><code>.priority</code>允许你来指定明确的优先级</p></div><p>优先级可以写在约束链的末尾，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.top.equalTo(label.snp.top).priority(<span class="number">600</span>)</span><br></pre></td></tr></table></figure><h2 id="一些组合"><a href="#一些组合" class="headerlink" title="一些组合"></a>一些组合</h2><p>SnapKit 还提供了一些便利的方法来同时创建多个约束。</p><h3 id="edges"><a href="#edges" class="headerlink" title="edges"></a>edges</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make top, left, bottom, right equal view2</span></span><br><span class="line">make.edges.equalTo(view2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make top = superview.top + 5, left = superview.left + 10,</span></span><br><span class="line"><span class="comment">// bottom = superview.bottom - 15, right = superview.right - 20</span></span><br><span class="line">make.edges.equalTo(superview).inset(<span class="type">UIEdgeInsetsMake</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make width and height greater than or equal to titleLabel</span></span><br><span class="line">make.size.greaterThanOrEqualTo(titleLabel)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make width = superview.width + 100, height = superview.height - 50</span></span><br><span class="line">make.size.equalTo(superview).offset(<span class="type">CGSize</span>(width: <span class="number">100</span>, height: -<span class="number">50</span>))</span><br></pre></td></tr></table></figure><h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make centerX and centerY = button1</span></span><br><span class="line">make.center.equalTo(button1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make centerX = superview.centerX - 5, centerY = superview.centerY + 10</span></span><br><span class="line">make.center.equalTo(superview).offset(<span class="type">CGPoint</span>(x: -<span class="number">5</span>, y: <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>你也可以创建视图的属性链以增加可读性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All edges but the top should equal those of the superview</span></span><br><span class="line">make.<span class="keyword">left</span>.<span class="keyword">right</span>.bottom.equalTo(superview)</span><br><span class="line">make.top.equalTo(otherView)</span><br></pre></td></tr></table></figure><h2 id="更多的选择"><a href="#更多的选择" class="headerlink" title="更多的选择"></a>更多的选择</h2><p>有时候为了动画或者删除、替换约束，你需要修改现有的约束。SnapKit 提供了一些不同的方法来更新约束。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>你可以通过约束的 make 表达式将局部变量或者类属性的约束结果分配给一个指定的约束。你也可以通过将它们存在数组中来引用多个约束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topConstraint: <span class="type">Constraint</span>? = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// when making constraints</span></span><br><span class="line">view1.snp.makeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">  <span class="keyword">self</span>.topConstraint = make.top.equalTo(superview).offset(padding.top).constraint </span><br><span class="line">  make.<span class="keyword">left</span>.equalTo(superview).offset(padding.<span class="keyword">left</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// then later you can call</span></span><br><span class="line"><span class="keyword">self</span>.topConstraint.uninstall()</span><br><span class="line"></span><br><span class="line"><span class="comment">// or if you want to update the constraint</span></span><br><span class="line"><span class="keyword">self</span>.topConstraint.updateOffset(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="snp-updateConstraints"><a href="#snp-updateConstraints" class="headerlink" title="snp.updateConstraints"></a>snp.updateConstraints</h3><p>如果你只是想更新约束的值，你可以使用 <code>snp.updateConstraints</code> 方法来替代 <code>snp.makeConstraints</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is Apple's recommended place for adding/updating constraints</span></span><br><span class="line"><span class="comment">// this method can get called multiple times in response to setNeedsUpdateConstraints</span></span><br><span class="line"><span class="comment">// which can be called by UIKit internally or in your code if you need to trigger an update to your constraints</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">updateConstraints</span><span class="params">()</span></span> &#123; </span><br><span class="line">    <span class="keyword">self</span>.growingButton.snp.updateConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">        make.center.equalTo(<span class="keyword">self</span>)</span><br><span class="line">        make.width.equalTo(<span class="keyword">self</span>.buttonSize.width).priority(<span class="number">250</span>)  </span><br><span class="line">        make.height.equalTo(<span class="keyword">self</span>.buttonSize.height).priority(<span class="number">250</span>)</span><br><span class="line">        make.width.lessThanOrEqualTo(<span class="keyword">self</span>) make.height.lessThanOrEqualTo(<span class="keyword">self</span>) </span><br><span class="line">     &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// according to Apple super should be called at end of method </span></span><br><span class="line">     <span class="keyword">super</span>.updateConstraints()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="snp-remakeConstraints"><a href="#snp-remakeConstraints" class="headerlink" title="snp.remakeConstraints"></a>snp.remakeConstraints</h3><p><code>snp.remakeConstraints</code> 和 <code>snp.makeConstraints</code> 类似。不同的是，使用<code>snp.remakeConstraints</code> 需要先删除 SnapKit 安装的所有约束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeButtonPosition</span><span class="params">()</span></span> &#123; </span><br><span class="line">  <span class="keyword">self</span>.button.snp.remakeConstraints &#123; (make) -&gt; <span class="type">Void</span> <span class="keyword">in</span> </span><br><span class="line">    make.size.equalTo(<span class="keyword">self</span>.buttonSize) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> topLeft &#123; </span><br><span class="line">      make.top.<span class="keyword">left</span>.equalTo(<span class="number">10</span>) </span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      make.bottom.equalTo(<span class="keyword">self</span>.view).offset(-<span class="number">10</span>) </span><br><span class="line">      make.<span class="keyword">right</span>.equalTo(<span class="keyword">self</span>.view).offset(-<span class="number">10</span>) </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/571495-8ad534ec6d5cad5c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;SnapKit&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="SnapKit" scheme="https://www.clearloveway.com/tags/SnapKit/"/>
    
      <category term="文档" scheme="https://www.clearloveway.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>重读 Swift 之二：Operator Declaration（运算符重载）</title>
    <link href="https://www.clearloveway.com/posts/67356339"/>
    <id>https://www.clearloveway.com/posts/67356339</id>
    <published>2016-09-29T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.304Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:05 GMT+0800 (GMT+08:00) --><h2 id="为什么要重载运算符"><a href="#为什么要重载运算符" class="headerlink" title="为什么要重载运算符"></a>为什么要重载运算符</h2><p>我们都知道所谓的运算符平常的也就是 <code>+ - * /</code> 之类的，比如我们随便写个 <code>1 + 2</code> 打印肯定输出的是 <code>3</code> ，那么我们为什么还要重载运算符呢？下面我们就举个例子，如下我定义个结构体<a id="more"></a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> z: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们定义两个变量 V1，V2</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">V1</span> = <span class="type">Vector</span>(x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="type">V2</span> = <span class="type">Vector</span>(x: <span class="number">4</span>, y: <span class="number">5</span>, z: <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>然后我们来写<code>V1 + V2</code>，报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-ed690fe1f87cda52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" error "><br>报错 <code>+</code> 不能用于 <code>Vector</code>，这是因为 <code>Vector</code> 是我们自定义的一个结构体，所以编译器不知道我们要用 <code>+</code> 对这个结构体做什么操作。因此，在这里我们就需要用到运算符的重载。</p><h2 id="如何重载运算符"><a href="#如何重载运算符" class="headerlink" title="如何重载运算符"></a>如何重载运算符</h2><h3 id="含有两个参数的运算符的重载"><a href="#含有两个参数的运算符的重载" class="headerlink" title="含有两个参数的运算符的重载"></a>含有两个参数的运算符的重载</h3><p>因为运算符是一个函数，比如对于数组的 <code>reduce</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</span><br></pre></td></tr></table></figure><p>结果是 10 ，这里的 <code>+</code> 就代表了一个函数，所以我们重新写的时候可以如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y + <span class="keyword">right</span>.y, z: <span class="keyword">left</span>.z + <span class="keyword">right</span>.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就实现了 <code>+</code> 的重载，上面函数中 left 和 right 两个参数都是 Vector 类型的，一个表示运算符左边的参数一个表示运算符右边的参数（这两个参数是有先后顺序的，由于加法满足加法交换律所以这里体现不出来，有兴趣的可以试一下 <code>-</code> 的重载，这时候就要注意顺序了），然后返回值得类型也是 Vector 类型，再来实现<code>V1 + V2</code>的时候，就发现得到了一个新的 Vector 类型的值</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-7743fd3f2d5a3a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="V1 + V2"></p><p>这里我们就已经完成了 <code>+</code> 这个运算符的重载。当然有兴趣的童鞋还可以试着自己实现 <code>-</code> 或者 <code>*</code> 的重载，这里就不一一举例了。<br>关于双目运算符的重载，和单目运算符类似，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>  += <span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> Vector, <span class="keyword">right</span>: Vector)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">left</span> = <span class="keyword">left</span> + <span class="keyword">right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="http://upload-images.jianshu.io/upload_images/571495-407bf897c0229ca7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="V1"></p><h3 id="含有一个参数的运算符的重载"><a href="#含有一个参数的运算符的重载" class="headerlink" title="含有一个参数的运算符的重载"></a>含有一个参数的运算符的重载</h3><p>照着上面单目运算符的方式我们自己来写个 <code>-</code> 重载例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> - <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: -vector.x, y: -vector.y, z: -vector.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我们的逻辑这里取反逻辑上应该是正确的，可是编译会发现报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-5e066ede422ddd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>这里我们就要注意了，和有两个参数的运算符不同的是，只有一个参数的运算符位置是不固定的，这里的 <code>-</code> 可以在前可以在后，所以我们在这里还需要注意运算符的位置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> - <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: -vector.x, y: -vector.y, z: -vector.z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加上一个 prefix 表示前置（后置是 postfix）。这样就可以明确运算符的位置</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-40e8c6d074f5ebea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="-V1"></p><h3 id="比较运算符的重载"><a href="#比较运算符的重载" class="headerlink" title="比较运算符的重载"></a>比较运算符的重载</h3><p>关于比较运算符的重载，顾名思义也是有两个参数的，返回值肯定是个 <code>Bool</code> 类型的，如下重载 <code>==</code> 运算符</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x == <span class="keyword">right</span>.x &amp;&amp; <span class="keyword">left</span>.y == <span class="keyword">right</span>.y &amp;&amp; <span class="keyword">left</span>.z == <span class="keyword">right</span>.z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/571495-2d71c68a6b38af31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" V1 与 V2 的比较"><br>再来看看 <code>&gt;</code> 的重载，逻辑稍微多一点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> &gt; <span class="params">(<span class="keyword">left</span>: Vector, <span class="keyword">right</span>: Vector)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.x != <span class="keyword">right</span>.x &#123; <span class="keyword">return</span> <span class="keyword">left</span>.x &gt; <span class="keyword">right</span>.x &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.y != <span class="keyword">right</span>.y &#123; <span class="keyword">return</span> <span class="keyword">left</span>.y &gt; <span class="keyword">right</span>.y &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.z != <span class="keyword">right</span>.z &#123; <span class="keyword">return</span> <span class="keyword">left</span>.z &gt; <span class="keyword">right</span>.z &#125;</span><br><span class="line">    <span class="comment">//如果上面判断都失败了说明 left == right，所以返回值应该是 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再去比较 V1 和 V2 就会出现你逻辑中的效果。常规的运算符就说到这里，下面我们来看一下自定义运算符的重载。</p><h2 id="自定义运算符的重载"><a href="#自定义运算符的重载" class="headerlink" title="自定义运算符的重载"></a>自定义运算符的重载</h2><p>上面我们所说的都是 Swift 中已经存在了的运算符，那么我们能不能自己定义运算符呢？答案是肯定的，在文档中我们可以看到这么一句话</p><div class="note info"><p>Custom operators can begin with one of the ASCII characters <code>/, =, -, +, !, *, %, &lt;, &gt;, &amp;, |, ^, ?</code> , or ~, or one of the Unicode characters defined in the grammar below (which include characters from the <em>Mathematical Operators</em>, <em>Miscellaneous Symbols</em>, and <em>Dingbats</em> Unicode blocks, among others).<br>After the first character, combining Unicode characters are also allowed.</p></div><p>意思就是</p><div class="note info"><p>自定义运算符可以由以下其中之一的 ASCII 字符<code>/、=、 -、+、!、*、%、&lt;、&gt;、&amp;、|、^、?</code>以及 <code>~</code> ，或者后面语法中规定的任一个 Unicode 字符（其中包含了<em>数学运算符<em>、</em>零散符号(Miscellaneous Symbols)</em> 以及印刷符号 Dingbats 之类的 Unicode 块）开始。<br>在第一个字符之后，允许使用组合型 Unicode 字符。</p></div><h3 id="自定义单目运算符"><a href="#自定义单目运算符" class="headerlink" title="自定义单目运算符"></a>自定义单目运算符</h3><p>所以我们在自定义运算符的时候要注意一下。下面我们就来简单的自定义一个单目运算符 <code>+++</code>，这个运算符的作用呢就是让 Vector 中的每个变量都加 1 ，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是编译的时候会报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-508132cfcf9a52a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>这是因为我们没有明确的定义这个 <code>+++</code>，所以编译器不识别。所以我们应该申明一下这个运算符，正确的代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面我们用 <code>prefix operator +++</code> 声明前置运算符 +++ ，这样后面就可以用了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">V3</span> = <span class="type">Vector</span>(x: <span class="number">1</span>, y: <span class="number">1</span>, z: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: Vector)</span></span> -&gt; <span class="type">Vector</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector</span>(x: vector.x + <span class="number">1</span>, y: vector.y + <span class="number">1</span>, z: vector.z + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">V3</span>+++</span><br></pre></td></tr></table></figure><p>如上输出结果就是 Vector(x: 2, y: 2, z: 2)，到此，单目运算符的自定义就完成了。</p><h3 id="自定义双目运算符"><a href="#自定义双目运算符" class="headerlink" title="自定义双目运算符"></a>自定义双目运算符</h3><p>双目运算符的定义和单目运算符的定义类似，但是双目运算符自定义的时候的关键字是 <code>infix</code>，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** </span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们就自定义了一个求平方的双目运算符 <code>**</code>，然后我们试试 <code>2 ** 2</code>就可以看到结果是 <code>4.0</code>。<br>上面好像没有什么问题了，下面我想算一个平方的平方，拨入 2 的 2次方的 3 次方，照着逻辑应该这样写</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span></span><br></pre></td></tr></table></figure><p>但是编译我们会发现报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-b2e1e315590d0634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>错误是说我们上面的运算是个非结合性的运算，所谓的结合性（associativity）就是运算的先后顺序，在 Swift 2 中我们都知道还有个优先级（precedence），默认的是 100 ，它的范围是 0~200 ，这个是用来设置运算符优先级的，比如在swift 2.2 中我们完全定义一个求平方运算符就是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** &#123; <span class="keyword">associativity</span> <span class="keyword">left</span> <span class="keyword">precedence</span> <span class="number">120</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span> ** <span class="number">2</span> ** <span class="number">3</span>  <span class="comment">//结果是64.0</span></span><br></pre></td></tr></table></figure><p>在 Swift 3 中有些变化，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">precedencegroup <span class="type">ComparativePrecedence</span> &#123;</span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">right</span></span><br><span class="line">    higherThan: <span class="type">LogicalConjunctionPrecedence</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ** : <span class="type">ComparativePrecedence</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ** <span class="params">(x: Double, y: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pow(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上我们输入 <code>2 ** 2 ** 3</code>，就会发现结果是 256.0，这是因为我们把 associativity 设置成为了 right，所以运算从右边开始，先算 <code>2 ** 3 = 8.0</code>，然后再是 <code>2 ** 8.0 = 256.0</code>，如果我们把 associativity 设置成为了 left，就会发现结果是 64.0。关于更多的 associativity 和 higherThan 或者 lowerThan 之类的可以在下方参考连接中参考，这里就不一一说明了。<br>差不多运算符重载就到这里了，如果还有什么遗漏，欢迎大家指正！</p><div class="note info"><p>参考：<br>1、<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0077-operator-precedence.md" target="_blank" rel="noopener">swift-evolution</a><br>2、<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/operator-declaration" target="_blank" rel="noopener">Operator Declaration</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:05 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;为什么要重载运算符&quot;&gt;&lt;a href=&quot;#为什么要重载运算符&quot; class=&quot;headerlink&quot; title=&quot;为什么要重载运算符&quot;&gt;&lt;/a&gt;为什么要重载运算符&lt;/h2&gt;&lt;p&gt;我们都知道所谓的运算符平常的也就是 &lt;code&gt;+ - * /&lt;/code&gt; 之类的，比如我们随便写个 &lt;code&gt;1 + 2&lt;/code&gt; 打印肯定输出的是 &lt;code&gt;3&lt;/code&gt; ，那么我们为什么还要重载运算符呢？下面我们就举个例子，如下我定义个结构体&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="Operator Declaration" scheme="https://www.clearloveway.com/tags/Operator-Declaration/"/>
    
      <category term="运算符重载" scheme="https://www.clearloveway.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>重读 Swift 之一：Optional（可选型）</title>
    <link href="https://www.clearloveway.com/posts/6c5d39da"/>
    <id>https://www.clearloveway.com/posts/6c5d39da</id>
    <published>2016-08-04T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>之前学习 Swift 的时候都是比较破碎，零零散散，以至于有些地方学习的不够透彻。所以趁最近有时间，就开始重新学习 Swift ，从最基本的开始学习，希望能深入理解，见微知著！<br>关于 Swift 我们都是到是类型安全型的，相较于 OC ，安全似乎更能体现出来。关于这一方面， Swift 的可选型（optional）就不得不说了，可选型可以说是 Swift 最为突出的特性之一。可能有的同学在看 Swift 的过程中会遇到可选型（比如 <code>String?</code> ），有时也会见到 <code>String!</code> 这样的，搞不明白其中的意思，所以今天就来一步步理解可选型。<a id="more"></a></p><h2 id="什么是-Optional"><a href="#什么是-Optional" class="headerlink" title="什么是 Optional"></a>什么是 Optional</h2><p>Optional 是 Swift 新加入的类型，所以学过 OC 的童鞋就知道在 OC 中是没有这个概念的。可选型的意思简单理解是：有值得时候就有值，无值的时候就是 nil 。Swift 中的 nil 和其他语言中的 nil 还有些不一样，nil 自己本身就是一种类型，没有就是 nil ，是和其他类型严格区分开的。<br>可选型的定义很简单：类型 + ? 。比如 <code>String?</code>、<code>Int?</code>、<code>Float?</code> 等，这里需要注意的是 <code>String?</code> 和 <code>String</code> 是完全不同的两个类型，前者是 <code>String</code> 类型的额可选型，后者是 <code>String</code> 类型，注意区分。举个例子，在 OC 中我们可以这样写</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *name = <span class="string">@"loveway"</span>;</span><br><span class="line">name = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>上面的这种写法在 OC 中是没有问题的，相比于上面，在 swift 中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"loveway"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>如果我们像上面代码中这样写就会报错，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-1af13cff33c0abd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error"><br>说的是 nil 是不可以分配给 String 类型的，这也说明在 swift 中 nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>可选型，顾名思义就是可以选择，比如 <code>String?</code> 的意思就是可以在 <code>String</code> 和 <code>nil</code> 之间选择，可以是 <code>String</code> 也可以是 <code>nil</code> 。如果一个变量定义成 <code>String</code>，那么这个变量就会是 <code>String</code> 类型，而不可能是<code>nil</code>。<br>还有一点需要注意的是声明可选型必须是显示的声明也就是必须是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>这样，而不能是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>这样，因为 Swift 在做类型判断的时候无法判断 name 到底是 String 类型的可选型还是其他类型的可选型，因此会导致编译错误。</p><blockquote><p>Tips: 当然枚举类型的写法还可以如</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="type">Optional</span>.<span class="type">Some</span>(<span class="string">"Loveway"</span>)</span><br></pre></td></tr></table></figure><p>这样，只不过我们一般都用<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p></p><p>这样的简写。</p><h2 id="Optional的解包"><a href="#Optional的解包" class="headerlink" title="Optional的解包"></a>Optional的解包</h2><p>可选型是不能够被直接使用的（因为 Swift 是类型安全的，可选型的值又可能会是 nil，如果不做处理可能导致程序 crash），如果我们想使用可选型的值，那么在这之前我们需要做的一项工作就是：解包（unwarp）！</p><h3 id="强制解包"><a href="#强制解包" class="headerlink" title="强制解包"></a>强制解包</h3><p>所谓的强制解包意思就是我知道这个类型是可选型，但是在我的程序执行到这里的时候我可以保证它是有值得，所以我要在这里使用它。具体表现形式就是在可选型后面加个 <code>!</code>，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="string">"My name is "</span> + name!</span><br></pre></td></tr></table></figure><p>但是这样的解包是不安全，因为你不知道什么时候你的这个可选型就会变成 nil，如果我们代码非常多的话，一不小心为 nil了，可能会导致程序崩溃。这个时候我们会想到一种方法：判空！如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123; </span><br><span class="line">   <span class="string">"My name is "</span> + name!</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写似乎是没有什么问题了，但是需要注意的是，你在判断非 nil 的作用域内使用 name 的时候还必须把 <code>!</code> 带上，这样代码比较多的时候还是比较麻烦。于是我们可以使用下面这种方式，</p><h3 id="使用-if-let-解包"><a href="#使用-if-let-解包" class="headerlink" title="使用 if let 解包"></a>使用 <code>if let</code> 解包</h3><p>使用 <code>if let</code> 解包如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line">   <span class="string">"My name is "</span> + name</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解包方式可以保证 name 是解包过的，不会再是 nil 这种情况，其实逻辑是和上面做非空判断一样的。当然你把 <code>let</code> 换成 <code>var</code> 也是可以的，效果是一样的，只不过我们一般要用的是解包后的值，而不会去改变它，所以平常使用中一般都是用 <code>if let</code> 。<br>同时 <code>if let</code> 可以同时一次性解包多个可选型，用 <code>,</code> 隔开，使语句简洁，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age &#123;</span><br><span class="line">   <span class="string">"My name is "</span> + name</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，既然这里使用的是 <code>if</code> ，那么同样我们可以如下这样用，来进行进一步的判断筛选</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name, age = age <span class="keyword">where</span> age == <span class="number">18</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"My name is \(name), age is \(String(age))"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上也是可以的。</p><h2 id="可选链式调用（Optional-Chaining）"><a href="#可选链式调用（Optional-Chaining）" class="headerlink" title="可选链式调用（Optional Chaining）"></a>可选链式调用（Optional Chaining）</h2><p>可选链式调用（Optional Chaining）是一种可以在当前值可能为 nil 的可选值上请求和调用属性、方法及下标的方法。如果可选值有值，那么调用就会成功，如果可选值是 nil ，那么调用将返回 nil。多个调用可以连接在一起形成一个调用链，如果其中任何一个节点为 nil ，整个调用链都会失败，即返回 nil 。</p><p>下面我们就来举个例子具体说明可选链，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line">    <span class="built_in">print</span>(name.uppercaseString)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is nil"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来解包 name ，如果有值就打印出 name 的大写，如果没有就输出 <code>name is nil</code> ，其实上面这段代码完全等同于</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name?.uppercaseString</span><br></pre></td></tr></table></figure><p>上面这句代码的意思就是如果可选型变量 name 有值，那么就对 name 进行解包，并得到 name 的uppercaseString 值，如果没有，那么这句代码就会返回一个 nil 。这样就符合 Swift 的类型安全，完全是没有问题的。但是如果你写成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">"loveway"</span></span><br><span class="line">name!.uppercaseString</span><br></pre></td></tr></table></figure><p>也是可以的，不过不安全，因为如果 name 没有值，你进行强制解包，就会报错。<br>所以我们以后可能会用到类似于 <code>person?.name?.uppercaseString</code> 这样的一层层解包的，这种就是可选链。</p><h2 id="Nil-Coalescing-Operator（空合运算符）"><a href="#Nil-Coalescing-Operator（空合运算符）" class="headerlink" title="Nil Coalescing Operator（空合运算符）"></a>Nil Coalescing Operator（空合运算符）</h2><p>如上，如果我们想把解包后的值存起来的话，可以这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName = name == <span class="literal">nil</span> ? <span class="string">"no name"</span> : name!</span><br></pre></td></tr></table></figure><p>上面代码的意思就是如果 name 为 nil ，newName 就是 “no name”，否则 newName 就是 name!（name的解包）。其实 Swift 为我们提供了更简洁的语法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newName2 = name ?? <span class="string">"no name"</span></span><br></pre></td></tr></table></figure><p>上面代码的意思就是 name 如果有值 newName2 的值就是 name! ,否则就是 no name 。这里需要注意的是 <code>??</code>是空合运算符，这样写的可阅读性强，比较简洁。<br>当然关于 <code>??</code> 远不止这些，有兴趣的同学可以看 <a href="http://www.jianshu.com/p/3ede1ec31351" target="_blank" rel="noopener">聊聊swift语言中的“??”</a> 这篇文章。</p><h2 id="隐式可选型"><a href="#隐式可选型" class="headerlink" title="隐式可选型"></a>隐式可选型</h2><p>上面我们都知道了，创建一个显示可选型是: 类型 + <code>?</code>。这里创建隐式可选型的就是： 类型 + <code>!</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>! = <span class="string">"loveway"</span></span><br></pre></td></tr></table></figure><p>这里可能有的童鞋会疑惑，已经有了显示的可选型，为什么还需要有隐式的可选型。这里其实隐式的可选型也是有一定作用的。比如你有一个变量，声明为隐式的可选型（<code>!</code>），它的作用就是，当你这个类没有被初始化的时候他是没有值的，但是当你这个类初始化以后，你可以确保他是有值的，所以这里声明为隐式的可选型，而不是显示的。同样需要注意的是隐式的可选型也是可选型，如果你需要用它的值，你也是要进行判断的。如果不进行判断而直接使用，可能会造成不可预料的后果！<br>差不多可选型就到这里了，如果还有什么遗漏，欢迎大家指正！</p><div class="note info"><p>参考：<br><a href="http://wiki.jikexueyuan.com/project/swift/chapter2/17_Optional_Chaining.html" target="_blank" rel="noopener">可选链式调用（Optional Chaining）</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;之前学习 Swift 的时候都是比较破碎，零零散散，以至于有些地方学习的不够透彻。所以趁最近有时间，就开始重新学习 Swift ，从最基本的开始学习，希望能深入理解，见微知著！&lt;br&gt;关于 Swift 我们都是到是类型安全型的，相较于 OC ，安全似乎更能体现出来。关于这一方面， Swift 的可选型（optional）就不得不说了，可选型可以说是 Swift 最为突出的特性之一。可能有的同学在看 Swift 的过程中会遇到可选型（比如 &lt;code&gt;String?&lt;/code&gt; ），有时也会见到 &lt;code&gt;String!&lt;/code&gt; 这样的，搞不明白其中的意思，所以今天就来一步步理解可选型。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="Optional" scheme="https://www.clearloveway.com/tags/Optional/"/>
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="可选型" scheme="https://www.clearloveway.com/tags/%E5%8F%AF%E9%80%89%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Swift Tips：常用的知识点总结（持续更新...）</title>
    <link href="https://www.clearloveway.com/posts/b318b796"/>
    <id>https://www.clearloveway.com/posts/b318b796</id>
    <published>2016-06-21T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:05 GMT+0800 (GMT+08:00) --><p>前不久 swift 2.2 发布，感觉差不多快趋于稳定了，就在工作之余把 swift 拿出来重新看了一下，总结一些常用的知识点。话说好记性不如烂笔头，放在这忘记的时候还可以拿出来瞅瞅，免得遗忘的时候到处查找，这里与大家分享一下<a id="more"></a>。</p><h2 id="if-let-和-guard"><a href="#if-let-和-guard" class="headerlink" title="if let  和  guard"></a>if let 和 guard</h2><p><code>if let</code> 和 <code>guard</code> 只是语法糖，不使用也没关系，但是使用了以后使代码更简洁，逻辑更加清晰，举个例子，<br>我们平时写个参数是可选型的（ <code>Optional</code> ）函数的时候，往往需要在函数中作进一步的判断，比如我简单的判断输入的一个数是不是正数（ <code>&gt; 0</code>），正常的写法应该是这样的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> number != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们 <code>judgeTheNumber()</code> 这个函数的参数是 <code>Int?</code> ，所以我们得判断是不是 <code>nil</code> ，然后再判断是不是 <code>&gt; 0</code> ，比较正产的写法是这样的这样，但是代码好像比较多，有没有更简洁的呢？</p><h3 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a><code>if let</code></h3><p>上面的代码我们使用 <code>if let</code> 的写法如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> number = number <span class="keyword">where</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"nil or zero or negative number"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的效果和上面的是一样的，通过<code>if let number = number where number &gt; 0</code>这么一句是不是，代码更简洁，可读性更高了！</p><h3 id="guard"><a href="#guard" class="headerlink" title="guard"></a><code>guard</code></h3><p><code>guard</code> 是 swift 2.0 的新特性，在 Xcode 7.0 推出来的，与 <code>if</code> 语句不同的是，<code>guard</code> 只有在条件不满足时才会执行，你可以把 <code>guard</code> 近似的看成 <code>Assert</code> ，上面的代码用 <code>guard</code> 就如下，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">judgeTheNumber</span><span class="params">(number: Int?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> number = number <span class="keyword">where</span> number &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line"><span class="comment">//        当number满足上述条件时执行下面代码，否则执行上面的return</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"This is a positive number"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至于 <code>if let</code> 和 <code>guard</code> 语法中出现的 <code>where</code> ，只是附加一些条件。相当于逻辑运算 <code>&amp;&amp;</code> 和 <code>||</code>。当然上面的例子还有很多的写法，如果不熟悉，可以多写几次试试。</p><h2 id="available-和-available"><a href="#available-和-available" class="headerlink" title="@available 和 #available"></a>@available 和 #available</h2><h3 id="available"><a href="#available" class="headerlink" title="#available"></a><code>#available</code></h3><p>在以前开发的时候，不同版本的 API 兼容着实让人头疼，所以会看到各种 <code>#define</code> 然后就是在代码中各种，<code>if (iOS 8)</code> 等等之类的，如果有的地方不注意，比如你调用一个方法是 iOS 8 才有的，然后你的版本最低支持 iOS 7 ，毫无疑问在 iOS 7 上调用的时候会崩溃。而 Swift 2.0 新引入的 <code>#available</code> 机制，就解决了这一问题。如果你在低版本上使用高版本的方法时，编译器检查的时候发现你没处理的话就会直接报错，如下<br><img src="http://upload-images.jianshu.io/upload_images/571495-1760b3fdedb8d6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="`Deployment Target` 为 `iOS 7.0`时使用`UIAlertController`"><br>上面提示 UIAlertController 只有在 iOS 8 以后才可以使用，这时点击左侧的报错红点就会有提示，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-ecd83c50a8890b9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击左侧红点以后的提示"><br>这时我们就可以看到有个提示是 <code>Add if #available version check</code> 就是用 <code>#available</code> 来做版本检查，同时原代码上就会加上一个 <code>if else</code> 的判断点击 <code>Fix-it</code> 后代码就变成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">8.0</span>, *) &#123;</span><br><span class="line">    <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>.<span class="keyword">init</span>(title: <span class="string">"温馨提示"</span>, message: <span class="string">"这是iOS8以后才有的方法"</span>, preferredStyle: <span class="type">UIAlertControllerStyle</span>.<span class="type">Alert</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再编译就不会报错了。<br><code>#available</code> 这里也算是对开发方式的一个改进，也更加体现出 swift 一直强调的安全。这里 <code>#available(iOS 8.0, *)</code> 中，意思就是 iOS 8 以上，其中 <code>*</code> 表示全平台，无特殊说明的话都是 <code>*</code> ，同时后面还可以加参数，比如 <code>#available(iOS 8.0, OSX 10.10, *)</code> ，表示就是 iOS 8 以及 OSX 10.10 以上。</p><h3 id="available-1"><a href="#available-1" class="headerlink" title="@available"></a>@available</h3><p><code>@available</code> 放在函数（<code>func</code>），类（<code>class</code>）或者协议（<code>protocol</code>）前面。表明这些类型适用的平台和操作系统。比如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">newMethord</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//   This func can perform after iOS 9.0</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以像下面这样调用这个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> #available(iOS <span class="number">9.0</span>, *) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">newMethord()</span><br></pre></td></tr></table></figure><p>如果你不加上 <code>#available(iOS 9.0, *)</code> 那么当你支持的版本低于 iOS 9.0 的时候毫无疑问会报错的。</p><div class="note info"><p>参考链接<br>1、 <a href="https://www.hackingwithswift.com/new-syntax-swift-2-availability-checking" target="_blank" rel="noopener">Availability checking in Swift 2: backwards compatibility the smart way</a><br>2、<a href="http://stackoverflow.com/questions/32761511/difference-between-available-and-available-in-swift-2-0" target="_blank" rel="noopener"><a href="http://stackoverflow.com/questions/32761511/difference-between-available-and-available-in-swift-2-0" target="_blank" rel="noopener">Difference between @available and #available in swift 2.0</a></a></p></div><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><p>首先我们来看个例子，我想弹出一个 <code>alert</code> ，于是我写了个方法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMyAlertMethord</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> #available(iOS <span class="number">8.0</span>, *) <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">    <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>.<span class="keyword">init</span>(title: <span class="string">"温馨提示"</span>, message: <span class="string">"这是iOS8以后才有的方法"</span>, preferredStyle: <span class="type">UIAlertControllerStyle</span>.<span class="type">Alert</span>)</span><br><span class="line">    alert.addAction(<span class="type">UIAlertAction</span>.<span class="keyword">init</span>(title: <span class="string">"OK"</span>, style: .<span class="type">Destructive</span>, handler: &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Handle OK action "</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">self</span>.presentViewController(alert, animated: <span class="literal">true</span>, completion: &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"UIAlertController present"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我在 <code>viewDidLoad()</code> 调用 <code>showMyAlertMethord()</code> 这个方法，运行发现弹出来了，没有问题。现在我想延迟三秒执行，这里我简单的用 <code>performSelector()</code> 这个方法，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(showMyAlertMethord(), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这时候报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-9917fcf79ee3094c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误提示"><br>一脸懵逼，噢，搞了半天发现原来是方法名写错了，这时候果断换上 <code>Selector(&quot;showAlert&quot;)</code> ，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(<span class="type">Selector</span>(<span class="string">"showMyAlertMethord"</span>), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>虽然有个警告，但是不管了，运行，出来了，完美解决！<br>于是就用这种方法写，于是有一天再用这个方法的时候，崩溃了！我的天，不是吧，之前都是好好的，一模一样的代码，查看源码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(<span class="type">Selector</span>(<span class="string">"showmyAlertethord"</span>), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>哦，找了半天，原来之前是 <code>Selector(&quot;showMyAlertMethord&quot;</code> ，现在手一哆嗦，写成了 <code>Selector(&quot;showmyAlertethord&quot;)</code> ，坑爹啊，写错一个字母。虽然解决了问题，不过这时候你就应该有所思考，这种写法是不对的，或者说是不安全的，再回头过来看看那个警告<br><img src="http://upload-images.jianshu.io/upload_images/571495-8d7c734be84c611a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告提示"><br>意思是让我们用 <code>#selector()</code> 来代替 <code>Selector()</code>，所以到最后正确的代码应该如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.performSelector(#selector(<span class="keyword">self</span>.showMyAlertMethord), withObject: <span class="literal">nil</span>, afterDelay: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这就是在 swift 2.2 中提倡使用的方法 <code>#selector()</code> ，你会发现如果你输错方法名编译器会直接报错，而不是运行期来检查是不是有这个方法，这样编译期（<code>compile-time</code>）来检查出来，而不是运行期（<code>run-time</code>），这样就更安全了！<br>所以，在调用方法的时候，还是使用 <code>#selector()</code> 吧，最好还是不要使用 <code>Selector()</code> 或者 <code>NSSelectorFromString()</code> ，因为这样会更安全！</p><div class="note info"><p>参考链接<br>1、<a href="http://stackoverflow.com/questions/24007650/selector-in-swift" target="_blank" rel="noopener">@selector() in Swift?</a><br>2、<a href="http://stackoverflow.com/questions/36007067/swift-selector-referencing-to-an-objective-c-method" target="_blank" rel="noopener">Swift #selector referencing to an Objective-C method</a></p></div><h2 id="inout"><a href="#inout" class="headerlink" title="inout"></a>inout</h2><p>升级了 Xcode 7.3 以后，简单的写一个例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tempStr = <span class="string">"My "</span></span><br><span class="line">        <span class="keyword">let</span> result = stringPlus(tempStr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"result is \(result)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(tempStr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stringPlus</span><span class="params">(<span class="keyword">var</span> str: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        str = str + <span class="string">"Loveway !"</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**result <span class="keyword">is</span> <span class="type">My</span> <span class="type">Loveway</span> !**</span><br><span class="line">**<span class="type">My</span> **</span><br></pre></td></tr></table></figure><p>这是简单的字符串拼接的一个例子，调用、运行并没有什么问题，但是你会发现有一个警告，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-78011956e3028e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告提示"><br>没错，就是</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'<span class="keyword">var</span>' parameters are deprecated and will be removed <span class="keyword">in</span> <span class="type">Swift</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>提示 <code>var</code> 类型的参数已经废弃了，并且将会在 swift 3 中移除！这是因为苹果认为 <code>var</code> 类型的参数会有限制，<code>var</code>变量参数只是在函数体内有用，超出作用域就是失效了，于是就使用了 <code>inout</code> 来代替 <code>var</code>，修改代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> tempStr = <span class="string">"My "</span></span><br><span class="line">        <span class="keyword">let</span> result = stringPlus(&amp;tempStr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"result is \(result)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(tempStr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stringPlus</span><span class="params">(<span class="keyword">inout</span> str: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        str = str + <span class="string">"Loveway !"</span></span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**result is My Loveway !**</span><br><span class="line">**My Loveway !**</span><br></pre></td></tr></table></figure><p>嗯，好像没有警告了，完美解决！等等，什么，两次输出的结果不一样？？？第一次 <code>tempStr</code> 的值是 <code>My</code>，改成 <code>inout</code> 后的值变成 <code>My Loveway !</code> 了，这是因为 <code>inout</code> 是可以在函数作用域内改变参数的，并且还可以返回（不管你的函数有没有返回值，只要是在函数作用域内改变了这个 <code>inout</code> 参数）。<br><code>inout</code> 语意解释为输入输出参数（<code>In-Out Parameters</code>），输入输出参数被传递时遵循如下规则：</p><ul><li>1、函数调用时，参数的值被拷贝。</li><li>2、函数体内部，拷贝后的值被修改。</li><li>3、函数返回后，拷贝后的值被赋值给原参数</li></ul><p>这种行为被称为拷入拷出 (<code>copy-in copy-out</code>) 或值结果调用 (<code>call by value result</code>)。例如，当一个计算型属性或者一个具有属性观察器的属性被用作函数的输入输出参数时，其 <code>getter</code> 会在函数调用时被调用，而其 <code>setter</code> 会在函数返回时被调用。<br>作为一种优化手段，当参数值存储在内存中的物理地址时，在函数体内部和外部均会使用同一内存位置。这种优化行为被称为引用调用 (<code>call by reference</code>)，它满足了拷入拷出模型的所有需求，而消除了复制带来的开销。不要依赖于拷入拷出与引用调用之间的行为差异。但是你不能将同一个值传递给多个输入输出参数，因为多个输入输出参数引发的拷贝与覆盖行为的顺序是不确定的，因此原始值的最终值也将无法确定。</p><p>现在我们就不难理解为什么 <code>tempStr</code> 的值发生了变化，这也是 swift 要废弃 var 参数的原因。<br>似乎现在警告也解决了，<code>inout</code> 也知道了，于是继续向下写，写一个数字转英文的例子，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">let</span> digitNames = [<span class="number">0</span>: <span class="string">"one"</span>, <span class="number">1</span>: <span class="string">"two"</span>, <span class="number">3</span>: <span class="string">"three"</span>, <span class="number">4</span>: <span class="string">"four"</span>, <span class="number">5</span>: <span class="string">"five"</span>, <span class="number">6</span>: <span class="string">"six"</span>, <span class="number">7</span>: <span class="string">"seven"</span>, <span class="number">8</span>: <span class="string">"eight"</span>, <span class="number">9</span>: <span class="string">"nine"</span>]</span><br><span class="line">        <span class="keyword">let</span> numbers: <span class="type">Array</span> = [<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line">        <span class="keyword">let</span> strArray = numbers.<span class="built_in">map</span>( &#123;</span><br><span class="line">            (<span class="keyword">var</span> number: <span class="type">Int</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">var</span> output = <span class="string">""</span></span><br><span class="line">            <span class="keyword">while</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">                output = digitNames[number % <span class="number">10</span>]! + output</span><br><span class="line">                number /= <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> output</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">print</span>(strArray)</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**[&quot;twofour&quot;, &quot;twofive&quot;, &quot;twosix&quot;]**</span><br></pre></td></tr></table></figure><p>没有问题，但是警告又出来了</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-4bdfe3a643f96746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数字转英文的警告提示"><br>通过上面，于是我们改成了 <code>inout</code> ，结果报错</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-07da505c743ff9bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="改成`inout`后的报错"><br>似乎在这里 <code>inout</code> 并不能解决问题，这种情况下，有一种消除的警告的方法就是用一个临时变量接受这个输入的参数，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> digitNames = [<span class="number">0</span>: <span class="string">"one"</span>, <span class="number">1</span>: <span class="string">"two"</span>, <span class="number">3</span>: <span class="string">"three"</span>, <span class="number">4</span>: <span class="string">"four"</span>, <span class="number">5</span>: <span class="string">"five"</span>, <span class="number">6</span>: <span class="string">"six"</span>, <span class="number">7</span>: <span class="string">"seven"</span>, <span class="number">8</span>: <span class="string">"eight"</span>, <span class="number">9</span>: <span class="string">"nine"</span>]</span><br><span class="line"><span class="keyword">let</span> numbers: <span class="type">Array</span> = [<span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]</span><br><span class="line"><span class="keyword">let</span> strArray = numbers.<span class="built_in">map</span>( &#123;</span><br><span class="line">    (number: <span class="type">Int</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">var</span> number = number</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> number &gt; <span class="number">0</span> &#123;</span><br><span class="line">        output = digitNames[number % <span class="number">10</span>]! + output</span><br><span class="line">        number /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(strArray)</span><br></pre></td></tr></table></figure><p>这样就解决了问题，这个也是苹果官方提供的一种解决思路。</p><div class="note info"><p>参考链接<br>1、<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md" target="_blank" rel="noopener">Removing <code>var</code> from Function Parameters</a><br>2、<a href="http://stackoverflow.com/questions/36164973/var-parameters-are-deprecated-and-will-be-removed-in-swift-3" target="_blank" rel="noopener"><code>&#39;var&#39;</code> parameters are deprecated and will be removed in Swift 3</a><br>3、<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/swift/grammar/external-parameter-name" target="_blank" rel="noopener">Swift： Declarations</a></p></div><h2 id="noescape"><a href="#noescape" class="headerlink" title="@noescape"></a>@noescape</h2><p>关于闭包（<code>Closures</code>）这里就不多说了，不清楚的童鞋可以去 <a href="http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html" target="_blank" rel="noopener">这里</a> 了解一下。<br>我们都知道闭包是自包含的函数代码块，可以在代码中被传递和使用。Swift 中的闭包与 C 和 Objective-C 中的代码块（blocks）以及其他一些编程语言中的匿名函数比较相似。那么非逃逸闭包（<code>@noescape</code>）到底是个什么意思呢，举个栗子</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-5fe970053070ee11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="举个栗子"><br>如下代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        funcWithEscapeClosure(clouserTest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"222"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">       someFunc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clouserTest</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"333"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们会看到控制台的输出信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**333**</span><br><span class="line">**111**</span><br><span class="line">**222**</span><br></pre></td></tr></table></figure><p>从上到下看，按照函数的执行顺序，这个我们都能理解，是没错的。这个时候我们知道 <code>clouserTest ()</code> 是在 <code>funcWithEscapeClosure()</code>被调用后执行的，那么这个就是非逃逸闭包，对于非逃逸闭包，我们可以在参数名之前加一个 <code>@noescape</code>，用来标注这个函数是不能逃逸出函数体的，这样做的好处就是能让编译器明确的知道这个函数的生命周期，以做进一步的优化。比如上面的函数我们可以改成这样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(@noescape someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        clouserTest()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译运行肯定是没有问题的。<br>有逃逸闭包肯定就有非逃逸闭包，非逃逸闭包的定义是：当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。这种情况大都是在异步操作的时候用到，还是上面按个例子，我们修改一下，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        funcWithEscapeClosure(clouserTest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"222"</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">funcWithEscapeClosure</span><span class="params">(someFunc: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line"></span><br><span class="line">        dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, (<span class="type">Int64</span>)(<span class="number">2</span> * <span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue()) &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">           someFunc()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"111"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clouserTest</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"333"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看看输出结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**111**</span><br><span class="line">**222**</span><br><span class="line">**333**</span><br></pre></td></tr></table></figure><p>结果表明 <code>someFunc()</code> 也就是 <code>clouserTest()</code> 是在最后执行的，这里的 <code>clouserTest()</code> 就从 <code>funcWithEscapeClosure()</code> 这个函数中逃逸出了，这个时候如果在参数前面加一个 <code>@noescape</code> 会报错，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-bfdb4d9df7fdb30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误提示"><br>如上，提示闭包使用的非逃逸（<code>@noescape</code>）参数可能需要允许它逃逸，这是因为 <code>funcWithEscapeClosure()</code> 这个函数执行完毕之后才会执行 <code>someFunc()</code> ，也就是说这种情况就是 <code>someFunc()</code> 就是逃逸出了函数，这里加 <code>@noescape</code> 肯定是不对的。<br>还有一点就是编译器知晓非逃逸闭包的上下文环境，所以非逃逸闭包中可以不写 self。比如你的类有一个 <code>name</code> 的变量，在非逃逸闭包中你就可以直接用 <code>name = &quot;loveway&quot;</code> ，而无需 <code>self.name = &quot;loveway&quot;</code> 这样。</p><h2 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a>mutating</h2><p><code>mutating</code> 从字面意思来看就是变化、改变，我们知道在 Objective-C 中只有类（<code>class</code>）中才可以定义方法，然而在 Swift 中，我们可以在类（<code>class</code>）、结构体（<code>struct</code>）、枚举（<code>enum</code>）中定义方法，这也是 Objective-C 和 Swift 的一个区别。下面以一个结构体举例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">var</span> man = <span class="type">Man</span>(height: <span class="number">170.0</span>, weight: <span class="number">62.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        man.gainHeightAndWeight(<span class="number">1.0</span>, gainWeight: <span class="number">2.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">       <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Now height is(\(height + gainHeight)), weight is (\(weight + gainWeight))"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br><span class="line">**Now height is(171.0), weight is (64.0)**</span><br><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br></pre></td></tr></table></figure><p>我们可以看到控制台输出的结果是没有问题的，<code>man</code> 的值没有变化。不过这个时候会有一个警告，如图<br><img src="http://upload-images.jianshu.io/upload_images/571495-7afaad4009977408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="警告截图"><br>意思是说这个 <code>man</code> 是不可变的，建议使用 <code>let</code> 来替代 <code>var</code> ，不去管它。现在来修改一下代码，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line"><span class="comment">//            print("Now height is(\(height + gainHeight)), weight is (\(weight + gainWeight))")</span></span><br><span class="line">            height += gainHeight</span><br><span class="line">            weight += gainWeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译就会报如下错误<br><img src="http://upload-images.jianshu.io/upload_images/571495-1d0285ca8cc845eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译报错"><br>这是因为结构体和枚举是值类型。默认情况下，值类型的属性不能在它的实例方法中被修改。<br>但是，如果你确实需要在某个特定的方法中修改结构体或者枚举的属性，你可以为这个方法选择可变(<code>mutating</code>)行为，然后就可以从其方法内部改变它的属性；并且这个方法做的任何改变都会在方法执行结束时写回到原始结构中。方法还可以给它隐含的 <code>self</code> 属性赋予一个全新的实例，这个新实例在方法结束时会替换现存实例。要使用可变方法，将关键字 <code>mutating</code> 放到方法的 <code>func</code> 关键字之前就可以了，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">var</span> man = <span class="type">Man</span>(height: <span class="number">170.0</span>, weight: <span class="number">62.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man)</span><br><span class="line">        man.gainHeightAndWeight(<span class="number">1.0</span>, gainWeight: <span class="number">2.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(man) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0.0</span>, weight = <span class="number">0.0</span></span><br><span class="line">       <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">gainHeightAndWeight</span><span class="params">(gainHeight: Double, gainWeight: Double)</span></span> &#123;</span><br><span class="line"><span class="comment">//            print("Now height is(\(height + gainHeight)), weight is (\(weight + gainWeight))")</span></span><br><span class="line">            height += gainHeight</span><br><span class="line">            weight += gainWeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Man(height: 170.0, weight: 62.0)**</span><br><span class="line">**Man(height: 171.0, weight: 64.0)**</span><br></pre></td></tr></table></figure><p>这个时候 <code>man</code> 的值就改变了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;前不久 swift 2.2 发布，感觉差不多快趋于稳定了，就在工作之余把 swift 拿出来重新看了一下，总结一些常用的知识点。话说好记性不如烂笔头，放在这忘记的时候还可以拿出来瞅瞅，免得遗忘的时候到处查找，这里与大家分享一下&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://www.clearloveway.com/categories/Swift/"/>
    
    
      <category term="swift" scheme="https://www.clearloveway.com/tags/swift/"/>
    
      <category term="Swift Tips" scheme="https://www.clearloveway.com/tags/Swift-Tips/"/>
    
      <category term="知识点" scheme="https://www.clearloveway.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中利用 runtime 一键改变字体</title>
    <link href="https://www.clearloveway.com/posts/6fe90bda"/>
    <id>https://www.clearloveway.com/posts/6fe90bda</id>
    <published>2016-04-26T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.278Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>忙忙忙！！！好久没写博客了，前段时间实在是每天满满的，回去了累了也不想写了，只是躺床上看一会东西。最近公司要在 5 月份举办个大型的发布会，所以在这之前要把版本稳定，界面提升，所以有很多<a id="more"></a>细活要干。</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-968a4bbeb165bf2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过，趁前两天版本刚提交上线，这两天稍微闲一点，就把之前说的利用 <code>runtime</code> 一键改变字体的方法分享出来。有人会说，改变字体不是很简单吗，我直接找到字体名替换一下不就好了？客官不要急，先坐下来吃点瓜子，听我慢慢给你说来。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们新建一个项目名叫 <code>ChangeFont</code> ，然后我就随便找了个名叫 <code>loveway.ttf</code> 的字体库拖进去，里面的工程目录大概就是这样的</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-91a43c0fac5f91e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录"><br>现在我们就简单的直接在 <code>storyboard</code> 上拖了一个 <code>label</code> 一个 <code>button</code> ，约束好，像这样</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-d567ca72aadb692b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="storyboard"><br>嗯，就这样，很简单，运行</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-e81ac83f048a9545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"><br>好的显示正常，没什么问题，接下来改变字体。</p><h2 id="改变字体"><a href="#改变字体" class="headerlink" title="改变字体"></a>改变字体</h2><p>我们之前已经把 <code>loveway.ttf</code>这个文件拖进去了，现在在 <code>plist</code> 文件里面配置一下。打开 <code>plist</code> 然后加入名为 <code>Fonts provided by application</code> 的一行，在 <code>item</code> 里把我们的字体名字加进去</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-f3a34a72dd21beaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="plist"><br>最后我们需要保证我们确确实实是加进来了</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-89647ae861ac1ba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="phases"><br>这个时候也许你已经迫不及待了，赶紧改字体，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  ChangeFont</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/4/27.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 HenryCheng. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *myLabel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *myButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    _myLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"loveway.ttf"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">    _myButton.titleLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"loveway"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行。。。oh no ！怎么没变，还是原来的样子</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-b506d905f84c8eb5.gif?imageMogr2/auto-orient/strip" alt><br>肯定是姿势不对，于是百度了一下（虽然我一般都用谷歌），的确这种方法不对</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-00a8f16b498d556d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>于是改变思路，先找出字体的名字，Like this，代码改成这样</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSString</span> *familyName <span class="keyword">in</span> [<span class="built_in">UIFont</span> familyNames])&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Font FamilyName = %@"</span>,familyName); <span class="comment">//*输出字体族科名字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">NSString</span> *fontName <span class="keyword">in</span> [<span class="built_in">UIFont</span> fontNamesForFamilyName:familyName]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"\t%@"</span>,fontName);         <span class="comment">//*输出字体族科下字样名字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _myLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"loveway.ttf"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">    _myButton.titleLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"loveway"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一看控制台</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-0aa0ce498e8e115f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出的字体名称部分截图"><br>这什么鬼，我哪知道我刚加进去的字体名称是什么，这咋找</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-e1f6327a4fc6eed0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>于是想出来个办法，再建一个工程，不加入 <code>loveway.ttf</code> 这个字体，打印出来，一个个对比，多的那个不就是了吗！bingo，于是花了一会功夫终于找出来了，是 <code>FZLBJW--GB1-0</code> ，不管了，先试试看行不行</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/571495-b0d97825e5d33a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(NSString *familyName in [UIFont familyNames])&#123;</span></span><br><span class="line"><span class="comment">        NSLog(@"Font FamilyName = %@",familyName); //输出字体族科名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for(NSString *fontName in [UIFont fontNamesForFamilyName:familyName]) &#123;</span></span><br><span class="line"><span class="comment">            NSLog(@"\t%@",fontName);         //输出字体族科下字样名字</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _myLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"FZLBJW--GB1-0"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">    _myButton.titleLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"FZLBJW--GB1-0"</span> size:<span class="number">17.0</span>f];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，结果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-c438612edb9e919e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="改变字体后的运行结果"><br>OK！达到效果了，虽然有点挫，但是效果达到了，还不错<br><img src="http://upload-images.jianshu.io/upload_images/571495-cd735e070dffdf7e.gif?imageMogr2/auto-orient/strip" alt><br>到这里，基本的改变字体效果已达到。</p><h2 id="查找字体的一种简单的方法"><a href="#查找字体的一种简单的方法" class="headerlink" title="查找字体的一种简单的方法"></a>查找字体的一种简单的方法</h2><p>在上面我们可以看到，通过对比的方法找到了 <code>FZLBJW--GB1-0</code> 这个名字，这里，有一种简单的方法，<br>我们在 Finder 里面找到这个 <code>ttf</code> ，双击打开（在 <code>Xcode</code> 里面双击打开没效果），这时候系统就会用苹果自带的字体册打开，如下</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-6f429dd17e7f8a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用字体册打开 `.rtf` "><br>这样我们就可以看到了这个字体的族科名字，我们看到的是 <code>FZLiBian-S02S</code> ，于是我们在刚才输出全部字体名的控制台搜索一下这个族科名，就可以知道具体的字体名了</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-71dbd7f8d809bef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="搜索 `FZLiBian-S02S` "><br>这样就比上面简单多了。</p><h2 id="进一步的思考"><a href="#进一步的思考" class="headerlink" title="进一步的思考"></a>进一步的思考</h2><p>上面例子中简单的说了一下改变字体的方法，虽然成功了，但是我们不得不思考一下。上面只是两个简单的控件，那么我要是有一堆控件怎么办？或者你可以说我也可用这种方法一个个加，你要是纯代码写的还好，你要是 <code>xib</code> 写的，难道还要把一个个无用的只是显示一下的 <code>label</code> 或者 <code>button</code> 拉出来这样写吗？这样的话，效率肯定会非常低，尤其是那些写到一半的大工程，感觉这种方法肯定是行不通的。<br>这里利用 runtime 的 class_addMethod 、 class_replaceMethod 、method_exchangeImplementations 这几个方法，然后根据 <code>+ (void)load</code> 这个方法的特性实现（关于 <code>+ (void)load</code> 这个方法后面会说，或者不懂得童鞋可以先查查资料），代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UILabel+FontChange.m</span></span><br><span class="line"><span class="comment">//  LiquoriceDoctorProject</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/7.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 iMac. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UILabel+FontChange.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define CustomFontName @<span class="meta-string">"FZLBJW--GB1-0"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UILabel</span> (<span class="title">FontChange</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="comment">//方法交换应该被保证，在程序中只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">//获得viewController的生命周期方法的selector</span></span><br><span class="line">        SEL systemSel = <span class="keyword">@selector</span>(willMoveToSuperview:);</span><br><span class="line">        <span class="comment">//自己实现的将要被交换的方法的selector</span></span><br><span class="line">        SEL swizzSel = <span class="keyword">@selector</span>(myWillMoveToSuperview:);</span><br><span class="line">        <span class="comment">//两个方法的Method</span></span><br><span class="line">        Method systemMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], systemSel);</span><br><span class="line">        Method swizzMethod = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], swizzSel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败</span></span><br><span class="line">        <span class="built_in">BOOL</span> isAdd = class_addMethod(<span class="keyword">self</span>, systemSel, method_getImplementation(swizzMethod), method_getTypeEncoding(swizzMethod));</span><br><span class="line">        <span class="keyword">if</span> (isAdd) &#123;</span><br><span class="line">            <span class="comment">//如果成功，说明类中不存在这个方法的实现</span></span><br><span class="line">            <span class="comment">//将被交换方法的实现替换到这个并不存在的实现</span></span><br><span class="line">            class_replaceMethod(<span class="keyword">self</span>, swizzSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则，交换两个方法的实现</span></span><br><span class="line">            method_exchangeImplementations(systemMethod, swizzMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)myWillMoveToSuperview:(<span class="built_in">UIView</span> *)newSuperview &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> myWillMoveToSuperview:newSuperview];</span><br><span class="line"><span class="comment">//    if ([self isKindOfClass:NSClassFromString(@"UIButtonLabel")]) &#123;</span></span><br><span class="line"><span class="comment">//        return;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.tag == <span class="number">10086</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="keyword">self</span>.font.pointSize];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ([<span class="built_in">UIFont</span> fontNamesForFamilyName:CustomFontName])</span><br><span class="line">                <span class="keyword">self</span>.font  = [<span class="built_in">UIFont</span> fontWithName:CustomFontName size:<span class="keyword">self</span>.font.pointSize];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>然后不加任何代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  ChangeFont</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/4/27.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 HenryCheng. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *myLabel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *myButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    for(NSString *familyName in [UIFont familyNames])&#123;</span></span><br><span class="line"><span class="comment">//        NSLog(@"Font FamilyName = %@",familyName); //输出字体族科名字</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for(NSString *fontName in [UIFont fontNamesForFamilyName:familyName]) &#123;</span></span><br><span class="line"><span class="comment">//            NSLog(@"\t%@",fontName);         //输出字体族科下字样名字</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    _myLabel.font = [UIFont fontWithName:@"FZLBJW--GB1-0" size:17.0f];</span></span><br><span class="line"><span class="comment">//    _myButton.titleLabel.font = [UIFont fontWithName:@"FZLBJW--GB1-0" size:17.0f];</span></span><br><span class="line"><span class="comment">//    _myLabel.tag = 10086;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-c438612edb9e919e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们可以看到字体改变了。<br>如果有人说我有的想改变字体有的不想改变字体怎么办，我这里有个简单的办法就是设置 <code>tag</code> ，比如我设置 <code>label</code> 的 <code>tag</code> 为 <code>10086</code>（随便起的），就让他字体不改变</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-eb6416a39e3dce46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行结果</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-67c22bdfcd9f68b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong><strong>注意：</strong></strong><br>1、如果你是代码写控件，你不想改变字体，你只需在创建的时候设置 <code>tag</code> 为 <code>10086</code><br>2、上面代码中注释了一行</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    if ([self isKindOfClass:NSClassFromString(@"UIButtonLabel")]) &#123;</span></span><br><span class="line"><span class="comment">//        return;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br></pre></td></tr></table></figure><p>这个是当时写的时候不改变 <code>button</code> 的 <code>title</code> 字体设置的，在这里你可以判断那种类型的改哪种不改，比如说你不想改 <code>button</code> 的字体，把这一句解注释即可<br>3、如果你是 <code>xib</code> 拉的控件，你不想改变字体，你必须在 <code>xib</code> 界面设置 <code>tag</code> 为 <code>10086</code> ，不可加载完毕后在 <code>- (void)viewDidLoad</code> 里面设置，这还是因为 <code>+ (void)load</code> 这个方法：</p><ul><li>在一个程序（main函数）运行之前，所用到的库被加载到 runtime 之后，被添加到的 runtime 系统的各种类和 category 的 +load 方法就被调用；（关于这点很容易通过打印语句来验证）；</li><li>如果父类和子类的 +load 方法都被调用，父类的调用一定在子类之前，这是系统自动完成的，子类 +load 中没必要显式调用 [super load] ；<br>这里只是简单的说一下，具体不理解的可以翻翻官方文档</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>关于代码的解释，在工程里都已经注释的非常清楚了，这里就不多说了，不清楚的童鞋可以给我留言。具体用法很简单，你只需要将 <code>UILabel+FontChange.h</code> 和 <code>UILabel+FontChange.m</code> 拉进你的工程即可。<br>需要下载更多字体的可以在 <a href="http://www.webpagepublicity.com/free-fonts.html" target="_blank" rel="noopener">字体库</a>下载，所有的代码都可以在 <a href="https://github.com/Loveway/HWChangeFont" target="_blank" rel="noopener">这里</a>下载。<br>最近在看 <code>swift</code> ，做了一下笔记，后面会为大家分享总结的一些 <code>swift tips</code>。<br>最后，如果你有什么建议或者指正的地方请给我留言，如果喜欢或者对你有帮助的话，就请 <code>star</code> 一下吧，谢谢！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;忙忙忙！！！好久没写博客了，前段时间实在是每天满满的，回去了累了也不想写了，只是躺床上看一会东西。最近公司要在 5 月份举办个大型的发布会，所以在这之前要把版本稳定，界面提升，所以有很多&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="iOS" scheme="https://www.clearloveway.com/tags/iOS/"/>
    
      <category term="runtime" scheme="https://www.clearloveway.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>关于 iOS 开发一些优秀的博客整理</title>
    <link href="https://www.clearloveway.com/posts/c605cc1"/>
    <id>https://www.clearloveway.com/posts/c605cc1</id>
    <published>2016-01-28T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.283Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>做开发，辅助工具是必不可少的，有的人喜欢看书，有的人喜欢看博客，有的人喜欢看视频，就我个人而言，看博客的时间比较多，个人感觉看博客会多一些自己的理解和思考，所以也收藏了不少个人觉得有价值的博客，趁着今天有时间就稍微整理一下，分享出来，希望有兴趣的<a id="more"></a>也可以找到自己喜欢的！</p><h2 id="唐巧的技术博客"><a href="#唐巧的技术博客" class="headerlink" title="唐巧的技术博客"></a><a href="http://blog.devtang.com/" target="_blank" rel="noopener">唐巧的技术博客</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-6fda02524c66bf90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="唐巧的技术博客"><br>巧神就不用多说了，也是启蒙之一。</p><h3 id="OneV’s-Den"><a href="#OneV’s-Den" class="headerlink" title="OneV’s Den"></a><a href="http://onevcat.com/" target="_blank" rel="noopener">OneV’s Den</a></h3><p><img src="http://upload-images.jianshu.io/upload_images/571495-351485cfa824c644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OneV&#39;s Den"><br>瞄神，Unity 开发者。现居日本，就职于 LINE，一直在用 <a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="noopener">VVDocumenter</a> ，所著《swifter 2.0》目前在看</p><h2 id="Garan-no-dou-一只魔法师的工坊"><a href="#Garan-no-dou-一只魔法师的工坊" class="headerlink" title="Garan no dou | 一只魔法师的工坊"></a><a href="http://blog.ibireme.com/" target="_blank" rel="noopener">Garan no dou | 一只魔法师的工坊</a></h2><hr><p><img src="http://upload-images.jianshu.io/upload_images/571495-12a381c47d32c406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Garan no dou | 一只魔法师的工坊"></p><p>郭曜源，前段时间非常火的开源 <a href="https://github.com/ibireme/YYKit" target="_blank" rel="noopener">YYKit</a> 的作者，对图形处理性能有着独特的理解，个人非常喜欢它的代码风格，也在尝试着用其所开源的项目。这里有一篇关与他的采访：</p><div class="note info"><p><a href="http://www.infoq.com/cn/news/2015/11/ibireme-interview?utm_source=tuicool&utm_medium=referral" target="_blank" rel="noopener">专访YYKit作者郭曜源：开源大牛是怎样炼成的</a></p></div><h2 id="Kitten’s-时间胶囊"><a href="#Kitten’s-时间胶囊" class="headerlink" title="Kitten’s 时间胶囊"></a><a href="http://kittenyang.com/" target="_blank" rel="noopener">Kitten’s 时间胶囊</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-a8233245d54196ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Kitten&#39;s 时间胶囊"><br>杨骑滔(KittenYang)，对动画的理解比较好，之前研究动画效果的时候一直在看他的博客，学习了很多。所出的一本交互式电子书 <code>A GUIDE TO IOS ANIMATION</code> 也一直在看。</p><h2 id="我就叫Sunny怎么了"><a href="#我就叫Sunny怎么了" class="headerlink" title="我就叫Sunny怎么了"></a><a href="http://blog.sunnyxx.com/" target="_blank" rel="noopener">我就叫Sunny怎么了</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-2116b64b8c13cc18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="孙源的技术博客"><br>孙源，百度 90 后 iOS 开发工程师，对底层理解比较好，还有一些实用的技巧性东西，值得一看。</p><h2 id="里脊串的开发随笔"><a href="#里脊串的开发随笔" class="headerlink" title="里脊串的开发随笔"></a><a href="http://adad184.com/" target="_blank" rel="noopener">里脊串的开发随笔</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-039c0a029f1e3a8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="里脊串的开发随笔"><br>串哥的博客里面还是有不少好东西的，分享了很多经验技巧。</p><h2 id="limboy"><a href="#limboy" class="headerlink" title="limboy"></a><a href="http://limboy.me" target="_blank" rel="noopener">limboy</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-11c3f8f7752e994f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="limboy"><br>作者蘑菇街厂里的好像，有一些经验分享不错的。</p><h2 id="魏先宇的程序人生"><a href="#魏先宇的程序人生" class="headerlink" title="魏先宇的程序人生"></a><a href="http://blog.csdn.net/likendsl" target="_blank" rel="noopener">魏先宇的程序人生</a></h2><p>讲得很详细，适合新手。<br><img src="http://upload-images.jianshu.io/upload_images/571495-4a94cdc4afe055c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="魏先宇的程序人生"></p><h2 id="禅与-Objective-C-编程艺术-Zen-and-the-Art-of-the-Objective-C-Craftsmanship-中文翻译"><a href="#禅与-Objective-C-编程艺术-Zen-and-the-Art-of-the-Objective-C-Craftsmanship-中文翻译" class="headerlink" title="禅与 Objective-C 编程艺术  Zen and the Art of the Objective-C Craftsmanship 中文翻译"></a><a href="https://github.com/oa414/objc-zen-book-cn#designated-%E5%92%8C-secondary-initializers" target="_blank" rel="noopener">禅与 Objective-C 编程艺术 Zen and the Art of the Objective-C Craftsmanship 中文翻译</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-09a37a0f200d27fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="禅与 Objective-C 编程艺术"><br>禅与 Objective-C 编程艺术 Zen and the Art of the Objective-C Craftsmanship 中文翻译，还是很不错的。</p><h2 id="swift-2-0-官方翻译版本"><a href="#swift-2-0-官方翻译版本" class="headerlink" title="swift 2.0 官方翻译版本"></a><a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="noopener">swift 2.0 官方翻译版本</a></h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-29b91ff1fb4f8633.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swift 2.0"><br>苹果官方承认的翻译版本，<code>swift</code>入门必备。</p><h2 id="Swift-GG-（2-26更新）"><a href="#Swift-GG-（2-26更新）" class="headerlink" title="Swift.GG （2.26更新）"></a><a href="http://swift.gg/" target="_blank" rel="noopener">Swift.GG</a> （2.26更新）</h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-41c5267c24ae033b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SwiftGG"><br>学习<code>Swift</code>非常好的一个地方</p><h2 id="雷纯锋的技术博客（3-18更新）"><a href="#雷纯锋的技术博客（3-18更新）" class="headerlink" title="雷纯锋的技术博客（3.18更新）"></a><a href="http://blog.leichunfeng.com/" target="_blank" rel="noopener">雷纯锋的技术博客</a>（3.18更新）</h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-e985da1ccdbbddfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="雷纯锋的技术博客"></p><p>学习 <code>RAC</code> 的话就这个了，不多解释。。。</p><p>目前就先分享这么多，后面会持续更新。。。</p><h2 id="南峰子的技术博客-（6-21更新）"><a href="#南峰子的技术博客-（6-21更新）" class="headerlink" title="南峰子的技术博客 （6.21更新）"></a><a href="http://southpeak.github.io/" target="_blank" rel="noopener">南峰子的技术博客</a> （6.21更新）</h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-b56fdfb0c4d9e366.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="南峰子的技术博客"><br>南大的博客，之前就职于百度，现就职于京东商城，可以学到不少东西</p><h2 id="objc中国（6-21更新）"><a href="#objc中国（6-21更新）" class="headerlink" title="objc中国（6.21更新）"></a><a href="http://objccn.io/" target="_blank" rel="noopener">objc中国</a>（6.21更新）</h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-83589b323ac5e645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="objc中国"><br>瞄神创建的社区，里面文章大都是翻译国外优秀作品，值得一看</p><h2 id="没故事的卓同学（6-21更新）"><a href="#没故事的卓同学（6-21更新）" class="headerlink" title="没故事的卓同学（6.21更新）"></a><a href="http://www.jianshu.com/u/88a056103c02" target="_blank" rel="noopener">没故事的卓同学</a>（6.21更新）</h2><p><img src="http://upload-images.jianshu.io/upload_images/571495-9cecd96b5a68f858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没故事的卓同学"></p><p>丁香园大佬，Swift 灵魂导师卓富贵 😀 ！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;做开发，辅助工具是必不可少的，有的人喜欢看书，有的人喜欢看博客，有的人喜欢看视频，就我个人而言，看博客的时间比较多，个人感觉看博客会多一些自己的理解和思考，所以也收藏了不少个人觉得有价值的博客，趁着今天有时间就稍微整理一下，分享出来，希望有兴趣的&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="https://www.clearloveway.com/categories/Other/"/>
    
    
      <category term="iOS" scheme="https://www.clearloveway.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 简单自定义滑动视图（UIScrollView）</title>
    <link href="https://www.clearloveway.com/posts/813440fa"/>
    <id>https://www.clearloveway.com/posts/813440fa</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>好久没写博客了，这段时间事情比较多，心情也不是很美妙，但是代码还是要继续啊！<br>今天分享的是自定义的一个 <code>ScrollView</code> ，也就是一般在首页 <code>Banner</code> 都可以随处可见的滑动视图，这里做了一个自动滑动和手动滑动平滑过度的 <code>demo</code>。其实原理大家都知道的，以三张图片为例，就是把<a id="more"></a>第一张放在第三张的后面，这样就有四个，已形成无限循环滑动，下面看效果图：</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-4383e778632278b3.gif?imageMogr2/auto-orient/strip" alt="滑动效果图"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>之前也见过网上的一些 <code>demo</code> ，这里只是自己封装一下，代码应该还是比较清晰的，使用起来也非常简单，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  HWScrollViewDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/1/22.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 www.igancao.com. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"HWScrollView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *imageArray = @[</span><br><span class="line">                            <span class="string">@"https://d13yacurqjgara.cloudfront.net/users/26059/screenshots/2047158/beerhenge.jpg"</span>,</span><br><span class="line">                            <span class="string">@"https://d13yacurqjgara.cloudfront.net/users/26059/screenshots/2016158/avalanche.jpg"</span>,</span><br><span class="line">                            <span class="string">@"https://d13yacurqjgara.cloudfront.net/users/26059/screenshots/1839353/pilsner.jpg"</span>,</span><br><span class="line">                            <span class="string">@"https://d13yacurqjgara.cloudfront.net/users/26059/screenshots/1833469/porter.jpg"</span>,</span><br><span class="line">                            ];</span><br><span class="line"> </span><br><span class="line">    HWScrollView *scrollV = [HWScrollView scrollViewWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">64</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame), <span class="number">120</span>)                                         </span><br><span class="line">                                                imageURLArray:imageArray</span><br><span class="line">                                             placeHolderImage:<span class="string">@"pictureHolder"</span> </span><br><span class="line">                                         pageControlShowStyle:PageControlShowStyleCenter];</span><br><span class="line">    <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</span><br><span class="line">    scrollV.callBackBlock = ^(<span class="built_in">NSInteger</span> index, <span class="built_in">NSString</span> *imageURL) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击了第 %ld 张"</span>,index);</span><br><span class="line">    &#125;;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:scrollV];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这里只需要导入 <code>HWScrollView.h</code> 这个头文件即可，然后创建一个 <code>HWScrollView</code> ，设置好 frame、imageArray、placeHolderImage 和 PageControl 的位置即可，直接调用以下这个类方法即可</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)scrollViewWithFrame:(<span class="built_in">CGRect</span>)frame </span><br><span class="line">                      imageURLArray:(<span class="built_in">NSArray</span> *)imageURLArray </span><br><span class="line">                   placeHolderImage:(<span class="built_in">NSString</span> *)placeHolder </span><br><span class="line">               pageControlShowStyle:(PageControlShowStyle)pageControlShowStyle;</span><br></pre></td></tr></table></figure><p>然后就是点击了每个 <code>imageView</code> 后的回调</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    scrollV.callBackBlock = ^(<span class="built_in">NSInteger</span> index, <span class="built_in">NSString</span> *imageURL) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击了第 %ld 张"</span>,index);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>使用上面 <code>callBackBlock</code> 回调，得到 <code>index</code> 和 <code>imageURL</code> 然后就可以做你想做的事情了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>进入 <code>HWScrollView.h</code> 你可以看到</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  HWScrollView.h</span></span><br><span class="line"><span class="comment">//  HWScrollViewDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/1/22.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 www.igancao.com. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, PageControlShowStyle) &#123;</span><br><span class="line">    </span><br><span class="line">    PageControlShowStyleNone        = <span class="number">0</span>,</span><br><span class="line">    PageControlShowStyleBottomLeft  = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    PageControlShowStyleCenter      = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    PageControlShowStyleBottomRight = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    PageControlShowStyleTopLeft     = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    PageControlShowStyleTopRight    = <span class="number">1</span> &lt;&lt; <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^tapCallBackBlock)(<span class="built_in">NSInteger</span> index, <span class="built_in">NSString</span> *imageURL);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HWScrollView</span> : <span class="title">UIView</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  自动滑动的时间间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> scrollTime;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  是否允许自动滑动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> isAllowAutoScroll;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  PageControl的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) PageControlShowStyle pageControlShowStyle;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  点击后的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) tapCallBackBlock callBackBlock;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  创建一个新的HWScrollView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param frame                frame</span></span><br><span class="line"><span class="comment"> *  @param imageURLArray        要展示的图片链接的数组</span></span><br><span class="line"><span class="comment"> *  @param placeHolder          未加载完成时的替代图片</span></span><br><span class="line"><span class="comment"> *  @param pageControlShowStyle PageControl的显示位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return HWScrollView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)scrollViewWithFrame:(<span class="built_in">CGRect</span>)frame </span><br><span class="line">                      imageURLArray:(<span class="built_in">NSArray</span> *)imageURLArray </span><br><span class="line">                   placeHolderImage:(<span class="built_in">NSString</span> *)placeHolder </span><br><span class="line">               pageControlShowStyle:(PageControlShowStyle)pageControlShowStyle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这里所有的属性都注释的比较清楚，用起来会比较方便。</p><p>进入 <code>HWScrollView.m</code> 你可以看到</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"HWScrollView.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIImageView+YYWebImage.h"</span></span></span><br></pre></td></tr></table></figure><p>这里加载网络图片的时候我使用的是 <code>YYWebImage</code>，在 <code>demo</code> 里面可以看见，如果你的工程中使用的是 <code>SDWebImage</code> 你也可以把 <code>YYWebImage</code> 换成 <code>SDWebImage</code> ，并把方法替换一下即可</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    [_leftImageView yy_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:_imageURLArray[_leftImageIndex]] placeholder:_placeHolderImage];</span><br></pre></td></tr></table></figure><h2 id="关于自定义-PageControl"><a href="#关于自定义-PageControl" class="headerlink" title="关于自定义 PageControl"></a>关于自定义 <code>PageControl</code></h2><p>上面效果图我们可以看到，使用的 <code>PageControl</code> 是自定义的，<br><img src="http://upload-images.jianshu.io/upload_images/571495-f810226978b83471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未选中状态"></p><p><img src="http://upload-images.jianshu.io/upload_images/571495-d13dcdbabbc4732b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选中状态"><br>使用的是上面这两个图片来自定义的 <code>PageControl</code>，查看代码我是这样写的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HWPageControl</span> : <span class="title">UIPageControl</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  当前选中的pageControl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIImage</span> *activeImage;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  没有选中的pageControl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIImage</span> *inactiveImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>然后实现的时候</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HWPageControl</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.activeImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"all_yellow_circle"</span>];</span><br><span class="line">        <span class="keyword">self</span>.inactiveImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"border_yellow_circle"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)updateDots &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span>.subviews count]; i++) &#123;</span><br><span class="line">        <span class="built_in">UIImageView</span> *imageV = [[<span class="built_in">UIImageView</span> alloc]initWithFrame:<span class="keyword">self</span>.subviews[i].bounds];</span><br><span class="line">        [<span class="keyword">self</span>.subviews[i] addSubview:imageV];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span>.subviews count]; i++) &#123;</span><br><span class="line">        <span class="built_in">UIImageView</span> *imagev = (<span class="built_in">UIImageView</span> *)<span class="keyword">self</span>.subviews[i].subviews[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ([imagev isKindOfClass:[<span class="built_in">UIImageView</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="keyword">self</span>.currentPage) &#123;</span><br><span class="line">                imagev.image = _activeImage;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                imagev.image = _inactiveImage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setCurrentPage:(<span class="built_in">NSInteger</span>)page &#123;</span><br><span class="line">    [<span class="keyword">super</span> setCurrentPage:page];</span><br><span class="line">    [<span class="keyword">self</span> updateDots];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在 <code>PageControl</code> 的子视图上加一个 <code>imageView</code>，然后找到这个 <code>imageView</code> 添加自定义的图片，就实现了自定义效果</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这里使用的是 <code>YYWebImage</code>，关于使用方法（手动添加和 <code>cocoaPods</code> 添加）可以在这里 <a href="https://github.com/ibireme/YYWebImage" target="_blank" rel="noopener"><em>YYWebImage</em></a> 查看，这里使用的是手动添加的方法。<br>以上所有的代码都可以在 <a href="https://github.com/Loveway/HWScrollViewDemo/tree/master" target="_blank" rel="noopener"><em>HWScrollViewDemo</em></a> 看到。</p><p>未经作者许可请勿转载！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;好久没写博客了，这段时间事情比较多，心情也不是很美妙，但是代码还是要继续啊！&lt;br&gt;今天分享的是自定义的一个 &lt;code&gt;ScrollView&lt;/code&gt; ，也就是一般在首页 &lt;code&gt;Banner&lt;/code&gt; 都可以随处可见的滑动视图，这里做了一个自动滑动和手动滑动平滑过度的 &lt;code&gt;demo&lt;/code&gt;。其实原理大家都知道的，以三张图片为例，就是把&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="iOS" scheme="https://www.clearloveway.com/tags/iOS/"/>
    
      <category term="滑动视图" scheme="https://www.clearloveway.com/tags/%E6%BB%91%E5%8A%A8%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>iOS 实现自定义的弹出视图（popView）</title>
    <link href="https://www.clearloveway.com/posts/d1592f56"/>
    <id>https://www.clearloveway.com/posts/d1592f56</id>
    <published>2016-01-10T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.270Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>前段时间，在项目中有个需求是支付完成后，弹出红包，实现这么一个发红包的功能。做了最后，实现的效果大致如下<a id="more"></a>：</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-3d909ad023b875b3.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>整个 <code>ViewController</code> 的代码大致如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  SecondViewController.m</span></span><br><span class="line"><span class="comment">//  HWPopTool</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/1/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 www.igancao.com. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"SecondViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"HWPopTool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SecondViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *contentView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SecondViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    </span><br><span class="line">    _contentView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">300</span>)];</span><br><span class="line">    _contentView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    btn.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    btn.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    [btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(popViewShow) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)popViewShow &#123;</span><br><span class="line">    <span class="built_in">UIImageView</span> *imageV = [[<span class="built_in">UIImageView</span> alloc]initWithFrame:_contentView.bounds];</span><br><span class="line">    imageV.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"jei"</span>];</span><br><span class="line">    [_contentView addSubview:imageV];</span><br><span class="line">    </span><br><span class="line">    [HWPopTool sharedInstance].shadeBackgroundType = ShadeBackgroundTypeSolid;</span><br><span class="line">    [HWPopTool sharedInstance].closeButtonType = ButtonPositionTypeRight;</span><br><span class="line">    [[HWPopTool sharedInstance] showWithPresentView:_contentView animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>我们引入了 <code>HWPopTool.h</code> ，并且创建了一个 <code>button</code> ，点击 <code>button</code> 的方法是 <code>popViewShow</code> ，我们来看一下这里面的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)popViewShow &#123;</span><br><span class="line">    <span class="built_in">UIImageView</span> *imageV = [[<span class="built_in">UIImageView</span> alloc]initWithFrame:_contentView.bounds];</span><br><span class="line">    imageV.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"jei"</span>];</span><br><span class="line">    [_contentView addSubview:imageV];</span><br><span class="line">    </span><br><span class="line">    [HWPopTool sharedInstance].shadeBackgroundType = ShadeBackgroundTypeSolid;</span><br><span class="line">    [HWPopTool sharedInstance].closeButtonType = ButtonPositionTypeRight;</span><br><span class="line">    [[HWPopTool sharedInstance] showWithPresentView:_contentView animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在 _contentView 上放了一个 imageView ，然后我们设置了 shadeBackgroundType 和 closeButtonType 以后，下面一句代码就是展示出来 popView 。<br>这里主要就是我们弹出一个 <code>view</code> ，至于这个 <code>view</code> 多大，上面放什么，都是由你自己决定的。</p><h2 id="关于HWPopTool里面的一些属性和方法"><a href="#关于HWPopTool里面的一些属性和方法" class="headerlink" title="关于HWPopTool里面的一些属性和方法"></a>关于<code>HWPopTool</code>里面的一些属性和方法</h2><p>先来看一下 <code>HWPopTool.h</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  HWPopTool.h</span></span><br><span class="line"><span class="comment">//  HWPopTool</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/1/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 www.igancao.com. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  关闭按钮的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ButtonPositionType) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  无</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ButtonPositionTypeNone = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  左上角</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ButtonPositionTypeLeft = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  右上角</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ButtonPositionTypeRight = <span class="number">2</span> &lt;&lt; <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  蒙板的背景色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ShadeBackgroundType) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  渐变色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ShadeBackgroundTypeGradient = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  固定色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ShadeBackgroundTypeSolid = <span class="number">1</span> &lt;&lt; <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^completeBlock)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HWPopTool</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIColor</span> *popBackgroudColor;<span class="comment">//弹出视图的背景色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> tapOutsideToDismiss;<span class="comment">//点击蒙板是否弹出视图消失</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) ButtonPositionType closeButtonType;<span class="comment">//关闭按钮的类型</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) ShadeBackgroundType shadeBackgroundType;<span class="comment">//蒙板的背景色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  创建一个实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return CHWPopTool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (HWPopTool *)sharedInstance;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  弹出要展示的View</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param presentView show View</span></span><br><span class="line"><span class="comment"> *  @param animated    是否动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)showWithPresentView:(<span class="built_in">UIView</span> *)presentView animated:(<span class="built_in">BOOL</span>)animated;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  关闭弹出视图</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param complete complete block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)closeWithBlcok:(<span class="keyword">void</span>(^)())complete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>由于之前写的比较仓促，今天趁着空余时间又把代码整理了一遍，比如关闭之后的回调，之前用 <code>delegate</code> 实现的，今天又用 <code>block</code> 重新写的，简洁一点吧，另外基本上所有的方法、属性、枚举我都有注释，算是个个人习惯吧。<br>这里面有几点需要说明的是：</p><ul><li>1.<code>ShadeBackgroundType</code>是蒙板的背景色属性，有固定的和渐变的（<code>ShadeBackgroundTypeGradient</code>），关于这个渐变，有兴趣的可以研究一下<code>CAGradientLayer</code>，还是很有趣的，在后来的文章中也会说到。</li><li>2.<code>tapOutsideToDismiss</code> 这个是设置点击蒙板，<code>popView</code> 消失不消失的属性，默认的是 <code>YES</code></li><li>3.<code>- (void)closeWithBlcok:(void(^)())complete</code> 这个方法，是关闭后的回调，比如说发送红包以后，等 <code>popView</code> 消失以后回到上一页的这种。</li></ul><p>由于注释的基本都很清楚了，这里就不多说了，</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我一般写博客的时候，贴代码喜欢贴全部的代码，我认为这样会直观一点（当然非常多的除外），最后，所有的代码 <code>demo</code> 都可以在 <a href="https://github.com/Loveway/HWPopTool" target="_blank" rel="noopener"><em>这里</em></a> 看到！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;前段时间，在项目中有个需求是支付完成后，弹出红包，实现这么一个发红包的功能。做了最后，实现的效果大致如下&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="iOS" scheme="https://www.clearloveway.com/tags/iOS/"/>
    
      <category term="popView" scheme="https://www.clearloveway.com/tags/popView/"/>
    
  </entry>
  
  <entry>
    <title>iOS 一句代码解决倒计时问题</title>
    <link href="https://www.clearloveway.com/posts/bab0ff15"/>
    <id>https://www.clearloveway.com/posts/bab0ff15</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.272Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>最近工作比较忙，然后最近也在尝试着翻译一篇关于 <code>CALayer</code> 非常详解的一篇文章，文章还是比较好也比较长的，等整理完了再发布出来吧。所以也没啥多余的时间写些东西，就先来分享一下开发中的一些小 <code>Tips</code> 吧<a id="more"></a>。</p><h2 id="倒计时问题"><a href="#倒计时问题" class="headerlink" title="倒计时问题"></a>倒计时问题</h2><p>在开发中经常遇到倒计时倒计时问题，写一个 <code>Button</code> ，然后各种判断各种状态，好多代码感觉很乱，下面就分享一下，一句话解决倒计时问题的例子（当然不是万能的，只适合大部分普通的倒计时^_^）！<br>先看效果</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-92c1547f64ea24f6.gif?imageMogr2/auto-orient/strip" alt="倒计时按钮的效果"><br>再看看我们的代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  HWCountdownDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 16/1/4.</span></span><br><span class="line"><span class="comment">//  Copyright © 2016年 www.igancao.com. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIButton+countDown.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *countdownBtn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">IBAction</span>)countdownBtnClick:(<span class="built_in">UIButton</span> *)sender &#123;</span><br><span class="line">    [_countdownBtn startWithTime:<span class="number">5</span> title:<span class="string">@"获取验证码"</span> countDownTitle:<span class="string">@"s"</span> mainColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">84</span>/<span class="number">255.0</span> green:<span class="number">180</span>/<span class="number">255.0</span> blue:<span class="number">98</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>f] countColor:[<span class="built_in">UIColor</span> lightGrayColor]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这里主要的就是 <code>xib</code> 拉了一个 <code>button</code> 然后连接了它的属性和方法，我们可以看到就调用了</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_countdownBtn startWithTime:<span class="number">5</span> title:<span class="string">@"获取验证码"</span> countDownTitle:<span class="string">@"s"</span> mainColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">84</span>/<span class="number">255.0</span> green:<span class="number">180</span>/<span class="number">255.0</span> blue:<span class="number">98</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>f] countColor:[<span class="built_in">UIColor</span> lightGrayColor]];&#125;</span><br></pre></td></tr></table></figure><p>这一句代码，就完成了倒计时功能。<br>这里我写了一个 <code>category</code> ，里面代码是这样的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UIButton+countDown.m</span></span><br><span class="line"><span class="comment">//  LiquoriceDoctorProject</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/4.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 iMac. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"UIButton+countDown.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">countDown</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)startWithTime:(<span class="built_in">NSInteger</span>)timeLine title:(<span class="built_in">NSString</span> *)title countDownTitle:(<span class="built_in">NSString</span> *)subTitle mainColor:(<span class="built_in">UIColor</span> *)mColor countColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//倒计时时间</span></span><br><span class="line">    __block <span class="built_in">NSInteger</span> timeOut = timeLine;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</span><br><span class="line">    <span class="comment">//每秒执行一次</span></span><br><span class="line">    dispatch_source_set_timer(_timer, dispatch_walltime(<span class="literal">NULL</span>, <span class="number">0</span>), <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</span><br><span class="line">    dispatch_source_set_event_handler(_timer, ^&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//倒计时结束，关闭</span></span><br><span class="line">        <span class="keyword">if</span> (timeOut &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            dispatch_source_cancel(_timer);</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">self</span>.backgroundColor = mColor;</span><br><span class="line">                [<span class="keyword">self</span> setTitle:title forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">                <span class="keyword">self</span>.userInteractionEnabled = <span class="literal">YES</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> allTime = (<span class="keyword">int</span>)timeLine + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> seconds = timeOut % allTime;     </span><br><span class="line">            <span class="built_in">NSString</span> *timeStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%0.2d"</span>, seconds];</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="keyword">self</span>.backgroundColor = color;</span><br><span class="line">                [<span class="keyword">self</span> setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>,timeStr,subTitle] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">                <span class="keyword">self</span>.userInteractionEnabled = <span class="literal">NO</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            timeOut--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_resume(_timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>关于这个方法的定义</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  UIButton+countDown.h</span></span><br><span class="line"><span class="comment">//  LiquoriceDoctorProject</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/4.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 iMac. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> (<span class="title">countDown</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  倒计时按钮</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param timeLine 倒计时总时间</span></span><br><span class="line"><span class="comment"> *  @param title    还没倒计时的title</span></span><br><span class="line"><span class="comment"> *  @param subTitle 倒计时中的子名字，如时、分</span></span><br><span class="line"><span class="comment"> *  @param mColor   还没倒计时的颜色</span></span><br><span class="line"><span class="comment"> *  @param color    倒计时中的颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)startWithTime:(<span class="built_in">NSInteger</span>)timeLine title:(<span class="built_in">NSString</span> *)title countDownTitle:(<span class="built_in">NSString</span> *)subTitle mainColor:(<span class="built_in">UIColor</span> *)mColor countColor:(<span class="built_in">UIColor</span> *)color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>试想，如果你有多个界面用到这样的倒计时按钮，比如什么登录注册、修改密码啥的，直接调用一个方法，会不会很方便？<br>上面的 <code>Demo</code> 所有的代码可以在 <a href="https://github.com/Loveway/HWCountdownDemo" target="_blank" rel="noopener">这里</a> 看到<br>当然，这里只是简单地自定义，你还可以在里面做更多的操作，比如加点动画什么的。之前写过 <code>Swift</code> 的一些倒计时的例子，如果你有兴趣，可以看看下面的效果</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-660b933d7d87c45b.gif?imageMogr2/auto-orient/strip" alt="加动画的倒计时按钮"><br>代码在<a href="https://github.com/Loveway/CHWCountdownBtn" target="_blank" rel="noopener">这里</a>可以看到</p><h2 id="复合语句在-Objective-C-中的使用"><a href="#复合语句在-Objective-C-中的使用" class="headerlink" title="复合语句在 Objective-C 中的使用"></a>复合语句在 Objective-C 中的使用</h2><p>之前在一篇文章中看到过一次介绍复合语句在iOS中的使用，这里跟大家分享一下。<br>比如我们一般写一个 <code>tableView</code> 一般都是向下面这种写法写的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">self</span>.myTableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame), <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.view.frame)) style:<span class="built_in">UITableViewStyleGrouped</span>];</span><br><span class="line">        <span class="keyword">self</span>.myTableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">        <span class="keyword">self</span>.myTableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.myTableView];</span><br></pre></td></tr></table></figure><p>使用复合语句的话就是把整个代码块放在 <code>（</code> 和 <code>{</code> 里面，看起来更清晰，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">self</span>.myTableView = (&#123; <span class="built_in">UITableView</span> *tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.view.frame), <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.view.frame)) style:<span class="built_in">UITableViewStyleGrouped</span>];</span><br><span class="line">        tableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">        tableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span>.view addSubview:tableView];</span><br><span class="line">        tableView;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>其实上面两段代码意思完全一样，只不过写法不同罢了，第二段看起来更炫酷，快去试试吧！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;最近工作比较忙，然后最近也在尝试着翻译一篇关于 &lt;code&gt;CALayer&lt;/code&gt; 非常详解的一篇文章，文章还是比较好也比较长的，等整理完了再发布出来吧。所以也没啥多余的时间写些东西，就先来分享一下开发中的一些小 &lt;code&gt;Tips&lt;/code&gt; 吧&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="iOS" scheme="https://www.clearloveway.com/tags/iOS/"/>
    
      <category term="倒计时" scheme="https://www.clearloveway.com/tags/%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>runtime 那些事（消息机制）</title>
    <link href="https://www.clearloveway.com/posts/ded9fb65"/>
    <id>https://www.clearloveway.com/posts/ded9fb65</id>
    <published>2015-12-23T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.280Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><h2 id="关于-runtime"><a href="#关于-runtime" class="headerlink" title="关于 runtime"></a>关于 runtime</h2><p>之前在项目中有遇到过用 <code>runtime</code> 解决改变全局字体的问题，所以再一次感受到了 <code>runtime</code> 黑魔法的强大，趁现在有机会分享一下对 <code>runtime</code> 的一些理解。<br>在对象调用方法是 <code>Objective-C</code> 中经常使用的功能，也就是消息的传递，而<a id="more"></a> <code>Objective-C</code> 是 <code>C</code> 的超集，所以和 <code>C</code> 不同的是，<code>Objective-C</code> 使用的是动态绑定，也就是 <code>runtime</code>。 <code>Objective-C</code> 的消息传递和消息机制也就不多说了，今天主要说的是动态方法，也就是函数的调用。</p><h2 id="相关的几个函数"><a href="#相关的几个函数" class="headerlink" title="相关的几个函数"></a>相关的几个函数</h2><p>下面一张图详细的概括了每个函数调用的先后以及执行的前提</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-5cd12b17d449bab1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息传递函数的调用"></p><h3 id="对象在收到无法解读的消息后，首先会调用所属类的"><a href="#对象在收到无法解读的消息后，首先会调用所属类的" class="headerlink" title="对象在收到无法解读的消息后，首先会调用所属类的"></a>对象在收到无法解读的消息后，首先会调用所属类的</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br></pre></td></tr></table></figure><p>这个方法在运行时，没有找到 <code>SEL</code> 的 <code>IMP</code> 时就会执行。这个函数是给类利用 <code>class_addMethod</code> 添加函数的机会。根据文档，如果实现了添加函数代码则返回 <code>YES</code> ，未实现返回 <code>NO</code> 。<br>举个例子，新建了一个工程，首先我在 <code>ViewController</code> 这个类中执行 <code>doSomething1</code> 这个方法，代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 www.igancao.com  All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(doSomething)];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">37.726</span> RuntimeTest1[<span class="number">1877</span>:<span class="number">337842</span>] -[ViewController doSomething]: unrecognized selector sent to instance <span class="number">0x7fe9f3736680</span>**</span><br><span class="line">**2015-12-24 10:35:37.729 RuntimeTest1[1877:337842] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[ViewController doSomething]: unrecognized selector sent to instance 0x7fe9f3736680'**</span><br><span class="line">***** First throw call stack:**</span><br></pre></td></tr></table></figure><p>不出意外，程序崩溃，因为没有找到 <code>doSomething</code> 这个方法，下面我们在里面实现 <code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code> 这个方法，并且判断如果 <code>SEL</code> 是 <code>doSomething</code> 那就输出 <code>add method here</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 www.igancao.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(doSomething)];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(doSomething)) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"add method here"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>继续运行，然后看到 <code>log</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">10</span>:<span class="number">47</span>:<span class="number">24.687</span> RuntimeTest1[<span class="number">2007</span>:<span class="number">382077</span>] add method here**</span><br><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">10</span>:<span class="number">47</span>:<span class="number">24.687</span> RuntimeTest1[<span class="number">2007</span>:<span class="number">382077</span>] -[ViewController doSomething]: unrecognized selector sent to instance <span class="number">0x7f9568c331f0</span>**</span><br><span class="line">**2015-12-24 10:47:24.690 RuntimeTest1[2007:382077] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[ViewController doSomething]: unrecognized selector sent to instance 0x7f9568c331f0'**</span><br><span class="line">***** First throw call stack:**</span><br></pre></td></tr></table></figure><p>可以看到程序依然是崩溃了，但是我们可以看到输出了 <code>add method here</code> ，这说明我们 <code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code> 这个方法执行了，并进入了判断，所以，在这儿，我们可以做一下操作，使这个方法得到响应，不至于走到最后 <code>- (void)doesNotRecognizeSelector:(SEL)aSelector</code>这个方法中而崩掉了，接下来，我们继续操作，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 www.igancao.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(doSomething)];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(doSomething)) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"add method here"</span>);</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)dynamicMethodIMP, <span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> dynamicMethodIMP (<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"doSomething SEL"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>导入了 <code>&lt;objc/runtime.h&gt;</code> 并且在 <code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code> 这个方法中执行了 <code>class_addMethod</code> 这个方法，然后定义了一个 <code>void dynamicMethodIMP (id self, SEL _cmd)</code> 这个函数，运行工程，看 <code>log</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">11.934</span> RuntimeTest1[<span class="number">2284</span>:<span class="number">478571</span>] add method here**</span><br><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">11.934</span> RuntimeTest1[<span class="number">2284</span>:<span class="number">478571</span>] doSomething SEL**</span><br></pre></td></tr></table></figure><p>这时候我们发现，程序并没有崩溃，而且还输出了 <code>doSomething SEL</code> ，这时候就说明我们已经通过 <code>runtime</code> 成功的向我们这个类中添加了一个方法。关于 <code>class_addMethod</code> 这个方法，是这样定义的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">OBJC_EXPORT BOOL <span class="title">class_addMethod</span><span class="params">(Class cls, SEL name, IMP imp,  <span class="keyword">const</span> <span class="keyword">char</span> *types)</span></span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>cls</code> 在这个类中添加方法，也就是方法所添加的类<br><code>name</code> 方法名，这个可以随便起的<br><code>imp</code> 实现这个方法的函数<br><code>types</code>定义该数返回值类型和参数类型的字符串，这里比如<code>&quot;v@:&quot;</code>，其中<code>v</code>就是<code>void</code>，带表返回类型就是空，<code>@</code>代表参数，这里指的是<code>id(self)</code>，这里<code>:</code>指的是方法<code>SEL(_cmd)</code>，比如我再定义一个函数</p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newMethod</span> <span class="params">(id self, SEL _cmd, NSString *str)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么添加这个函数的方法就应该是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ass_addMethod([self class], @selector(newMethod), (IMP)newMethod, <span class="string">"i@:@"</span>);</span><br></pre></td></tr></table></figure><h3 id="如果在-BOOL-resolveInstanceMethod-SEL-sel-中没有找到或者添加方法"><a href="#如果在-BOOL-resolveInstanceMethod-SEL-sel-中没有找到或者添加方法" class="headerlink" title="如果在 + (BOOL)resolveInstanceMethod:(SEL)sel 中没有找到或者添加方法"></a>如果在 <code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code> 中没有找到或者添加方法</h3><p>消息继续往下传递到 <code>- (id)forwardingTargetForSelector:(SEL)aSelector</code> 看看是不是有对象可以执行这个方法，我们来重新建个工程，然后新建一个叫 <code>SecondViewController</code> 的类，里面有一个 <code>- (void)secondVCMethod</code> 方法，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  SecondViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年  www.igancao.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"SecondViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SecondViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SecondViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)secondVCMethod &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"This is secondVC method !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma mark - Navigation</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// In a storyboard-based application, you will often want to do a little preparation before navigation</span></span><br><span class="line"><span class="comment">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</span></span><br><span class="line"><span class="comment">    // Get the new view controller using [segue destinationViewController].</span></span><br><span class="line"><span class="comment">    // Pass the selected object to the new view controller.</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>工程结构应该是这样的<br><img src="http://upload-images.jianshu.io/upload_images/571495-43e75b645ee60124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工程目录图"><br>现在我想在 <code>ViewController</code> 中调用 <code>- (void)secondVCMethod</code> 这个方法，我们知道 <code>ViewController</code>和 <code>SecondViewController</code> 并无继承关系，按照正常的步骤去做程序肯定会因为在 <code>ViewController</code> 找不到 <code>- (void)secondVCMethod</code> 这个方法而直接崩溃的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 www.igancao.com  All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">     [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(secondVCMethod)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">13</span>:<span class="number">54</span>:<span class="number">44.314</span> RuntimeTest2[<span class="number">3164</span>:<span class="number">835814</span>] -[ViewController secondVCMethod]: unrecognized selector sent to instance <span class="number">0x7fc3a8535c10</span>**</span><br><span class="line">**2015-12-24 13:54:44.317 RuntimeTest2[3164:835814] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[ViewController secondVCMethod]: unrecognized selector sent to instance 0x7fc3a8535c10'**</span><br><span class="line">***** First throw call stack:**</span><br></pre></td></tr></table></figure><p>现在我们来处理一下这个消息，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  RuntimeTest2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by HenryCheng on 15/12/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2015年 www.igancao.com All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">     [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(secondVCMethod)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    Class <span class="keyword">class</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"SecondViewController"</span>);</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = <span class="keyword">class</span>.new;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="built_in">NSSelectorFromString</span>(<span class="string">@"secondVCMethod"</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"secondVC do this !"</span>);</span><br><span class="line">        <span class="keyword">return</span> vc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</span><br><span class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</span><br><span class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">34.168</span> RuntimeTest2[<span class="number">3284</span>:<span class="number">870957</span>] secondVC <span class="keyword">do</span> <span class="keyword">this</span> !**</span><br><span class="line">**<span class="number">2015</span><span class="number">-12</span><span class="number">-24</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">34.169</span> RuntimeTest2[<span class="number">3284</span>:<span class="number">870957</span>] This is secondVC method !**</span><br></pre></td></tr></table></figure><p>我们会发现<code>- (void)secondVCMethod</code>这个方法执行了，程序也并没有崩溃，原因就是在这一步</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    Class <span class="keyword">class</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"SecondViewController"</span>);</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = <span class="keyword">class</span>.new;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="built_in">NSSelectorFromString</span>(<span class="string">@"secondVCMethod"</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"secondVC do this !"</span>);</span><br><span class="line">        <span class="keyword">return</span> vc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在没有找到 <code>- (void)secondVCMethod</code> 这个方法的时候，消息继续传递，直到 <code>- (id)forwardingTargetForSelector:(SEL)aSelector</code> ，然后我在里面创建了一个<code>SecondViewController</code>的对象，并且判断如果有这个方法，就返回 <code>SecondViewController</code> 的对象。这个函数就是消息的转发，在这儿我们成功的把消息传给了 <code>SecondViewController</code> ，然后让它来执行，所以就执行了那个方法。同时，也相当于完成了一个多继承！</p><h2 id="最后一点"><a href="#最后一点" class="headerlink" title="最后一点"></a>最后一点</h2><p>当然，还有好几个函数，在上面那张图里面已经清晰的表达了，有兴趣的可以自己试试，看看消息的传递顺序到底是怎么样的。上面提到的这些只是 <code>runtime</code> 的冰山一角，<code>runtime</code> 黑魔法的强大远不止于此，比如方法的调配（<code>Method Swizzling</code>）等，在项目实战中还是很有用的，后面有时间会再介绍.</p><div class="note info"><p>参考：<br><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html" target="_blank" rel="noopener">Objective-C Runtime Reference</a><br><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html" target="_blank" rel="noopener">Objective-C Runtime Programming Guide</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;关于-runtime&quot;&gt;&lt;a href=&quot;#关于-runtime&quot; class=&quot;headerlink&quot; title=&quot;关于 runtime&quot;&gt;&lt;/a&gt;关于 runtime&lt;/h2&gt;&lt;p&gt;之前在项目中有遇到过用 &lt;code&gt;runtime&lt;/code&gt; 解决改变全局字体的问题，所以再一次感受到了 &lt;code&gt;runtime&lt;/code&gt; 黑魔法的强大，趁现在有机会分享一下对 &lt;code&gt;runtime&lt;/code&gt; 的一些理解。&lt;br&gt;在对象调用方法是 &lt;code&gt;Objective-C&lt;/code&gt; 中经常使用的功能，也就是消息的传递，而&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/categories/Objective-C/"/>
    
    
      <category term="runtime" scheme="https://www.clearloveway.com/tags/runtime/"/>
    
      <category term="Objective-C" scheme="https://www.clearloveway.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 升级插件失效的解决办法以及使用</title>
    <link href="https://www.clearloveway.com/posts/ed0499a9"/>
    <id>https://www.clearloveway.com/posts/ed0499a9</id>
    <published>2015-12-16T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.317Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><h2 id="在升级-Xcode-以后插件不能使用或者点击了skip-bundle的解决办法"><a href="#在升级-Xcode-以后插件不能使用或者点击了skip-bundle的解决办法" class="headerlink" title="在升级 Xcode 以后插件不能使用或者点击了skip bundle的解决办法"></a>在升级 Xcode 以后插件不能使用或者点击了<code>skip bundle</code>的解决办法</h2><p>一般在升级了 Xcode 以后我们的插件就应该重新导入一下，重新打开 Xcode 会出现下面的弹出框，如图 1<br><img src="http://upload-images.jianshu.io/upload_images/571495-7859dc509bd8bf0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 1"><a id="more"></a><br>一般我们只需要点击一下左边的 <code>Load Bundle</code> 就可以了，如果你点击了 <code>Skip Bundle</code> 或者点击 <code>Load Bundle</code> 以后插件仍然不能用，那就用下面的办法解决</p><h3 id="先找到你的-Xcode-的-UUID-，打开终端，在终端输入"><a href="#先找到你的-Xcode-的-UUID-，打开终端，在终端输入" class="headerlink" title="先找到你的 Xcode 的 UUID ，打开终端，在终端输入"></a>先找到你的 Xcode 的 UUID ，打开终端，在终端输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults <span class="built_in">read</span> /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID</span><br></pre></td></tr></table></figure><p>会得到你的 Xcode 的 UUID，如图 2</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-ca401bb60d2e20fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 2"></p><h3 id="找到你的-Xcode-的插件所在的位置"><a href="#找到你的-Xcode-的插件所在的位置" class="headerlink" title="找到你的 Xcode 的插件所在的位置"></a>找到你的 Xcode 的插件所在的位置</h3><p>Xcode 中所有的插件都放在一个文件夹中，点击前往→前往文件夹（或者<code>shift + command + G</code>）如图 3</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-cda0d443f91b44e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 3"><br>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</span><br></pre></td></tr></table></figure><p>就可以进入到你的插件的文件夹了，如图 4</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-6da9a49c467a0bfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 4"></p><p>右键显示包内容，找到 <code>info.plist</code> ，点击 <code>DVTPlugInCompatibilityUUID</code> 看看有没有你的 Xcode 的 UUID ，没有的话就加一个 item，把你的 UUID 加进去，如图 5</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-3bf7f3dd52e0f300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图 5"></p><p>然后关闭你的 Xcode，再重启点击 <code>Load Bundle</code> 就可以用了</p><h2 id="推荐的Xcode插件"><a href="#推荐的Xcode插件" class="headerlink" title="推荐的Xcode插件"></a>推荐的Xcode插件</h2><h3 id="Alcatraz"><a href="#Alcatraz" class="headerlink" title="Alcatraz"></a>Alcatraz</h3><p>Xcode的插件管理器，非常好用，具体请看巧神的博客<br><a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/" target="_blank" rel="noopener">http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/</a></p><div class="note info"><p>如果安装不上的童鞋可以从<a href="http://pan.baidu.com/s/1eRpIdIa" target="_blank" rel="noopener">这里</a>（网盘地址）下载，然后放在</p><p><code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code></p><p>这个文件夹里把 UUID 加进去就可以使用了</p></div><h3 id="VVDocumenter-Xcode"><a href="#VVDocumenter-Xcode" class="headerlink" title="VVDocumenter-Xcode"></a>VVDocumenter-Xcode</h3><p>瞄神的大作，快速注释代码的插件，一直在用<br><a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="noopener">https://github.com/onevcat/VVDocumenter-Xcode</a></p><h3 id="XAlign"><a href="#XAlign" class="headerlink" title="XAlign"></a>XAlign</h3><p>代码对齐的插件，有强迫症的同学非常适合（个人感觉在宏里面对齐非常好，整齐）<br><a href="https://github.com/qfish/XAlign" target="_blank" rel="noopener">https://github.com/qfish/XAlign</a></p><p>还有很多就不一一列举了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;在升级-Xcode-以后插件不能使用或者点击了skip-bundle的解决办法&quot;&gt;&lt;a href=&quot;#在升级-Xcode-以后插件不能使用或者点击了skip-bundle的解决办法&quot; class=&quot;headerlink&quot; title=&quot;在升级 Xcode 以后插件不能使用或者点击了skip bundle的解决办法&quot;&gt;&lt;/a&gt;在升级 Xcode 以后插件不能使用或者点击了&lt;code&gt;skip bundle&lt;/code&gt;的解决办法&lt;/h2&gt;&lt;p&gt;一般在升级了 Xcode 以后我们的插件就应该重新导入一下，重新打开 Xcode 会出现下面的弹出框，如图 1&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/571495-7859dc509bd8bf0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图 1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Xcode" scheme="https://www.clearloveway.com/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="https://www.clearloveway.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Mac-OS 升级 10-11 以后 cocoaPods 不能使用的解决办法</title>
    <link href="https://www.clearloveway.com/posts/3ed9e542"/>
    <id>https://www.clearloveway.com/posts/3ed9e542</id>
    <published>2015-11-20T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.316Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><h2 id="升级到10-11以后当我们终端输入命令行以后出现"><a href="#升级到10-11以后当我们终端输入命令行以后出现" class="headerlink" title="升级到10.11以后当我们终端输入命令行以后出现"></a>升级到10.11以后当我们终端输入命令行以后出现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: pod: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>这是你之前如果有 cocoapods，但是输入比如 <code>pod update</code> 或者 <code>pod install</code> 之后命令失效，输入<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods</span><br></pre></td></tr></table></figure><p>然后在执行命令，就会解决</p><h2 id="如果你没有装-pods-的话，之前我写过一篇教程"><a href="#如果你没有装-pods-的话，之前我写过一篇教程" class="headerlink" title="如果你没有装 pods 的话，之前我写过一篇教程"></a>如果你没有装 pods 的话，之前我写过一篇教程</h2><p><a href="http://blog.csdn.net/loveway_/article/details/46124139" target="_blank" rel="noopener">cocoapods 的安装与使用方法</a></p><p>注意的是以前的 taobao 路径是输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a http://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>现在要变成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure><p>现在的是 <code>http</code> 换成 <code>https</code> 了</p><h2 id="执行-pod-update-和-pod-install-速度比较慢的问题"><a href="#执行-pod-update-和-pod-install-速度比较慢的问题" class="headerlink" title="执行 pod update 和 pod install 速度比较慢的问题"></a>执行 <code>pod update</code> 和 <code>pod install</code> 速度比较慢的问题</h2><p>在国内嘛，你有可能就被墙了，所以就不要用 <code>pod update</code> 和 <code>pod install</code> 了，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install --verbose --no-repo-update</span><br></pre></td></tr></table></figure><p>来升级和安装。</p><p>如果出现 <code>Operation not permitted - /usr/bin/xcodeproj</code> 这个错误，可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods --pre</span><br></pre></td></tr></table></figure><p>来替代</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure><div class="note info"><p><a href="http://www.cnblogs.com/brycezhang/p/3675670.html" target="_blank" rel="noopener"><code>pods</code>的更新方法</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;升级到10-11以后当我们终端输入命令行以后出现&quot;&gt;&lt;a href=&quot;#升级到10-11以后当我们终端输入命令行以后出现&quot; class=&quot;headerlink&quot; title=&quot;升级到10.11以后当我们终端输入命令行以后出现&quot;&gt;&lt;/a&gt;升级到10.11以后当我们终端输入命令行以后出现&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-bash: pod: &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; not found&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是你之前如果有 cocoapods，但是输入比如 &lt;code&gt;pod update&lt;/code&gt; 或者 &lt;code&gt;pod install&lt;/code&gt; 之后命令失效，输入&lt;/p&gt;
    
    </summary>
    
      <category term="Xcode" scheme="https://www.clearloveway.com/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="https://www.clearloveway.com/tags/Xcode/"/>
    
      <category term="cocoaPods" scheme="https://www.clearloveway.com/tags/cocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>渔夫</title>
    <link href="https://www.clearloveway.com/posts/470c7ddc"/>
    <id>https://www.clearloveway.com/posts/470c7ddc</id>
    <published>2014-12-24T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.286Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>我是一个渔夫<br>我的起点是岸，终点是岸<a id="more"></a><br>有时可以披着朝霞赐给我的锦衣前去<br>薄暮中，沐浴着一海星光满载而归<br>有时狂风暴雨甚至会折断我的桅杆<br>归时只有疲惫的我和将要破碎的渔船<br>我在大海苦与乐的巅峰上徘徊<br>不知下一次是怎样的经历<br>在狂风暴雨中，我不曾痛痛快快地哭泣<br>在清风明月中，我不曾读懂快乐的奥秘<br>我只知道对岸的鱼儿多么肥美<br>风可以不懂我为何坚持要扬帆前进<br>雨可以不懂我希望的热情多么明净<br>我只知道，坚持的我，自信的我<br>可以让我的渔网最终拉动整个大海<br><img src="http://upload-images.jianshu.io/upload_images/571495-68197884a426e95a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;我是一个渔夫&lt;br&gt;我的起点是岸，终点是岸&lt;/p&gt;
    
    </summary>
    
      <category term="Poem" scheme="https://www.clearloveway.com/categories/Poem/"/>
    
    
      <category term="诗歌" scheme="https://www.clearloveway.com/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>相信未来</title>
    <link href="https://www.clearloveway.com/posts/901e992e"/>
    <id>https://www.clearloveway.com/posts/901e992e</id>
    <published>2014-11-04T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.291Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>当蜘蛛网无情地查封了我的炉台<br>当灰烬的余烟叹息着贫困的悲哀<a id="more"></a><br>我依然固执地铺平失望的灰烬<br>用美丽的雪花写下：相信未来</p><p>当我的紫葡萄化为深秋的露水<br>当我的鲜花依偎在别人的情怀<br>我依然固执地用凝霜的枯藤<br>在凄凉的大地上写下：相信未来</p><p>我要用手<br>指那涌向天边的排浪<br>我要用手<br>掌那托住太阳的大海<br>摇曳着曙光那枝温暖漂亮的笔杆<br>用孩子的笔体写下：相信未来</p><p>我之所以坚定地相信未来<br>是我相信未来人们的眼睛<br>她有拨开历史风尘的睫毛<br>她有看透岁月篇章的瞳孔</p><p>不管人们对于我们腐烂的皮肉<br>那些迷途的惆怅、失败的苦痛<br>是寄予感动的热泪、深切的同情<br>还是给以轻蔑的微笑、辛辣的嘲讽<br>我坚信人们对于我们的脊骨<br>那无数次的探索、迷途、失败和成功<br>一定会给予热情、客观、公正的评定<br>是的，我焦急地等待着他们的评定</p><p>朋友，坚定地相信未来吧<br>相信不屈不挠的努力<br>相信战胜死亡的年轻<br>相信未来、热爱生命</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-e497e50063eda057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;当蜘蛛网无情地查封了我的炉台&lt;br&gt;当灰烬的余烟叹息着贫困的悲哀&lt;/p&gt;
    
    </summary>
    
      <category term="Poem" scheme="https://www.clearloveway.com/categories/Poem/"/>
    
    
      <category term="诗歌" scheme="https://www.clearloveway.com/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>九月</title>
    <link href="https://www.clearloveway.com/posts/fd12c93d"/>
    <id>https://www.clearloveway.com/posts/fd12c93d</id>
    <published>2014-10-23T16:00:00.000Z</published>
    <updated>2019-07-05T08:41:57.285Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --><p>目击众神死亡的草原上野花一片<br>远在远方的风比远方更远<a id="more"></a><br>我的琴声呜咽 泪水全无<br>我把这远方的远归还草原</p><p>一个叫木头 一个叫马尾<br>我的琴声呜咽 泪水全无<br>远方只有在死亡中凝聚野花一片<br>明月如镜高悬草原映照千年岁月<br>我的琴声呜咽 泪水全无<br>只身打马过草原</p><p><img src="http://upload-images.jianshu.io/upload_images/571495-e3b3f2d505bc0aa9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jul 05 2019 17:10:04 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;目击众神死亡的草原上野花一片&lt;br&gt;远在远方的风比远方更远&lt;/p&gt;
    
    </summary>
    
      <category term="Poem" scheme="https://www.clearloveway.com/categories/Poem/"/>
    
    
      <category term="诗歌" scheme="https://www.clearloveway.com/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
</feed>
